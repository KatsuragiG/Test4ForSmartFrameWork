// This file isn't generated, but this comment is necessary to exclude it from StyleCop analysis.
// <auto-generated/>

using System;
using MessagePack;
using MessagePack.Formatters;

// ReSharper disable once CheckNamespace - different namespace is intended to simplify copy-pasting between WebApi.Client and WebApi.Server assemblies
namespace TradeStops.Serialization.MessagePackCustomizations
{
    internal class UtcDateTimeFormatterResolver : IFormatterResolver
    {
        // Resolver should be singleton.
        public static IFormatterResolver Instance = new UtcDateTimeFormatterResolver();

        UtcDateTimeFormatterResolver()
        {
        }

        // GetFormatter<T>'s get cost should be minimized so use type cache.
        public IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly IMessagePackFormatter<T> formatter;

            // generic's static constructor should be minimized for reduce type generation size!
            // use outer helper method.
            static FormatterCache()
            {
                formatter = (IMessagePackFormatter<T>)UtcDateTimeMessagePackResolverHelper.GetFormatter(typeof(T));
            }
        }
    }

    internal static class UtcDateTimeMessagePackResolverHelper
    {
        internal static object GetFormatter(Type t)
        {
            if (t == typeof(DateTime))
            {
                return UtcDateTimeMessagePackFormatter.Instance;
            }
            else if (t == typeof(DateTime?))
            {
                return new StaticNullableFormatter<DateTime>(UtcDateTimeMessagePackFormatter.Instance);
            }
            else if (t == typeof(DateTime[]))
            {
                return UtcDateTimeArrayMessagePackFormatter.Instance;
            }

            // If type can not get, must return null for fallback mecanism.
            return null;
        }
    }
}
