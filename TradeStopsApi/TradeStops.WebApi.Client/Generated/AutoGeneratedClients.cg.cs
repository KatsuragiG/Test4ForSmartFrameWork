// <auto-generated/>
// ReSharper disable CheckNamespace
// use Ctrl+M+L to collapse namespaces

using System;
using System.Linq;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;

using TradeStops.WebApi.Client;
using TradeStops.WebApi.Client.Version2;
using TradeStops.WebApi.Client.Configuration;

using TradeStops.Contracts;
using TradeStops.Contracts.Types;
using TradeStops.Contracts.Mappers;
using TradeStops.Contracts.Interfaces;
using TradeStops.Contracts.Generic;
using TradeStops.Contracts.Extensions;

using TradeStops.Common;
using TradeStops.Common.Utils;
using TradeStops.Common.Helpers;
using TradeStops.Common.Extensions;
using TradeStops.Common.Exceptions;
using TradeStops.Common.Enums;
using TradeStops.Common.Enums.JobControl;
using TradeStops.Common.DataStructures;
using TradeStops.Common.Constants;
using TradeStops.Common.Attributes;

namespace TradeStops.WebApi.Client.Generated
{
    public interface IAdminAccountsClientByLicenseKeyApiMethods
    {
        LoginResultContract Login(LoginWithCredentialsContract loginInfo);

        Task<LoginResultContract> LoginAsync(LoginWithCredentialsContract loginInfo);

        SynchronizationResultContract SynchronizeByEmailWithAgora(EmailContract contract);

        Task<SynchronizationResultContract> SynchronizeByEmailWithAgoraAsync(EmailContract contract);

        SynchronizationResultContract SynchronizeBySnaid(SnaidContract contract);

        Task<SynchronizationResultContract> SynchronizeBySnaidAsync(SnaidContract contract);

        SynchronizationResultContract SynchronizeByAgoraCustomerNumber(AgoraCustomerNumberContract contract);

        Task<SynchronizationResultContract> SynchronizeByAgoraCustomerNumberAsync(AgoraCustomerNumberContract contract);

        List<SynchronizationResultContract> SynchronizeByTradeSmithUserGuid(SynchronizeByTradeSmithUserGuidContract contract);

        Task<List<SynchronizationResultContract>> SynchronizeByTradeSmithUserGuidAsync(SynchronizeByTradeSmithUserGuidContract contract);

        List<SynchronizationResultContract> SynchronizeByTradeSmithUserId(int tradeSmithUserId);

        Task<List<SynchronizationResultContract>> SynchronizeByTradeSmithUserIdAsync(int tradeSmithUserId);

        void MergeUsers(MergeUsersContract contract);

        Task MergeUsersAsync(MergeUsersContract contract);

        /// <summary>
        /// Endpoint to merge all duplicated users.
        /// May be long-running for large amount of users, especially with local database.
        /// Currently used only in StansberryTransactionsProcessing Console app.
        /// </summary>
        /// <returns>HTTP status code 200 (OK) in case of success.</returns>
        void AutoMergeUsers();

        /// <summary>
        /// Endpoint to merge all duplicated users.
        /// May be long-running for large amount of users, especially with local database.
        /// Currently used only in StansberryTransactionsProcessing Console app.
        /// </summary>
        /// <returns>HTTP status code 200 (OK) in case of success.</returns>
        Task AutoMergeUsersAsync();

        List<DuplicatedUsersContract> GetDuplicatedUsers();

        Task<List<DuplicatedUsersContract>> GetDuplicatedUsersAsync();
    }

    public interface IAdminAccountsClientByContextKeyApiMethods : IAdminAccountsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminAccountsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminAccountsClient : IAdminAccountsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminAccountsClient, IAdminAccountsClientForUser, IAdminAccountsClientForOrganization>
    {
    }

    public interface IAdminAccountsClientForUser : IAdminAccountsClientByContextKeyApiMethods, IClientByContext<IAdminAccountsClientForUser, IAdminAccountsClientForOrganization>
    {
    }

    public interface IAdminAccountsClientForOrganization : IAdminAccountsClientByOrganizationApiMethods
    {
    }

    public partial class AdminAccountsClient : BaseClient<IAdminAccountsClient, IAdminAccountsClientForUser, IAdminAccountsClientForOrganization, AdminAccountsClient>, IAdminAccountsClient, IAdminAccountsClientForUser, IAdminAccountsClientForOrganization
    {
        public LoginResultContract Login(LoginWithCredentialsContract loginInfo)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/login",
                Method = HttpMethod.Post,
            };

            request.SetBody(loginInfo);

            return PerformRequest<LoginResultContract>(request);
        }

        public async Task<LoginResultContract> LoginAsync(LoginWithCredentialsContract loginInfo)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/login",
                Method = HttpMethod.Post,
            };

            request.SetBody(loginInfo);

            return await PerformRequestAsync<LoginResultContract>(request);
        }

        public SynchronizationResultContract SynchronizeByEmailWithAgora(EmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/synchronize-by-email-with-agora",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SynchronizationResultContract>(request);
        }

        public async Task<SynchronizationResultContract> SynchronizeByEmailWithAgoraAsync(EmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/synchronize-by-email-with-agora",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SynchronizationResultContract>(request);
        }

        public SynchronizationResultContract SynchronizeBySnaid(SnaidContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/synchronize-by-snaid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SynchronizationResultContract>(request);
        }

        public async Task<SynchronizationResultContract> SynchronizeBySnaidAsync(SnaidContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/synchronize-by-snaid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SynchronizationResultContract>(request);
        }

        public SynchronizationResultContract SynchronizeByAgoraCustomerNumber(AgoraCustomerNumberContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/synchronize-by-agora-customer-number",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SynchronizationResultContract>(request);
        }

        public async Task<SynchronizationResultContract> SynchronizeByAgoraCustomerNumberAsync(AgoraCustomerNumberContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/synchronize-by-agora-customer-number",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SynchronizationResultContract>(request);
        }

        public List<SynchronizationResultContract> SynchronizeByTradeSmithUserGuid(SynchronizeByTradeSmithUserGuidContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/synchronize-by-tradesmith-user-guid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<SynchronizationResultContract>>(request);
        }

        public async Task<List<SynchronizationResultContract>> SynchronizeByTradeSmithUserGuidAsync(SynchronizeByTradeSmithUserGuidContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/synchronize-by-tradesmith-user-guid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<SynchronizationResultContract>>(request);
        }

        public List<SynchronizationResultContract> SynchronizeByTradeSmithUserId(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/synchronize-by-tradesmith-user-id/{tradeSmithUserId}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<List<SynchronizationResultContract>>(request);
        }

        public async Task<List<SynchronizationResultContract>> SynchronizeByTradeSmithUserIdAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/accounts/synchronize-by-tradesmith-user-id/{tradeSmithUserId}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<List<SynchronizationResultContract>>(request);
        }

        public void MergeUsers(MergeUsersContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/merge-users/manual",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task MergeUsersAsync(MergeUsersContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/merge-users/manual",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Endpoint to merge all duplicated users.
        /// May be long-running for large amount of users, especially with local database.
        /// Currently used only in StansberryTransactionsProcessing Console app.
        /// </summary>
        /// <returns>HTTP status code 200 (OK) in case of success.</returns>
        public void AutoMergeUsers()
        {
            var request = new RequestData
            {
                Url = $"admin/merge-users/auto",
                Method = HttpMethod.Post,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Endpoint to merge all duplicated users.
        /// May be long-running for large amount of users, especially with local database.
        /// Currently used only in StansberryTransactionsProcessing Console app.
        /// </summary>
        /// <returns>HTTP status code 200 (OK) in case of success.</returns>
        public async Task AutoMergeUsersAsync()
        {
            var request = new RequestData
            {
                Url = $"admin/merge-users/auto",
                Method = HttpMethod.Post,
            };

            await PerformRequestAsync(request);
        }

        public List<DuplicatedUsersContract> GetDuplicatedUsers()
        {
            var request = new RequestData
            {
                Url = $"admin/duplicated-users",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<DuplicatedUsersContract>>(request);
        }

        public async Task<List<DuplicatedUsersContract>> GetDuplicatedUsersAsync()
        {
            var request = new RequestData
            {
                Url = $"admin/duplicated-users",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<DuplicatedUsersContract>>(request);
        }
    }

    public interface IAdminAlertTemplatesClientByLicenseKeyApiMethods
    {
        List<AlertTemplateContract> GetUserAlertTemplates(int userId);

        Task<List<AlertTemplateContract>> GetUserAlertTemplatesAsync(int userId);
    }

    public interface IAdminAlertTemplatesClientByContextKeyApiMethods : IAdminAlertTemplatesClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminAlertTemplatesClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminAlertTemplatesClient : IAdminAlertTemplatesClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminAlertTemplatesClient, IAdminAlertTemplatesClientForUser, IAdminAlertTemplatesClientForOrganization>
    {
    }

    public interface IAdminAlertTemplatesClientForUser : IAdminAlertTemplatesClientByContextKeyApiMethods, IClientByContext<IAdminAlertTemplatesClientForUser, IAdminAlertTemplatesClientForOrganization>
    {
    }

    public interface IAdminAlertTemplatesClientForOrganization : IAdminAlertTemplatesClientByOrganizationApiMethods
    {
    }

    public partial class AdminAlertTemplatesClient : BaseClient<IAdminAlertTemplatesClient, IAdminAlertTemplatesClientForUser, IAdminAlertTemplatesClientForOrganization, AdminAlertTemplatesClient>, IAdminAlertTemplatesClient, IAdminAlertTemplatesClientForUser, IAdminAlertTemplatesClientForOrganization
    {
        public List<AlertTemplateContract> GetUserAlertTemplates(int userId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/alert-templates",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<AlertTemplateContract>>(request);
        }

        public async Task<List<AlertTemplateContract>> GetUserAlertTemplatesAsync(int userId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/alert-templates",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<AlertTemplateContract>>(request);
        }
    }

    public interface IAdminFinancialInstitutionRulesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get financial institution rule by financial institution rule ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Financial institution rule ID.</param>
        /// <returns>The method returns contract for financial institution rule be financial institution rule ID.</returns>
        FinancialInstitutionRuleContract AdminGetFinancialInstitutionRule(int financialInstitutionRuleId);

        /// <summary>
        /// Get financial institution rule by financial institution rule ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Financial institution rule ID.</param>
        /// <returns>The method returns contract for financial institution rule be financial institution rule ID.</returns>
        Task<FinancialInstitutionRuleContract> AdminGetFinancialInstitutionRuleAsync(int financialInstitutionRuleId);

        /// <summary>
        /// Create the rule for a financial institution.
        /// </summary>
        /// <param name="contract">Create financial institution rule contract.</param>
        /// <returns>The method returns contract the newly created rule.</returns>
        FinancialInstitutionRuleContract AdminCreateFinancialInstitutionRule(CreateFinancialInstitutionRuleContract contract);

        /// <summary>
        /// Create the rule for a financial institution.
        /// </summary>
        /// <param name="contract">Create financial institution rule contract.</param>
        /// <returns>The method returns contract the newly created rule.</returns>
        Task<FinancialInstitutionRuleContract> AdminCreateFinancialInstitutionRuleAsync(CreateFinancialInstitutionRuleContract contract);

        /// <summary>
        /// Search financial institution rules.
        /// </summary>
        /// <param name="contract">Search financial institution rules contract.</param>
        /// <returns>The method returns list of found financial institution rules.</returns>
        SearchResultContract<AdminFinancialInstitutionRuleContract> AdminSearchFinancialInstitutionRules(SearchFinancialInstitutionRulesContract contract);

        /// <summary>
        /// Search financial institution rules.
        /// </summary>
        /// <param name="contract">Search financial institution rules contract.</param>
        /// <returns>The method returns list of found financial institution rules.</returns>
        Task<SearchResultContract<AdminFinancialInstitutionRuleContract>> AdminSearchFinancialInstitutionRulesAsync(SearchFinancialInstitutionRulesContract contract);

        /// <summary>
        /// Deletes financial instituion rule by ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Finanical institution rule ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the financial institution rule.</returns>
        void AdminDeleteFinancialInstitutionRule(int financialInstitutionRuleId);

        /// <summary>
        /// Deletes financial instituion rule by ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Finanical institution rule ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the financial institution rule.</returns>
        Task AdminDeleteFinancialInstitutionRuleAsync(int financialInstitutionRuleId);

        /// <summary>
        /// Updates financial instituion rule by ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Finanical institution rule ID.</param>
        /// <param name="contract">Edit financial instituion rule data.</param>
        /// <returns>The method returns contract for updated financial institution rule.</returns>
        FinancialInstitutionRuleContract AdminUpdateFinancialInstitutionRule(int financialInstitutionRuleId, UpdateFinancialInstitutionRuleContract contract);

        /// <summary>
        /// Updates financial instituion rule by ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Finanical institution rule ID.</param>
        /// <param name="contract">Edit financial instituion rule data.</param>
        /// <returns>The method returns contract for updated financial institution rule.</returns>
        Task<FinancialInstitutionRuleContract> AdminUpdateFinancialInstitutionRuleAsync(int financialInstitutionRuleId, UpdateFinancialInstitutionRuleContract contract);
    }

    public interface IAdminFinancialInstitutionRulesClientByContextKeyApiMethods : IAdminFinancialInstitutionRulesClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminFinancialInstitutionRulesClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminFinancialInstitutionRulesClient : IAdminFinancialInstitutionRulesClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminFinancialInstitutionRulesClient, IAdminFinancialInstitutionRulesClientForUser, IAdminFinancialInstitutionRulesClientForOrganization>
    {
    }

    public interface IAdminFinancialInstitutionRulesClientForUser : IAdminFinancialInstitutionRulesClientByContextKeyApiMethods, IClientByContext<IAdminFinancialInstitutionRulesClientForUser, IAdminFinancialInstitutionRulesClientForOrganization>
    {
    }

    public interface IAdminFinancialInstitutionRulesClientForOrganization : IAdminFinancialInstitutionRulesClientByOrganizationApiMethods
    {
    }

    public partial class AdminFinancialInstitutionRulesClient : BaseClient<IAdminFinancialInstitutionRulesClient, IAdminFinancialInstitutionRulesClientForUser, IAdminFinancialInstitutionRulesClientForOrganization, AdminFinancialInstitutionRulesClient>, IAdminFinancialInstitutionRulesClient, IAdminFinancialInstitutionRulesClientForUser, IAdminFinancialInstitutionRulesClientForOrganization
    {
        /// <summary>
        /// Get financial institution rule by financial institution rule ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Financial institution rule ID.</param>
        /// <returns>The method returns contract for financial institution rule be financial institution rule ID.</returns>
        public FinancialInstitutionRuleContract AdminGetFinancialInstitutionRule(int financialInstitutionRuleId)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institution-rules/{financialInstitutionRuleId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<FinancialInstitutionRuleContract>(request);
        }

        /// <summary>
        /// Get financial institution rule by financial institution rule ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Financial institution rule ID.</param>
        /// <returns>The method returns contract for financial institution rule be financial institution rule ID.</returns>
        public async Task<FinancialInstitutionRuleContract> AdminGetFinancialInstitutionRuleAsync(int financialInstitutionRuleId)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institution-rules/{financialInstitutionRuleId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<FinancialInstitutionRuleContract>(request);
        }

        /// <summary>
        /// Create the rule for a financial institution.
        /// </summary>
        /// <param name="contract">Create financial institution rule contract.</param>
        /// <returns>The method returns contract the newly created rule.</returns>
        public FinancialInstitutionRuleContract AdminCreateFinancialInstitutionRule(CreateFinancialInstitutionRuleContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institution-rules/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<FinancialInstitutionRuleContract>(request);
        }

        /// <summary>
        /// Create the rule for a financial institution.
        /// </summary>
        /// <param name="contract">Create financial institution rule contract.</param>
        /// <returns>The method returns contract the newly created rule.</returns>
        public async Task<FinancialInstitutionRuleContract> AdminCreateFinancialInstitutionRuleAsync(CreateFinancialInstitutionRuleContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institution-rules/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<FinancialInstitutionRuleContract>(request);
        }

        /// <summary>
        /// Search financial institution rules.
        /// </summary>
        /// <param name="contract">Search financial institution rules contract.</param>
        /// <returns>The method returns list of found financial institution rules.</returns>
        public SearchResultContract<AdminFinancialInstitutionRuleContract> AdminSearchFinancialInstitutionRules(SearchFinancialInstitutionRulesContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institution-rules/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SearchResultContract<AdminFinancialInstitutionRuleContract>>(request);
        }

        /// <summary>
        /// Search financial institution rules.
        /// </summary>
        /// <param name="contract">Search financial institution rules contract.</param>
        /// <returns>The method returns list of found financial institution rules.</returns>
        public async Task<SearchResultContract<AdminFinancialInstitutionRuleContract>> AdminSearchFinancialInstitutionRulesAsync(SearchFinancialInstitutionRulesContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institution-rules/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SearchResultContract<AdminFinancialInstitutionRuleContract>>(request);
        }

        /// <summary>
        /// Deletes financial instituion rule by ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Finanical institution rule ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the financial institution rule.</returns>
        public void AdminDeleteFinancialInstitutionRule(int financialInstitutionRuleId)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-instituion-rules/{financialInstitutionRuleId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Deletes financial instituion rule by ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Finanical institution rule ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the financial institution rule.</returns>
        public async Task AdminDeleteFinancialInstitutionRuleAsync(int financialInstitutionRuleId)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-instituion-rules/{financialInstitutionRuleId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Updates financial instituion rule by ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Finanical institution rule ID.</param>
        /// <param name="contract">Edit financial instituion rule data.</param>
        /// <returns>The method returns contract for updated financial institution rule.</returns>
        public FinancialInstitutionRuleContract AdminUpdateFinancialInstitutionRule(int financialInstitutionRuleId, UpdateFinancialInstitutionRuleContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-instituion-rules/{financialInstitutionRuleId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<FinancialInstitutionRuleContract>(request);
        }

        /// <summary>
        /// Updates financial instituion rule by ID.
        /// </summary>
        /// <param name="financialInstitutionRuleId">Finanical institution rule ID.</param>
        /// <param name="contract">Edit financial instituion rule data.</param>
        /// <returns>The method returns contract for updated financial institution rule.</returns>
        public async Task<FinancialInstitutionRuleContract> AdminUpdateFinancialInstitutionRuleAsync(int financialInstitutionRuleId, UpdateFinancialInstitutionRuleContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-instituion-rules/{financialInstitutionRuleId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<FinancialInstitutionRuleContract>(request);
        }
    }

    public interface IAdminFinancialInstitutionsClientByLicenseKeyApiMethods
    {
        List<AdminFinancialInstitutionContract> GetAllFinancialInstitutionsWithBetaTesters();

        Task<List<AdminFinancialInstitutionContract>> GetAllFinancialInstitutionsWithBetaTestersAsync();

        SearchResultContract<AdminFinancialInstitutionContract> SearchFinancialInstitutions(SearchFinancialInstitutionsContract searchContract);

        Task<SearchResultContract<AdminFinancialInstitutionContract>> SearchFinancialInstitutionsAsync(SearchFinancialInstitutionsContract searchContract);

        SearchResultContract<FinancialInstitutionBetaTesterContract> SearchBetaTesters(SearchBetaTestersContract searchContract);

        Task<SearchResultContract<FinancialInstitutionBetaTesterContract>> SearchBetaTestersAsync(SearchBetaTestersContract searchContract);

        AdminFinancialInstitutionContract CreateFinancialInstitution(CreateFinancialInstitutionContract createContract);

        Task<AdminFinancialInstitutionContract> CreateFinancialInstitutionAsync(CreateFinancialInstitutionContract createContract);

        AdminFinancialInstitutionContract EditFinancialInstitution(int financialInstitutionId, EditFinancialInstitutionContract editContract);

        Task<AdminFinancialInstitutionContract> EditFinancialInstitutionAsync(int financialInstitutionId, EditFinancialInstitutionContract editContract);

        AdminFinancialInstitutionContract AdminGetFinancialInstitution(int financialInstitutionId);

        Task<AdminFinancialInstitutionContract> AdminGetFinancialInstitutionAsync(int financialInstitutionId);

        AdminFinancialInstitutionContract AdminGetFinancialInstitutionByVendor(string vendorId, VendorTypes vendorType);

        Task<AdminFinancialInstitutionContract> AdminGetFinancialInstitutionByVendorAsync(string vendorId, VendorTypes vendorType);

        void AssignFinancialInstitutionBetaTesters(int financialInstitutionId, List<int> tradeSmithUserIds);

        Task AssignFinancialInstitutionBetaTestersAsync(int financialInstitutionId, List<int> tradeSmithUserIds);

        void DeleteAssignedFinancialInstitutionBetaTesters(int financialInstitutionId, List<int> tradeSmithUserIds);

        Task DeleteAssignedFinancialInstitutionBetaTestersAsync(int financialInstitutionId, List<int> tradeSmithUserIds);
    }

    public interface IAdminFinancialInstitutionsClientByContextKeyApiMethods : IAdminFinancialInstitutionsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminFinancialInstitutionsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminFinancialInstitutionsClient : IAdminFinancialInstitutionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminFinancialInstitutionsClient, IAdminFinancialInstitutionsClientForUser, IAdminFinancialInstitutionsClientForOrganization>
    {
    }

    public interface IAdminFinancialInstitutionsClientForUser : IAdminFinancialInstitutionsClientByContextKeyApiMethods, IClientByContext<IAdminFinancialInstitutionsClientForUser, IAdminFinancialInstitutionsClientForOrganization>
    {
    }

    public interface IAdminFinancialInstitutionsClientForOrganization : IAdminFinancialInstitutionsClientByOrganizationApiMethods
    {
    }

    public partial class AdminFinancialInstitutionsClient : BaseClient<IAdminFinancialInstitutionsClient, IAdminFinancialInstitutionsClientForUser, IAdminFinancialInstitutionsClientForOrganization, AdminFinancialInstitutionsClient>, IAdminFinancialInstitutionsClient, IAdminFinancialInstitutionsClientForUser, IAdminFinancialInstitutionsClientForOrganization
    {
        public List<AdminFinancialInstitutionContract> GetAllFinancialInstitutionsWithBetaTesters()
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/all-with-beta-testers",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<AdminFinancialInstitutionContract>>(request);
        }

        public async Task<List<AdminFinancialInstitutionContract>> GetAllFinancialInstitutionsWithBetaTestersAsync()
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/all-with-beta-testers",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<AdminFinancialInstitutionContract>>(request);
        }

        public SearchResultContract<AdminFinancialInstitutionContract> SearchFinancialInstitutions(SearchFinancialInstitutionsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/search-financial-institutions",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<AdminFinancialInstitutionContract>>(request);
        }

        public async Task<SearchResultContract<AdminFinancialInstitutionContract>> SearchFinancialInstitutionsAsync(SearchFinancialInstitutionsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/search-financial-institutions",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<AdminFinancialInstitutionContract>>(request);
        }

        public SearchResultContract<FinancialInstitutionBetaTesterContract> SearchBetaTesters(SearchBetaTestersContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/search-beta-testers",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<FinancialInstitutionBetaTesterContract>>(request);
        }

        public async Task<SearchResultContract<FinancialInstitutionBetaTesterContract>> SearchBetaTestersAsync(SearchBetaTestersContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/search-beta-testers",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<FinancialInstitutionBetaTesterContract>>(request);
        }

        public AdminFinancialInstitutionContract CreateFinancialInstitution(CreateFinancialInstitutionContract createContract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return PerformRequest<AdminFinancialInstitutionContract>(request);
        }

        public async Task<AdminFinancialInstitutionContract> CreateFinancialInstitutionAsync(CreateFinancialInstitutionContract createContract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return await PerformRequestAsync<AdminFinancialInstitutionContract>(request);
        }

        public AdminFinancialInstitutionContract EditFinancialInstitution(int financialInstitutionId, EditFinancialInstitutionContract editContract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/{financialInstitutionId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContract);

            return PerformRequest<AdminFinancialInstitutionContract>(request);
        }

        public async Task<AdminFinancialInstitutionContract> EditFinancialInstitutionAsync(int financialInstitutionId, EditFinancialInstitutionContract editContract)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/{financialInstitutionId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContract);

            return await PerformRequestAsync<AdminFinancialInstitutionContract>(request);
        }

        public AdminFinancialInstitutionContract AdminGetFinancialInstitution(int financialInstitutionId)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/{financialInstitutionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<AdminFinancialInstitutionContract>(request);
        }

        public async Task<AdminFinancialInstitutionContract> AdminGetFinancialInstitutionAsync(int financialInstitutionId)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/{financialInstitutionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<AdminFinancialInstitutionContract>(request);
        }

        public AdminFinancialInstitutionContract AdminGetFinancialInstitutionByVendor(string vendorId, VendorTypes vendorType)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/get-by-vendor/{vendorId}/{vendorType}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<AdminFinancialInstitutionContract>(request);
        }

        public async Task<AdminFinancialInstitutionContract> AdminGetFinancialInstitutionByVendorAsync(string vendorId, VendorTypes vendorType)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/get-by-vendor/{vendorId}/{vendorType}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<AdminFinancialInstitutionContract>(request);
        }

        public void AssignFinancialInstitutionBetaTesters(int financialInstitutionId, List<int> tradeSmithUserIds)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/assign-financial-institution-beta-testers/{financialInstitutionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(tradeSmithUserIds);

            PerformRequest(request);
        }

        public async Task AssignFinancialInstitutionBetaTestersAsync(int financialInstitutionId, List<int> tradeSmithUserIds)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/assign-financial-institution-beta-testers/{financialInstitutionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(tradeSmithUserIds);

            await PerformRequestAsync(request);
        }

        public void DeleteAssignedFinancialInstitutionBetaTesters(int financialInstitutionId, List<int> tradeSmithUserIds)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/delete-financial-institution-beta-testers/{financialInstitutionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(tradeSmithUserIds);

            PerformRequest(request);
        }

        public async Task DeleteAssignedFinancialInstitutionBetaTestersAsync(int financialInstitutionId, List<int> tradeSmithUserIds)
        {
            var request = new RequestData
            {
                Url = $"admin/financial-institutions/delete-financial-institution-beta-testers/{financialInstitutionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(tradeSmithUserIds);

            await PerformRequestAsync(request);
        }
    }

    public interface IAdminLoginTrackingClientByLicenseKeyApiMethods
    {
        void TrackUserVisit(int tradeSmithUserId, UserVisitContract contract);

        Task TrackUserVisitAsync(int tradeSmithUserId, UserVisitContract contract);

        /// <summary>
        /// Get information about last user visits into all products.
        /// If there were no user visit into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <param name="userId">ID of the user in TradeSmith database</param>
        /// <returns>List of user visits into all products.</returns>
        List<VisitDateByProductContract> GetAllLastUserVisits(int userId);

        /// <summary>
        /// Get information about last user visits into all products.
        /// If there were no user visit into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <param name="userId">ID of the user in TradeSmith database</param>
        /// <returns>List of user visits into all products.</returns>
        Task<List<VisitDateByProductContract>> GetAllLastUserVisitsAsync(int userId);

        void TrackLoginAttempt(LoginAttemptContract contract);

        Task TrackLoginAttemptAsync(LoginAttemptContract contract);

        DateTime? GetLastLoginDate(int tradeSmithUserId, Products productId);

        Task<DateTime?> GetLastLoginDateAsync(int tradeSmithUserId, Products productId);

        /// <summary>
        /// Get information about last successful login attempts into any existing product.
        /// If there were no successful login attempts then null will be returned.
        /// </summary>
        /// <param name="tradeSmithUserId">ID of the user in TradeSmith database</param>
        /// <returns>Login date with the corresponding product.</returns>
        LoginDateByProductContract GetLastLoginDate(int tradeSmithUserId);

        /// <summary>
        /// Get information about last successful login attempts into any existing product.
        /// If there were no successful login attempts then null will be returned.
        /// </summary>
        /// <param name="tradeSmithUserId">ID of the user in TradeSmith database</param>
        /// <returns>Login date with the corresponding product.</returns>
        Task<LoginDateByProductContract> GetLastLoginDateAsync(int tradeSmithUserId);

        /// <summary>
        /// Get information about last successful login attempts into all products.
        /// If there were no successful login attempts into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <param name="tradeSmithUserId">ID of the user in TradeSmith database</param>
        /// <returns>List of successful login attempts into all products.</returns>
        List<LoginDateByProductContract> GetAllSuccessfulLoginAttempts(int tradeSmithUserId);

        /// <summary>
        /// Get information about last successful login attempts into all products.
        /// If there were no successful login attempts into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <param name="tradeSmithUserId">ID of the user in TradeSmith database</param>
        /// <returns>List of successful login attempts into all products.</returns>
        Task<List<LoginDateByProductContract>> GetAllSuccessfulLoginAttemptsAsync(int tradeSmithUserId);
    }

    public interface IAdminLoginTrackingClientByContextKeyApiMethods : IAdminLoginTrackingClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminLoginTrackingClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminLoginTrackingClient : IAdminLoginTrackingClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminLoginTrackingClient, IAdminLoginTrackingClientForUser, IAdminLoginTrackingClientForOrganization>
    {
    }

    public interface IAdminLoginTrackingClientForUser : IAdminLoginTrackingClientByContextKeyApiMethods, IClientByContext<IAdminLoginTrackingClientForUser, IAdminLoginTrackingClientForOrganization>
    {
    }

    public interface IAdminLoginTrackingClientForOrganization : IAdminLoginTrackingClientByOrganizationApiMethods
    {
    }

    public partial class AdminLoginTrackingClient : BaseClient<IAdminLoginTrackingClient, IAdminLoginTrackingClientForUser, IAdminLoginTrackingClientForOrganization, AdminLoginTrackingClient>, IAdminLoginTrackingClient, IAdminLoginTrackingClientForUser, IAdminLoginTrackingClientForOrganization
    {
        public void TrackUserVisit(int tradeSmithUserId, UserVisitContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users/track-visit",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task TrackUserVisitAsync(int tradeSmithUserId, UserVisitContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users/track-visit",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get information about last user visits into all products.
        /// If there were no user visit into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <param name="userId">ID of the user in TradeSmith database</param>
        /// <returns>List of user visits into all products.</returns>
        public List<VisitDateByProductContract> GetAllLastUserVisits(int userId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/tradesmith-users/track-visit/all-last-user-visits",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<VisitDateByProductContract>>(request);
        }

        /// <summary>
        /// Get information about last user visits into all products.
        /// If there were no user visit into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <param name="userId">ID of the user in TradeSmith database</param>
        /// <returns>List of user visits into all products.</returns>
        public async Task<List<VisitDateByProductContract>> GetAllLastUserVisitsAsync(int userId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/tradesmith-users/track-visit/all-last-user-visits",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<VisitDateByProductContract>>(request);
        }

        public void TrackLoginAttempt(LoginAttemptContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/track-login",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task TrackLoginAttemptAsync(LoginAttemptContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/track-login",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public DateTime? GetLastLoginDate(int tradeSmithUserId, Products productId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users/last-login-date/{productId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<DateTime?>(request);
        }

        public async Task<DateTime?> GetLastLoginDateAsync(int tradeSmithUserId, Products productId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users/last-login-date/{productId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<DateTime?>(request);
        }

        /// <summary>
        /// Get information about last successful login attempts into any existing product.
        /// If there were no successful login attempts then null will be returned.
        /// </summary>
        /// <param name="tradeSmithUserId">ID of the user in TradeSmith database</param>
        /// <returns>Login date with the corresponding product.</returns>
        public LoginDateByProductContract GetLastLoginDate(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users/last-login-date/any-product",
                Method = HttpMethod.Get,
            };

            return PerformRequest<LoginDateByProductContract>(request);
        }

        /// <summary>
        /// Get information about last successful login attempts into any existing product.
        /// If there were no successful login attempts then null will be returned.
        /// </summary>
        /// <param name="tradeSmithUserId">ID of the user in TradeSmith database</param>
        /// <returns>Login date with the corresponding product.</returns>
        public async Task<LoginDateByProductContract> GetLastLoginDateAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users/last-login-date/any-product",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<LoginDateByProductContract>(request);
        }

        /// <summary>
        /// Get information about last successful login attempts into all products.
        /// If there were no successful login attempts into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <param name="tradeSmithUserId">ID of the user in TradeSmith database</param>
        /// <returns>List of successful login attempts into all products.</returns>
        public List<LoginDateByProductContract> GetAllSuccessfulLoginAttempts(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users/login-attempts/all-successful-last",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<LoginDateByProductContract>>(request);
        }

        /// <summary>
        /// Get information about last successful login attempts into all products.
        /// If there were no successful login attempts into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <param name="tradeSmithUserId">ID of the user in TradeSmith database</param>
        /// <returns>List of successful login attempts into all products.</returns>
        public async Task<List<LoginDateByProductContract>> GetAllSuccessfulLoginAttemptsAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users/login-attempts/all-successful-last",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<LoginDateByProductContract>>(request);
        }
    }

    public interface IAdminMobileDevicesClientByLicenseKeyApiMethods
    {
        List<PushNotificationTokenContract> GetPushNotificationTokensByUsers(List<int> tradeSmithUserIds);

        Task<List<PushNotificationTokenContract>> GetPushNotificationTokensByUsersAsync(List<int> tradeSmithUserIds);
    }

    public interface IAdminMobileDevicesClientByContextKeyApiMethods : IAdminMobileDevicesClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminMobileDevicesClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminMobileDevicesClient : IAdminMobileDevicesClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminMobileDevicesClient, IAdminMobileDevicesClientForUser, IAdminMobileDevicesClientForOrganization>
    {
    }

    public interface IAdminMobileDevicesClientForUser : IAdminMobileDevicesClientByContextKeyApiMethods, IClientByContext<IAdminMobileDevicesClientForUser, IAdminMobileDevicesClientForOrganization>
    {
    }

    public interface IAdminMobileDevicesClientForOrganization : IAdminMobileDevicesClientByOrganizationApiMethods
    {
    }

    public partial class AdminMobileDevicesClient : BaseClient<IAdminMobileDevicesClient, IAdminMobileDevicesClientForUser, IAdminMobileDevicesClientForOrganization, AdminMobileDevicesClient>, IAdminMobileDevicesClient, IAdminMobileDevicesClientForUser, IAdminMobileDevicesClientForOrganization
    {
        public List<PushNotificationTokenContract> GetPushNotificationTokensByUsers(List<int> tradeSmithUserIds)
        {
            var request = new RequestData
            {
                Url = $"mobile-devices/tokens/by-tradesmith-user-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(tradeSmithUserIds);

            return PerformRequest<List<PushNotificationTokenContract>>(request);
        }

        public async Task<List<PushNotificationTokenContract>> GetPushNotificationTokensByUsersAsync(List<int> tradeSmithUserIds)
        {
            var request = new RequestData
            {
                Url = $"mobile-devices/tokens/by-tradesmith-user-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(tradeSmithUserIds);

            return await PerformRequestAsync<List<PushNotificationTokenContract>>(request);
        }
    }

    public interface IAdminNewsletterSubscriptionsClientByLicenseKeyApiMethods
    {
        void SyncNewsletterSubscriptions(int tradeSmithUserId);

        Task SyncNewsletterSubscriptionsAsync(int tradeSmithUserId);

        List<RemoteSubscriptionItemContract> GetRemoteSubscriptionItemsByRemoteCustomerIds(NewslettersSubscriptionSources subscriptionSource, List<string> remoteCustomerIds);

        Task<List<RemoteSubscriptionItemContract>> GetRemoteSubscriptionItemsByRemoteCustomerIdsAsync(NewslettersSubscriptionSources subscriptionSource, List<string> remoteCustomerIds);

        List<RemoteSubscriptionItemContract> GetRemoteSubscriptionItemsByCredentials(NewslettersSubscriptionSources subscriptionSource, UserCredentialsContract contract);

        Task<List<RemoteSubscriptionItemContract>> GetRemoteSubscriptionItemsByCredentialsAsync(NewslettersSubscriptionSources subscriptionSource, UserCredentialsContract contract);

        List<RemoteSubscriptionItemContract> GetRemoteSubscriptionItems(int tradeSmithUserId, NewslettersSubscriptionSources subscriptionSource);

        Task<List<RemoteSubscriptionItemContract>> GetRemoteSubscriptionItemsAsync(int tradeSmithUserId, NewslettersSubscriptionSources subscriptionSource);

        List<NewsletterSubscriptionContract> GetAllNewsletterSubscriptions(int tradeSmithUserId);

        Task<List<NewsletterSubscriptionContract>> GetAllNewsletterSubscriptionsAsync(int tradeSmithUserId);

        AdditionalNewsletterAccountsContract GetAdditionalNewsletterAccounts(int tradeSmithUserId);

        Task<AdditionalNewsletterAccountsContract> GetAdditionalNewsletterAccountsAsync(int tradeSmithUserId);

        AdditionalNewsletterAccountsContract UpdateAdditionalNewslettersAccounts(int tradeSmithUserId, AdditionalNewsletterAccountsContract contract);

        Task<AdditionalNewsletterAccountsContract> UpdateAdditionalNewslettersAccountsAsync(int tradeSmithUserId, AdditionalNewsletterAccountsContract contract);
    }

    public interface IAdminNewsletterSubscriptionsClientByContextKeyApiMethods : IAdminNewsletterSubscriptionsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminNewsletterSubscriptionsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminNewsletterSubscriptionsClient : IAdminNewsletterSubscriptionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminNewsletterSubscriptionsClient, IAdminNewsletterSubscriptionsClientForUser, IAdminNewsletterSubscriptionsClientForOrganization>
    {
    }

    public interface IAdminNewsletterSubscriptionsClientForUser : IAdminNewsletterSubscriptionsClientByContextKeyApiMethods, IClientByContext<IAdminNewsletterSubscriptionsClientForUser, IAdminNewsletterSubscriptionsClientForOrganization>
    {
    }

    public interface IAdminNewsletterSubscriptionsClientForOrganization : IAdminNewsletterSubscriptionsClientByOrganizationApiMethods
    {
    }

    public partial class AdminNewsletterSubscriptionsClient : BaseClient<IAdminNewsletterSubscriptionsClient, IAdminNewsletterSubscriptionsClientForUser, IAdminNewsletterSubscriptionsClientForOrganization, AdminNewsletterSubscriptionsClient>, IAdminNewsletterSubscriptionsClient, IAdminNewsletterSubscriptionsClientForUser, IAdminNewsletterSubscriptionsClientForOrganization
    {
        public void SyncNewsletterSubscriptions(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/newsletter-subscriptions/synchronize",
                Method = HttpMethod.Post,
            };

            PerformRequest(request);
        }

        public async Task SyncNewsletterSubscriptionsAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/newsletter-subscriptions/synchronize",
                Method = HttpMethod.Post,
            };

            await PerformRequestAsync(request);
        }

        public List<RemoteSubscriptionItemContract> GetRemoteSubscriptionItemsByRemoteCustomerIds(NewslettersSubscriptionSources subscriptionSource, List<string> remoteCustomerIds)
        {
            var request = new RequestData
            {
                Url = $"admin/newsletter-subscriptions/{subscriptionSource}/",
                Method = HttpMethod.Post,
            };

            request.SetBody(remoteCustomerIds);

            return PerformRequest<List<RemoteSubscriptionItemContract>>(request);
        }

        public async Task<List<RemoteSubscriptionItemContract>> GetRemoteSubscriptionItemsByRemoteCustomerIdsAsync(NewslettersSubscriptionSources subscriptionSource, List<string> remoteCustomerIds)
        {
            var request = new RequestData
            {
                Url = $"admin/newsletter-subscriptions/{subscriptionSource}/",
                Method = HttpMethod.Post,
            };

            request.SetBody(remoteCustomerIds);

            return await PerformRequestAsync<List<RemoteSubscriptionItemContract>>(request);
        }

        public List<RemoteSubscriptionItemContract> GetRemoteSubscriptionItemsByCredentials(NewslettersSubscriptionSources subscriptionSource, UserCredentialsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/newsletter-subscriptions/{subscriptionSource}/by-credentials/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<RemoteSubscriptionItemContract>>(request);
        }

        public async Task<List<RemoteSubscriptionItemContract>> GetRemoteSubscriptionItemsByCredentialsAsync(NewslettersSubscriptionSources subscriptionSource, UserCredentialsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/newsletter-subscriptions/{subscriptionSource}/by-credentials/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<RemoteSubscriptionItemContract>>(request);
        }

        public List<RemoteSubscriptionItemContract> GetRemoteSubscriptionItems(int tradeSmithUserId, NewslettersSubscriptionSources subscriptionSource)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/newsletter-subscriptions/{subscriptionSource}/",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<RemoteSubscriptionItemContract>>(request);
        }

        public async Task<List<RemoteSubscriptionItemContract>> GetRemoteSubscriptionItemsAsync(int tradeSmithUserId, NewslettersSubscriptionSources subscriptionSource)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/newsletter-subscriptions/{subscriptionSource}/",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<RemoteSubscriptionItemContract>>(request);
        }

        public List<NewsletterSubscriptionContract> GetAllNewsletterSubscriptions(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/newsletter/user/subscriptions/all",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NewsletterSubscriptionContract>>(request);
        }

        public async Task<List<NewsletterSubscriptionContract>> GetAllNewsletterSubscriptionsAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/newsletter/user/subscriptions/all",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NewsletterSubscriptionContract>>(request);
        }

        public AdditionalNewsletterAccountsContract GetAdditionalNewsletterAccounts(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/get-additional-newsletter-accounts",
                Method = HttpMethod.Post,
            };

            return PerformRequest<AdditionalNewsletterAccountsContract>(request);
        }

        public async Task<AdditionalNewsletterAccountsContract> GetAdditionalNewsletterAccountsAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/get-additional-newsletter-accounts",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<AdditionalNewsletterAccountsContract>(request);
        }

        public AdditionalNewsletterAccountsContract UpdateAdditionalNewslettersAccounts(int tradeSmithUserId, AdditionalNewsletterAccountsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/update-additional-newsletter-accounts",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<AdditionalNewsletterAccountsContract>(request);
        }

        public async Task<AdditionalNewsletterAccountsContract> UpdateAdditionalNewslettersAccountsAsync(int tradeSmithUserId, AdditionalNewsletterAccountsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/update-additional-newsletter-accounts",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<AdditionalNewsletterAccountsContract>(request);
        }
    }

    public interface IAdminNotificationAddressesClientByLicenseKeyApiMethods
    {
        List<NotificationAddressContract> GetNotificationAddresses(int tradeSmithUserId);

        Task<List<NotificationAddressContract>> GetNotificationAddressesAsync(int tradeSmithUserId);
    }

    public interface IAdminNotificationAddressesClientByContextKeyApiMethods : IAdminNotificationAddressesClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminNotificationAddressesClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminNotificationAddressesClient : IAdminNotificationAddressesClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminNotificationAddressesClient, IAdminNotificationAddressesClientForUser, IAdminNotificationAddressesClientForOrganization>
    {
    }

    public interface IAdminNotificationAddressesClientForUser : IAdminNotificationAddressesClientByContextKeyApiMethods, IClientByContext<IAdminNotificationAddressesClientForUser, IAdminNotificationAddressesClientForOrganization>
    {
    }

    public interface IAdminNotificationAddressesClientForOrganization : IAdminNotificationAddressesClientByOrganizationApiMethods
    {
    }

    public partial class AdminNotificationAddressesClient : BaseClient<IAdminNotificationAddressesClient, IAdminNotificationAddressesClientForUser, IAdminNotificationAddressesClientForOrganization, AdminNotificationAddressesClient>, IAdminNotificationAddressesClient, IAdminNotificationAddressesClientForUser, IAdminNotificationAddressesClientForOrganization
    {
        public List<NotificationAddressContract> GetNotificationAddresses(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/notification-addresses",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NotificationAddressContract>>(request);
        }

        public async Task<List<NotificationAddressContract>> GetNotificationAddressesAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/notification-addresses",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NotificationAddressContract>>(request);
        }
    }

    public interface IAdminOptionScreenerClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Find options matching provided criterias. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Options screener parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        List<OptionsScreenerResultContract> GetOptionsScreenerResults(OptionsScreenerInputContract contract);

        /// <summary>
        /// Find options matching provided criterias. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Options screener parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        Task<List<OptionsScreenerResultContract>> GetOptionsScreenerResultsAsync(OptionsScreenerInputContract contract);
    }

    public interface IAdminOptionScreenerClientByContextKeyApiMethods : IAdminOptionScreenerClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminOptionScreenerClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminOptionScreenerClient : IAdminOptionScreenerClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminOptionScreenerClient, IAdminOptionScreenerClientForUser, IAdminOptionScreenerClientForOrganization>
    {
    }

    public interface IAdminOptionScreenerClientForUser : IAdminOptionScreenerClientByContextKeyApiMethods, IClientByContext<IAdminOptionScreenerClientForUser, IAdminOptionScreenerClientForOrganization>
    {
    }

    public interface IAdminOptionScreenerClientForOrganization : IAdminOptionScreenerClientByOrganizationApiMethods
    {
    }

    public partial class AdminOptionScreenerClient : BaseClient<IAdminOptionScreenerClient, IAdminOptionScreenerClientForUser, IAdminOptionScreenerClientForOrganization, AdminOptionScreenerClient>, IAdminOptionScreenerClient, IAdminOptionScreenerClientForUser, IAdminOptionScreenerClientForOrganization
    {
        /// <summary>
        /// Find options matching provided criterias. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Options screener parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        public List<OptionsScreenerResultContract> GetOptionsScreenerResults(OptionsScreenerInputContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin-trade-ideas/option-screener",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<OptionsScreenerResultContract>>(request);
        }

        /// <summary>
        /// Find options matching provided criterias. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Options screener parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        public async Task<List<OptionsScreenerResultContract>> GetOptionsScreenerResultsAsync(OptionsScreenerInputContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin-trade-ideas/option-screener",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<OptionsScreenerResultContract>>(request);
        }
    }

    public interface IAdminPortfolioLiteClientByLicenseKeyApiMethods
    {
        PortfolioLiteStyleContract GetPortfolioLiteStyle(int partnerId);

        Task<PortfolioLiteStyleContract> GetPortfolioLiteStyleAsync(int partnerId);
    }

    public interface IAdminPortfolioLiteClientByContextKeyApiMethods : IAdminPortfolioLiteClientByLicenseKeyApiMethods
    {
        List<PortfolioLitePartnerContract> GetAvailablePartners();

        Task<List<PortfolioLitePartnerContract>> GetAvailablePartnersAsync();

        PortfolioLiteStyleContract CreatePortfolioLiteStyle(PortfolioLiteStyleContract contract);

        Task<PortfolioLiteStyleContract> CreatePortfolioLiteStyleAsync(PortfolioLiteStyleContract contract);

        PortfolioLiteStyleContract UpdatePortfolioLiteStyle(UpdatePortfolioLiteStyleContract contract);

        Task<PortfolioLiteStyleContract> UpdatePortfolioLiteStyleAsync(UpdatePortfolioLiteStyleContract contract);

        void DeletePortfolioLiteStyle(int partnerId);

        Task DeletePortfolioLiteStyleAsync(int partnerId);
    }

    public interface IAdminPortfolioLiteClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminPortfolioLiteClient : IAdminPortfolioLiteClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminPortfolioLiteClient, IAdminPortfolioLiteClientForUser, IAdminPortfolioLiteClientForOrganization>
    {
    }

    public interface IAdminPortfolioLiteClientForUser : IAdminPortfolioLiteClientByContextKeyApiMethods, IClientByContext<IAdminPortfolioLiteClientForUser, IAdminPortfolioLiteClientForOrganization>
    {
    }

    public interface IAdminPortfolioLiteClientForOrganization : IAdminPortfolioLiteClientByOrganizationApiMethods
    {
    }

    public partial class AdminPortfolioLiteClient : BaseClient<IAdminPortfolioLiteClient, IAdminPortfolioLiteClientForUser, IAdminPortfolioLiteClientForOrganization, AdminPortfolioLiteClient>, IAdminPortfolioLiteClient, IAdminPortfolioLiteClientForUser, IAdminPortfolioLiteClientForOrganization
    {
        public List<PortfolioLitePartnerContract> GetAvailablePartners()
        {
            var request = new RequestData
            {
                Url = $"admin/portfolio-lite/get-available-partners",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioLitePartnerContract>>(request);
        }

        public async Task<List<PortfolioLitePartnerContract>> GetAvailablePartnersAsync()
        {
            var request = new RequestData
            {
                Url = $"admin/portfolio-lite/get-available-partners",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioLitePartnerContract>>(request);
        }

        public PortfolioLiteStyleContract GetPortfolioLiteStyle(int partnerId)
        {
            var request = new RequestData
            {
                Url = $"admin/portfolio-lite/get-portfolio-lite-style/{partnerId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PortfolioLiteStyleContract>(request);
        }

        public async Task<PortfolioLiteStyleContract> GetPortfolioLiteStyleAsync(int partnerId)
        {
            var request = new RequestData
            {
                Url = $"admin/portfolio-lite/get-portfolio-lite-style/{partnerId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PortfolioLiteStyleContract>(request);
        }

        public PortfolioLiteStyleContract CreatePortfolioLiteStyle(PortfolioLiteStyleContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/portfolio-lite/get-portfolio-lite-style",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PortfolioLiteStyleContract>(request);
        }

        public async Task<PortfolioLiteStyleContract> CreatePortfolioLiteStyleAsync(PortfolioLiteStyleContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/portfolio-lite/get-portfolio-lite-style",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PortfolioLiteStyleContract>(request);
        }

        public PortfolioLiteStyleContract UpdatePortfolioLiteStyle(UpdatePortfolioLiteStyleContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/portfolio-lite/update-portfolio-lite-style",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PortfolioLiteStyleContract>(request);
        }

        public async Task<PortfolioLiteStyleContract> UpdatePortfolioLiteStyleAsync(UpdatePortfolioLiteStyleContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/portfolio-lite/update-portfolio-lite-style",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PortfolioLiteStyleContract>(request);
        }

        public void DeletePortfolioLiteStyle(int partnerId)
        {
            var request = new RequestData
            {
                Url = $"admin/portfolio-lite/update-portfolio-lite-style/{partnerId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        public async Task DeletePortfolioLiteStyleAsync(int partnerId)
        {
            var request = new RequestData
            {
                Url = $"admin/portfolio-lite/update-portfolio-lite-style/{partnerId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }
    }

    public interface IAdminPortfoliosClientByLicenseKeyApiMethods
    {
        PortfolioContract AdminGetUserPortfolio(int userId, int portfolioId);

        Task<PortfolioContract> AdminGetUserPortfolioAsync(int userId, int portfolioId);

        List<PortfolioContract> AdminGetUserPortfolios(int userId, bool includeDelisted);

        Task<List<PortfolioContract>> AdminGetUserPortfoliosAsync(int userId, bool includeDelisted);

        PortfolioContract AdminCreatePortfolio(int userId, CreatePortfolioContract portfolio);

        Task<PortfolioContract> AdminCreatePortfolioAsync(int userId, CreatePortfolioContract portfolio);

        PortfolioContract AdminRestoreDeletedPortfolio(int userId, int portfolioId, bool restoreAlerts);

        Task<PortfolioContract> AdminRestoreDeletedPortfolioAsync(int userId, int portfolioId, bool restoreAlerts);

        PortfolioContract AdminConvertToManualPortfolio(int userId, int portfolioId);

        Task<PortfolioContract> AdminConvertToManualPortfolioAsync(int userId, int portfolioId);

        /// <summary>
        /// Search portfolios in admin area.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="searchContract">Params for search portfolios.</param>
        /// <returns>Portfolios found by provided criteria.</returns>
        SearchResultContract<AdminPortfolioContract> AdminSearchPortfolios(int userId, SearchPortfoliosContract searchContract);

        /// <summary>
        /// Search portfolios in admin area.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="searchContract">Params for search portfolios.</param>
        /// <returns>Portfolios found by provided criteria.</returns>
        Task<SearchResultContract<AdminPortfolioContract>> AdminSearchPortfoliosAsync(int userId, SearchPortfoliosContract searchContract);
    }

    public interface IAdminPortfoliosClientByContextKeyApiMethods : IAdminPortfoliosClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminPortfoliosClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminPortfoliosClient : IAdminPortfoliosClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminPortfoliosClient, IAdminPortfoliosClientForUser, IAdminPortfoliosClientForOrganization>
    {
    }

    public interface IAdminPortfoliosClientForUser : IAdminPortfoliosClientByContextKeyApiMethods, IClientByContext<IAdminPortfoliosClientForUser, IAdminPortfoliosClientForOrganization>
    {
    }

    public interface IAdminPortfoliosClientForOrganization : IAdminPortfoliosClientByOrganizationApiMethods
    {
    }

    public partial class AdminPortfoliosClient : BaseClient<IAdminPortfoliosClient, IAdminPortfoliosClientForUser, IAdminPortfoliosClientForOrganization, AdminPortfoliosClient>, IAdminPortfoliosClient, IAdminPortfoliosClientForUser, IAdminPortfoliosClientForOrganization
    {
        public PortfolioContract AdminGetUserPortfolio(int userId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PortfolioContract>(request);
        }

        public async Task<PortfolioContract> AdminGetUserPortfolioAsync(int userId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        public List<PortfolioContract> AdminGetUserPortfolios(int userId, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioContract>>(request);
        }

        public async Task<List<PortfolioContract>> AdminGetUserPortfoliosAsync(int userId, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioContract>>(request);
        }

        public PortfolioContract AdminCreatePortfolio(int userId, CreatePortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolio);

            return PerformRequest<PortfolioContract>(request);
        }

        public async Task<PortfolioContract> AdminCreatePortfolioAsync(int userId, CreatePortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolio);

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        public PortfolioContract AdminRestoreDeletedPortfolio(int userId, int portfolioId, bool restoreAlerts)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/restore/{portfolioId}/{restoreAlerts}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<PortfolioContract>(request);
        }

        public async Task<PortfolioContract> AdminRestoreDeletedPortfolioAsync(int userId, int portfolioId, bool restoreAlerts)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/restore/{portfolioId}/{restoreAlerts}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        public PortfolioContract AdminConvertToManualPortfolio(int userId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/convert/{portfolioId}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<PortfolioContract>(request);
        }

        public async Task<PortfolioContract> AdminConvertToManualPortfolioAsync(int userId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/convert/{portfolioId}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        /// <summary>
        /// Search portfolios in admin area.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="searchContract">Params for search portfolios.</param>
        /// <returns>Portfolios found by provided criteria.</returns>
        public SearchResultContract<AdminPortfolioContract> AdminSearchPortfolios(int userId, SearchPortfoliosContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/search-portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<AdminPortfolioContract>>(request);
        }

        /// <summary>
        /// Search portfolios in admin area.
        /// </summary>
        /// <param name="userId">User id.</param>
        /// <param name="searchContract">Params for search portfolios.</param>
        /// <returns>Portfolios found by provided criteria.</returns>
        public async Task<SearchResultContract<AdminPortfolioContract>> AdminSearchPortfoliosAsync(int userId, SearchPortfoliosContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/portfolios/search-portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<AdminPortfolioContract>>(request);
        }
    }

    public interface IAdminPositionsClientByLicenseKeyApiMethods
    {
        PositionContract CreatePosition(int userId, CreatePositionContract contraсt);

        Task<PositionContract> CreatePositionAsync(int userId, CreatePositionContract contraсt);

        List<PositionContract> AdminCreatePositions(int userId, List<CreatePositionContract> positions);

        Task<List<PositionContract>> AdminCreatePositionsAsync(int userId, List<CreatePositionContract> positions);

        List<PositionContract> AdminGetUserPositions(int userId, GetUserPositionsContract contract);

        Task<List<PositionContract>> AdminGetUserPositionsAsync(int userId, GetUserPositionsContract contract);

        List<PositionContract> AdminGetPortfolioPositions(int userId, int portfolioId, bool includeDelisted);

        Task<List<PositionContract>> AdminGetPortfolioPositionsAsync(int userId, int portfolioId, bool includeDelisted);

        PositionContract AdminRestoreDeletedPosition(int userId, int positionId, bool restoreAlerts);

        Task<PositionContract> AdminRestoreDeletedPositionAsync(int userId, int positionId, bool restoreAlerts);

        List<PositionContract> AdminRestoreDeletedPositions(int userId, List<int> positionIds, bool restoreAlerts);

        Task<List<PositionContract>> AdminRestoreDeletedPositionsAsync(int userId, List<int> positionIds, bool restoreAlerts);

        PositionContract AdminEditPosition(int userId, EditPositionContract position);

        Task<PositionContract> AdminEditPositionAsync(int userId, EditPositionContract position);

        List<PositionContract> AdminEditPositions(int userId, List<EditPositionContract> positions);

        Task<List<PositionContract>> AdminEditPositionsAsync(int userId, List<EditPositionContract> positions);

        PositionContract AdminGetPosition(int positionId);

        Task<PositionContract> AdminGetPositionAsync(int positionId);

        SearchResultContract<AdminPositionContract> AdminSearchPositions(int userId, int portfolioId, GridSearchContract searchContract);

        Task<SearchResultContract<AdminPositionContract>> AdminSearchPositionsAsync(int userId, int portfolioId, GridSearchContract searchContract);

        SearchResultContract<AdminPositionContract> AdminSearchPositions(int userId, int portfolioId, SearchPositionsContract searchContract);

        Task<SearchResultContract<AdminPositionContract>> AdminSearchPositionsAsync(int userId, int portfolioId, SearchPositionsContract searchContract);
    }

    public interface IAdminPositionsClientByContextKeyApiMethods : IAdminPositionsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminPositionsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminPositionsClient : IAdminPositionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminPositionsClient, IAdminPositionsClientForUser, IAdminPositionsClientForOrganization>
    {
    }

    public interface IAdminPositionsClientForUser : IAdminPositionsClientByContextKeyApiMethods, IClientByContext<IAdminPositionsClientForUser, IAdminPositionsClientForOrganization>
    {
    }

    public interface IAdminPositionsClientForOrganization : IAdminPositionsClientByOrganizationApiMethods
    {
    }

    public partial class AdminPositionsClient : BaseClient<IAdminPositionsClient, IAdminPositionsClientForUser, IAdminPositionsClientForOrganization, AdminPositionsClient>, IAdminPositionsClient, IAdminPositionsClientForUser, IAdminPositionsClientForOrganization
    {
        public PositionContract CreatePosition(int userId, CreatePositionContract contraсt)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contraсt);

            return PerformRequest<PositionContract>(request);
        }

        public async Task<PositionContract> CreatePositionAsync(int userId, CreatePositionContract contraсt)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contraсt);

            return await PerformRequestAsync<PositionContract>(request);
        }

        public List<PositionContract> AdminCreatePositions(int userId, List<CreatePositionContract> positions)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(positions);

            return PerformRequest<List<PositionContract>>(request);
        }

        public async Task<List<PositionContract>> AdminCreatePositionsAsync(int userId, List<CreatePositionContract> positions)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(positions);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        public List<PositionContract> AdminGetUserPositions(int userId, GetUserPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/get-by-user-portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PositionContract>>(request);
        }

        public async Task<List<PositionContract>> AdminGetUserPositionsAsync(int userId, GetUserPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/get-by-user-portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        public List<PositionContract> AdminGetPortfolioPositions(int userId, int portfolioId, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/portfolio/{portfolioId}/includeDelisted/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PositionContract>>(request);
        }

        public async Task<List<PositionContract>> AdminGetPortfolioPositionsAsync(int userId, int portfolioId, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/portfolio/{portfolioId}/includeDelisted/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        public PositionContract AdminRestoreDeletedPosition(int userId, int positionId, bool restoreAlerts)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/restore/{positionId}/{restoreAlerts}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<PositionContract>(request);
        }

        public async Task<PositionContract> AdminRestoreDeletedPositionAsync(int userId, int positionId, bool restoreAlerts)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/restore/{positionId}/{restoreAlerts}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<PositionContract>(request);
        }

        public List<PositionContract> AdminRestoreDeletedPositions(int userId, List<int> positionIds, bool restoreAlerts)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/bulk-restore/{restoreAlerts}",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return PerformRequest<List<PositionContract>>(request);
        }

        public async Task<List<PositionContract>> AdminRestoreDeletedPositionsAsync(int userId, List<int> positionIds, bool restoreAlerts)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/bulk-restore/{restoreAlerts}",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        public PositionContract AdminEditPosition(int userId, EditPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/edit",
                Method = HttpMethod.Post,
            };

            request.SetBody(position);

            return PerformRequest<PositionContract>(request);
        }

        public async Task<PositionContract> AdminEditPositionAsync(int userId, EditPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/edit",
                Method = HttpMethod.Post,
            };

            request.SetBody(position);

            return await PerformRequestAsync<PositionContract>(request);
        }

        public List<PositionContract> AdminEditPositions(int userId, List<EditPositionContract> positions)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/bulk-edit",
                Method = HttpMethod.Post,
            };

            request.SetBody(positions);

            return PerformRequest<List<PositionContract>>(request);
        }

        public async Task<List<PositionContract>> AdminEditPositionsAsync(int userId, List<EditPositionContract> positions)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/bulk-edit",
                Method = HttpMethod.Post,
            };

            request.SetBody(positions);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        public PositionContract AdminGetPosition(int positionId)
        {
            var request = new RequestData
            {
                Url = $"admin/positions/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PositionContract>(request);
        }

        public async Task<PositionContract> AdminGetPositionAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"admin/positions/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PositionContract>(request);
        }

        [Obsolete("Please use AdminSearchPositions method below.")]
        public SearchResultContract<AdminPositionContract> AdminSearchPositions(int userId, int portfolioId, GridSearchContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/search-positions-obsolete/{portfolioId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<AdminPositionContract>>(request);
        }

        [Obsolete("Please use AdminSearchPositions method below.")]
        public async Task<SearchResultContract<AdminPositionContract>> AdminSearchPositionsAsync(int userId, int portfolioId, GridSearchContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/search-positions-obsolete/{portfolioId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<AdminPositionContract>>(request);
        }

        public SearchResultContract<AdminPositionContract> AdminSearchPositions(int userId, int portfolioId, SearchPositionsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/search-positions/{portfolioId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<AdminPositionContract>>(request);
        }

        public async Task<SearchResultContract<AdminPositionContract>> AdminSearchPositionsAsync(int userId, int portfolioId, SearchPositionsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/positions/search-positions/{portfolioId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<AdminPositionContract>>(request);
        }
    }

    public interface IAdminPositionTriggersClientByLicenseKeyApiMethods
    {
        List<PositionTriggerContract> UpdateStartDateAndPriceFromPosition(int userId, int positionId);

        Task<List<PositionTriggerContract>> UpdateStartDateAndPriceFromPositionAsync(int userId, int positionId);

        Dictionary<int,List<PositionTriggerContract>> UpdateStartDateAndPriceFromPositions(int userId, List<int> positionIds);

        Task<Dictionary<int,List<PositionTriggerContract>>> UpdateStartDateAndPriceFromPositionsAsync(int userId, List<int> positionIds);

        void RecalculateTriggers(RecalculateTriggersContract contract);

        Task RecalculateTriggersAsync(RecalculateTriggersContract contract);

        List<int> GetActivePositionTriggerIdsBySymbolIdAndTriggerTypeId(int symbolId, TriggerTypes triggerTypeId);

        Task<List<int>> GetActivePositionTriggerIdsBySymbolIdAndTriggerTypeIdAsync(int symbolId, TriggerTypes triggerTypeId);

        List<int> GetActivePositionTriggersForPairTradeByTriggerTypeId(TriggerTypes triggerTypeId);

        Task<List<int>> GetActivePositionTriggersForPairTradeByTriggerTypeIdAsync(TriggerTypes triggerTypeId);
    }

    public interface IAdminPositionTriggersClientByContextKeyApiMethods : IAdminPositionTriggersClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminPositionTriggersClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminPositionTriggersClient : IAdminPositionTriggersClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminPositionTriggersClient, IAdminPositionTriggersClientForUser, IAdminPositionTriggersClientForOrganization>
    {
    }

    public interface IAdminPositionTriggersClientForUser : IAdminPositionTriggersClientByContextKeyApiMethods, IClientByContext<IAdminPositionTriggersClientForUser, IAdminPositionTriggersClientForOrganization>
    {
    }

    public interface IAdminPositionTriggersClientForOrganization : IAdminPositionTriggersClientByOrganizationApiMethods
    {
    }

    public partial class AdminPositionTriggersClient : BaseClient<IAdminPositionTriggersClient, IAdminPositionTriggersClientForUser, IAdminPositionTriggersClientForOrganization, AdminPositionTriggersClient>, IAdminPositionTriggersClient, IAdminPositionTriggersClientForUser, IAdminPositionTriggersClientForOrganization
    {
        public List<PositionTriggerContract> UpdateStartDateAndPriceFromPosition(int userId, int positionId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/position-triggers/update-start-date-and-price-from-position/{positionId}",
                Method = HttpMethod.Put,
            };

            return PerformRequest<List<PositionTriggerContract>>(request);
        }

        public async Task<List<PositionTriggerContract>> UpdateStartDateAndPriceFromPositionAsync(int userId, int positionId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/position-triggers/update-start-date-and-price-from-position/{positionId}",
                Method = HttpMethod.Put,
            };

            return await PerformRequestAsync<List<PositionTriggerContract>>(request);
        }

        public Dictionary<int,List<PositionTriggerContract>> UpdateStartDateAndPriceFromPositions(int userId, List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/position-triggers/update-start-date-and-price-from-positions",
                Method = HttpMethod.Put,
            };

            request.SetBody(positionIds);

            return PerformRequest<Dictionary<int,List<PositionTriggerContract>>>(request);
        }

        public async Task<Dictionary<int,List<PositionTriggerContract>>> UpdateStartDateAndPriceFromPositionsAsync(int userId, List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/position-triggers/update-start-date-and-price-from-positions",
                Method = HttpMethod.Put,
            };

            request.SetBody(positionIds);

            return await PerformRequestAsync<Dictionary<int,List<PositionTriggerContract>>>(request);
        }

        public void RecalculateTriggers(RecalculateTriggersContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/position-triggers/recalculate",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task RecalculateTriggersAsync(RecalculateTriggersContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/position-triggers/recalculate",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public List<int> GetActivePositionTriggerIdsBySymbolIdAndTriggerTypeId(int symbolId, TriggerTypes triggerTypeId)
        {
            var request = new RequestData
            {
                Url = $"admin/position-triggers/get-active-by-symbol-id/{symbolId}/{triggerTypeId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<int>>(request);
        }

        public async Task<List<int>> GetActivePositionTriggerIdsBySymbolIdAndTriggerTypeIdAsync(int symbolId, TriggerTypes triggerTypeId)
        {
            var request = new RequestData
            {
                Url = $"admin/position-triggers/get-active-by-symbol-id/{symbolId}/{triggerTypeId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<int>>(request);
        }

        public List<int> GetActivePositionTriggersForPairTradeByTriggerTypeId(TriggerTypes triggerTypeId)
        {
            var request = new RequestData
            {
                Url = $"admin/position-triggers/get-active-for-pair-trades/{triggerTypeId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<int>>(request);
        }

        public async Task<List<int>> GetActivePositionTriggersForPairTradeByTriggerTypeIdAsync(TriggerTypes triggerTypeId)
        {
            var request = new RequestData
            {
                Url = $"admin/position-triggers/get-active-for-pair-trades/{triggerTypeId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<int>>(request);
        }
    }

    public interface IAdminProductFeaturesClientByLicenseKeyApiMethods
    {
        AdminFeaturesContract GetAdminFeatures(int tradeSmithUserId);

        Task<AdminFeaturesContract> GetAdminFeaturesAsync(int tradeSmithUserId);

        ProductSubscriptionsFeaturesContract GetProductSubscriptionsFeatures(List<ProductSubscriptions> productSubscriptions);

        Task<ProductSubscriptionsFeaturesContract> GetProductSubscriptionsFeaturesAsync(List<ProductSubscriptions> productSubscriptions);

        UserFeaturesContract GetUserFeatures(int tradeSmithUserId);

        Task<UserFeaturesContract> GetUserFeaturesAsync(int tradeSmithUserId);

        UserFeaturesCustomizationContract GetUserFeaturesCustomization(int tradeSmithUserId);

        Task<UserFeaturesCustomizationContract> GetUserFeaturesCustomizationAsync(int tradeSmithUserId);

        void UpdateUserFeaturesCustomization(int tradeSmithUserId, UserFeaturesCustomizationContract contract);

        Task UpdateUserFeaturesCustomizationAsync(int tradeSmithUserId, UserFeaturesCustomizationContract contract);
    }

    public interface IAdminProductFeaturesClientByContextKeyApiMethods : IAdminProductFeaturesClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminProductFeaturesClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminProductFeaturesClient : IAdminProductFeaturesClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminProductFeaturesClient, IAdminProductFeaturesClientForUser, IAdminProductFeaturesClientForOrganization>
    {
    }

    public interface IAdminProductFeaturesClientForUser : IAdminProductFeaturesClientByContextKeyApiMethods, IClientByContext<IAdminProductFeaturesClientForUser, IAdminProductFeaturesClientForOrganization>
    {
    }

    public interface IAdminProductFeaturesClientForOrganization : IAdminProductFeaturesClientByOrganizationApiMethods
    {
    }

    public partial class AdminProductFeaturesClient : BaseClient<IAdminProductFeaturesClient, IAdminProductFeaturesClientForUser, IAdminProductFeaturesClientForOrganization, AdminProductFeaturesClient>, IAdminProductFeaturesClient, IAdminProductFeaturesClientForUser, IAdminProductFeaturesClientForOrganization
    {
        public AdminFeaturesContract GetAdminFeatures(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-products/admin-features",
                Method = HttpMethod.Get,
            };

            return PerformRequest<AdminFeaturesContract>(request);
        }

        public async Task<AdminFeaturesContract> GetAdminFeaturesAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-products/admin-features",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<AdminFeaturesContract>(request);
        }

        public ProductSubscriptionsFeaturesContract GetProductSubscriptionsFeatures(List<ProductSubscriptions> productSubscriptions)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-products/features/get-by-subscription-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(productSubscriptions);

            return PerformRequest<ProductSubscriptionsFeaturesContract>(request);
        }

        public async Task<ProductSubscriptionsFeaturesContract> GetProductSubscriptionsFeaturesAsync(List<ProductSubscriptions> productSubscriptions)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-products/features/get-by-subscription-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(productSubscriptions);

            return await PerformRequestAsync<ProductSubscriptionsFeaturesContract>(request);
        }

        public UserFeaturesContract GetUserFeatures(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-products/features",
                Method = HttpMethod.Get,
            };

            return PerformRequest<UserFeaturesContract>(request);
        }

        public async Task<UserFeaturesContract> GetUserFeaturesAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-products/features",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<UserFeaturesContract>(request);
        }

        public UserFeaturesCustomizationContract GetUserFeaturesCustomization(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-products/features/user-customization",
                Method = HttpMethod.Get,
            };

            return PerformRequest<UserFeaturesCustomizationContract>(request);
        }

        public async Task<UserFeaturesCustomizationContract> GetUserFeaturesCustomizationAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-products/features/user-customization",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<UserFeaturesCustomizationContract>(request);
        }

        public void UpdateUserFeaturesCustomization(int tradeSmithUserId, UserFeaturesCustomizationContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-products/features/user-customization",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task UpdateUserFeaturesCustomizationAsync(int tradeSmithUserId, UserFeaturesCustomizationContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-products/features/user-customization",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }
    }

    public interface IAdminPublicationsClientByLicenseKeyApiMethods
    {
        List<PublicationCategoryContract> GetAllPublicationCategories();

        Task<List<PublicationCategoryContract>> GetAllPublicationCategoriesAsync();

        PublicationContract GetPublication(int publicationId);

        Task<PublicationContract> GetPublicationAsync(int publicationId);

        PublicationContract CreatePublication(CreatePublicationContract contract);

        Task<PublicationContract> CreatePublicationAsync(CreatePublicationContract contract);

        void DeletePublication(int publicationId);

        Task DeletePublicationAsync(int publicationId);

        PublicationContract EditPublication(int publicationId, EditPublicationContract contract);

        Task<PublicationContract> EditPublicationAsync(int publicationId, EditPublicationContract contract);

        SearchResultContract<PublicationContract> SearchPublications(SearchPublicationsContract contract);

        Task<SearchResultContract<PublicationContract>> SearchPublicationsAsync(SearchPublicationsContract contract);

        PublicationReportContract GetPdfReport(int publicationId);

        Task<PublicationReportContract> GetPdfReportAsync(int publicationId);
    }

    public interface IAdminPublicationsClientByContextKeyApiMethods : IAdminPublicationsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminPublicationsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminPublicationsClient : IAdminPublicationsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminPublicationsClient, IAdminPublicationsClientForUser, IAdminPublicationsClientForOrganization>
    {
    }

    public interface IAdminPublicationsClientForUser : IAdminPublicationsClientByContextKeyApiMethods, IClientByContext<IAdminPublicationsClientForUser, IAdminPublicationsClientForOrganization>
    {
    }

    public interface IAdminPublicationsClientForOrganization : IAdminPublicationsClientByOrganizationApiMethods
    {
    }

    public partial class AdminPublicationsClient : BaseClient<IAdminPublicationsClient, IAdminPublicationsClientForUser, IAdminPublicationsClientForOrganization, AdminPublicationsClient>, IAdminPublicationsClient, IAdminPublicationsClientForUser, IAdminPublicationsClientForOrganization
    {
        public List<PublicationCategoryContract> GetAllPublicationCategories()
        {
            var request = new RequestData
            {
                Url = $"admin/publications/categories",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PublicationCategoryContract>>(request);
        }

        public async Task<List<PublicationCategoryContract>> GetAllPublicationCategoriesAsync()
        {
            var request = new RequestData
            {
                Url = $"admin/publications/categories",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PublicationCategoryContract>>(request);
        }

        public PublicationContract GetPublication(int publicationId)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/{publicationId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublicationContract>(request);
        }

        public async Task<PublicationContract> GetPublicationAsync(int publicationId)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/{publicationId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublicationContract>(request);
        }

        public PublicationContract CreatePublication(CreatePublicationContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublicationContract>(request);
        }

        public async Task<PublicationContract> CreatePublicationAsync(CreatePublicationContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublicationContract>(request);
        }

        public void DeletePublication(int publicationId)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/{publicationId}/delete",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        public async Task DeletePublicationAsync(int publicationId)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/{publicationId}/delete",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        public PublicationContract EditPublication(int publicationId, EditPublicationContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/{publicationId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublicationContract>(request);
        }

        public async Task<PublicationContract> EditPublicationAsync(int publicationId, EditPublicationContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/{publicationId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublicationContract>(request);
        }

        public SearchResultContract<PublicationContract> SearchPublications(SearchPublicationsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SearchResultContract<PublicationContract>>(request);
        }

        public async Task<SearchResultContract<PublicationContract>> SearchPublicationsAsync(SearchPublicationsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SearchResultContract<PublicationContract>>(request);
        }

        public PublicationReportContract GetPdfReport(int publicationId)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/{publicationId}/pdfreport",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublicationReportContract>(request);
        }

        public async Task<PublicationReportContract> GetPdfReportAsync(int publicationId)
        {
            var request = new RequestData
            {
                Url = $"admin/publications/{publicationId}/pdfreport",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublicationReportContract>(request);
        }
    }

    public interface IAdminReportsDraftsClientByLicenseKeyApiMethods
    {
        DraftReportHistoryContract CreateDraftReportHistory(CreateDraftReportHistoryContract contract);

        Task<DraftReportHistoryContract> CreateDraftReportHistoryAsync(CreateDraftReportHistoryContract contract);

        DraftReportHistoryContract GetDraftReportHistory(int draftReportHistoryId);

        Task<DraftReportHistoryContract> GetDraftReportHistoryAsync(int draftReportHistoryId);

        List<DraftReportHistoryContract> FindGetDraftReportsHistory(FindDraftReportsHistoryContract contract);

        Task<List<DraftReportHistoryContract>> FindGetDraftReportsHistoryAsync(FindDraftReportsHistoryContract contract);

        void UpdateDraftReportHistory(UpdateDraftReportHistoryContract contract);

        Task UpdateDraftReportHistoryAsync(UpdateDraftReportHistoryContract contract);

        List<BestTradeOpportunitiesSymbolContract> GetBestTradeOpportunitiesSymbols(int draftReportHistoryId);

        Task<List<BestTradeOpportunitiesSymbolContract>> GetBestTradeOpportunitiesSymbolsAsync(int draftReportHistoryId);

        void CreateBestTradeOpportunitiesSymbols(BulkCreateBestTradeOpportunitiesSymbolsContract contract);

        Task CreateBestTradeOpportunitiesSymbolsAsync(BulkCreateBestTradeOpportunitiesSymbolsContract contract);

        void UpdateBestTradeOpportunitiesSymbols(List<UpdateBestTradeOpportunitiesSymbolContract> contracts);

        Task UpdateBestTradeOpportunitiesSymbolsAsync(List<UpdateBestTradeOpportunitiesSymbolContract> contracts);

        void DeleteBestTradeOpportunitiesSymbols(List<int> bestTradeOpportunitiesSymbolIds);

        Task DeleteBestTradeOpportunitiesSymbolsAsync(List<int> bestTradeOpportunitiesSymbolIds);

        List<MonthlyOpportunitiesSymbolContract> GetMonthlyOpportunitiesSymbols(int draftReportHistoryId);

        Task<List<MonthlyOpportunitiesSymbolContract>> GetMonthlyOpportunitiesSymbolsAsync(int draftReportHistoryId);

        void CreateMonthlyOpportunitiesSymbols(BulkCreateMonthlyOpportunitiesSymbolsContract contract);

        Task CreateMonthlyOpportunitiesSymbolsAsync(BulkCreateMonthlyOpportunitiesSymbolsContract contract);

        void UpdateMonthlyOpportunitiesSymbols(List<UpdateMonthlyOpportunitiesSymbolContract> contracts);

        Task UpdateMonthlyOpportunitiesSymbolsAsync(List<UpdateMonthlyOpportunitiesSymbolContract> contracts);

        void DeleteMonthlyOpportunitiesSymbols(List<int> monthlyOpportunitiesSymbolIds);

        Task DeleteMonthlyOpportunitiesSymbolsAsync(List<int> monthlyOpportunitiesSymbolIds);
    }

    public interface IAdminReportsDraftsClientByContextKeyApiMethods : IAdminReportsDraftsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminReportsDraftsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminReportsDraftsClient : IAdminReportsDraftsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminReportsDraftsClient, IAdminReportsDraftsClientForUser, IAdminReportsDraftsClientForOrganization>
    {
    }

    public interface IAdminReportsDraftsClientForUser : IAdminReportsDraftsClientByContextKeyApiMethods, IClientByContext<IAdminReportsDraftsClientForUser, IAdminReportsDraftsClientForOrganization>
    {
    }

    public interface IAdminReportsDraftsClientForOrganization : IAdminReportsDraftsClientByOrganizationApiMethods
    {
    }

    public partial class AdminReportsDraftsClient : BaseClient<IAdminReportsDraftsClient, IAdminReportsDraftsClientForUser, IAdminReportsDraftsClientForOrganization, AdminReportsDraftsClient>, IAdminReportsDraftsClient, IAdminReportsDraftsClientForUser, IAdminReportsDraftsClientForOrganization
    {
        public DraftReportHistoryContract CreateDraftReportHistory(CreateDraftReportHistoryContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/create-draft-report-history",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<DraftReportHistoryContract>(request);
        }

        public async Task<DraftReportHistoryContract> CreateDraftReportHistoryAsync(CreateDraftReportHistoryContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/create-draft-report-history",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<DraftReportHistoryContract>(request);
        }

        public DraftReportHistoryContract GetDraftReportHistory(int draftReportHistoryId)
        {
            var request = new RequestData
            {
                Url = $"admin/get-draft-report-history/{draftReportHistoryId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<DraftReportHistoryContract>(request);
        }

        public async Task<DraftReportHistoryContract> GetDraftReportHistoryAsync(int draftReportHistoryId)
        {
            var request = new RequestData
            {
                Url = $"admin/get-draft-report-history/{draftReportHistoryId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<DraftReportHistoryContract>(request);
        }

        public List<DraftReportHistoryContract> FindGetDraftReportsHistory(FindDraftReportsHistoryContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/find-draft-report-history",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<DraftReportHistoryContract>>(request);
        }

        public async Task<List<DraftReportHistoryContract>> FindGetDraftReportsHistoryAsync(FindDraftReportsHistoryContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/find-draft-report-history",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<DraftReportHistoryContract>>(request);
        }

        public void UpdateDraftReportHistory(UpdateDraftReportHistoryContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/update-draft-report-history",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task UpdateDraftReportHistoryAsync(UpdateDraftReportHistoryContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/update-draft-report-history",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public List<BestTradeOpportunitiesSymbolContract> GetBestTradeOpportunitiesSymbols(int draftReportHistoryId)
        {
            var request = new RequestData
            {
                Url = $"admin/get-best-trade-opportunities-symbols/{draftReportHistoryId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<BestTradeOpportunitiesSymbolContract>>(request);
        }

        public async Task<List<BestTradeOpportunitiesSymbolContract>> GetBestTradeOpportunitiesSymbolsAsync(int draftReportHistoryId)
        {
            var request = new RequestData
            {
                Url = $"admin/get-best-trade-opportunities-symbols/{draftReportHistoryId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<BestTradeOpportunitiesSymbolContract>>(request);
        }

        public void CreateBestTradeOpportunitiesSymbols(BulkCreateBestTradeOpportunitiesSymbolsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/create-best-trade-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task CreateBestTradeOpportunitiesSymbolsAsync(BulkCreateBestTradeOpportunitiesSymbolsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/create-best-trade-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public void UpdateBestTradeOpportunitiesSymbols(List<UpdateBestTradeOpportunitiesSymbolContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"admin/update-best-trade-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            PerformRequest(request);
        }

        public async Task UpdateBestTradeOpportunitiesSymbolsAsync(List<UpdateBestTradeOpportunitiesSymbolContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"admin/update-best-trade-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            await PerformRequestAsync(request);
        }

        public void DeleteBestTradeOpportunitiesSymbols(List<int> bestTradeOpportunitiesSymbolIds)
        {
            var request = new RequestData
            {
                Url = $"admin/delete-best-trade-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(bestTradeOpportunitiesSymbolIds);

            PerformRequest(request);
        }

        public async Task DeleteBestTradeOpportunitiesSymbolsAsync(List<int> bestTradeOpportunitiesSymbolIds)
        {
            var request = new RequestData
            {
                Url = $"admin/delete-best-trade-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(bestTradeOpportunitiesSymbolIds);

            await PerformRequestAsync(request);
        }

        public List<MonthlyOpportunitiesSymbolContract> GetMonthlyOpportunitiesSymbols(int draftReportHistoryId)
        {
            var request = new RequestData
            {
                Url = $"admin/get-monthly-opportunities-symbols/{draftReportHistoryId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<MonthlyOpportunitiesSymbolContract>>(request);
        }

        public async Task<List<MonthlyOpportunitiesSymbolContract>> GetMonthlyOpportunitiesSymbolsAsync(int draftReportHistoryId)
        {
            var request = new RequestData
            {
                Url = $"admin/get-monthly-opportunities-symbols/{draftReportHistoryId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<MonthlyOpportunitiesSymbolContract>>(request);
        }

        public void CreateMonthlyOpportunitiesSymbols(BulkCreateMonthlyOpportunitiesSymbolsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/create-monthly-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task CreateMonthlyOpportunitiesSymbolsAsync(BulkCreateMonthlyOpportunitiesSymbolsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/create-monthly-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public void UpdateMonthlyOpportunitiesSymbols(List<UpdateMonthlyOpportunitiesSymbolContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"admin/update-monthly-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            PerformRequest(request);
        }

        public async Task UpdateMonthlyOpportunitiesSymbolsAsync(List<UpdateMonthlyOpportunitiesSymbolContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"admin/update-monthly-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            await PerformRequestAsync(request);
        }

        public void DeleteMonthlyOpportunitiesSymbols(List<int> monthlyOpportunitiesSymbolIds)
        {
            var request = new RequestData
            {
                Url = $"admin/delete-monthly-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(monthlyOpportunitiesSymbolIds);

            PerformRequest(request);
        }

        public async Task DeleteMonthlyOpportunitiesSymbolsAsync(List<int> monthlyOpportunitiesSymbolIds)
        {
            var request = new RequestData
            {
                Url = $"admin/delete-monthly-opportunities-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(monthlyOpportunitiesSymbolIds);

            await PerformRequestAsync(request);
        }
    }

    public interface IAdminResearchClientByLicenseKeyApiMethods
    {
        PairTradeVqValueContract AdminGetLatestPairTradeVq(int positionId, DateTime tradeDate);

        Task<PairTradeVqValueContract> AdminGetLatestPairTradeVqAsync(int positionId, DateTime tradeDate);

        PairTradeVqValueContract AdminGetFirstPairTradeVq(int positionId);

        Task<PairTradeVqValueContract> AdminGetFirstPairTradeVqAsync(int positionId);

        List<QuantToolResultPositionContract> QuantTool(QuantToolInputContract input);

        Task<List<QuantToolResultPositionContract>> QuantToolAsync(QuantToolInputContract input);
    }

    public interface IAdminResearchClientByContextKeyApiMethods : IAdminResearchClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminResearchClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminResearchClient : IAdminResearchClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminResearchClient, IAdminResearchClientForUser, IAdminResearchClientForOrganization>
    {
    }

    public interface IAdminResearchClientForUser : IAdminResearchClientByContextKeyApiMethods, IClientByContext<IAdminResearchClientForUser, IAdminResearchClientForOrganization>
    {
    }

    public interface IAdminResearchClientForOrganization : IAdminResearchClientByOrganizationApiMethods
    {
    }

    public partial class AdminResearchClient : BaseClient<IAdminResearchClient, IAdminResearchClientForUser, IAdminResearchClientForOrganization, AdminResearchClient>, IAdminResearchClient, IAdminResearchClientForUser, IAdminResearchClientForOrganization
    {
        public PairTradeVqValueContract AdminGetLatestPairTradeVq(int positionId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"admin/research/pair-trade-latest-vq/{positionId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PairTradeVqValueContract>(request);
        }

        public async Task<PairTradeVqValueContract> AdminGetLatestPairTradeVqAsync(int positionId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"admin/research/pair-trade-latest-vq/{positionId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PairTradeVqValueContract>(request);
        }

        public PairTradeVqValueContract AdminGetFirstPairTradeVq(int positionId)
        {
            var request = new RequestData
            {
                Url = $"admin/research/pair-trade-first-vq/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PairTradeVqValueContract>(request);
        }

        public async Task<PairTradeVqValueContract> AdminGetFirstPairTradeVqAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"admin/research/pair-trade-first-vq/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PairTradeVqValueContract>(request);
        }

        public List<QuantToolResultPositionContract> QuantTool(QuantToolInputContract input)
        {
            var request = new RequestData
            {
                Url = $"admin/research/quant-tool",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<List<QuantToolResultPositionContract>>(request);
        }

        public async Task<List<QuantToolResultPositionContract>> QuantToolAsync(QuantToolInputContract input)
        {
            var request = new RequestData
            {
                Url = $"admin/research/quant-tool",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<List<QuantToolResultPositionContract>>(request);
        }
    }

    public interface IAdminSyncPositionsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create a synchronized position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="tradeSmithUserId">TradeSmith user ID of a user who owns the position to create.</param>
        /// <param name="userId">ID of a user who owns the position to create.</param>
        /// <param name="position">Create synchronized position contract.</param>
        /// <returns>The method returns contract for newly created position.</returns>
        PositionContract AdminCreateSyncPosition(int tradeSmithUserId, int userId, CreateSyncPositionContract position);

        /// <summary>
        /// Create a synchronized position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="tradeSmithUserId">TradeSmith user ID of a user who owns the position to create.</param>
        /// <param name="userId">ID of a user who owns the position to create.</param>
        /// <param name="position">Create synchronized position contract.</param>
        /// <returns>The method returns contract for newly created position.</returns>
        Task<PositionContract> AdminCreateSyncPositionAsync(int tradeSmithUserId, int userId, CreateSyncPositionContract position);
    }

    public interface IAdminSyncPositionsClientByContextKeyApiMethods : IAdminSyncPositionsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminSyncPositionsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminSyncPositionsClient : IAdminSyncPositionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminSyncPositionsClient, IAdminSyncPositionsClientForUser, IAdminSyncPositionsClientForOrganization>
    {
    }

    public interface IAdminSyncPositionsClientForUser : IAdminSyncPositionsClientByContextKeyApiMethods, IClientByContext<IAdminSyncPositionsClientForUser, IAdminSyncPositionsClientForOrganization>
    {
    }

    public interface IAdminSyncPositionsClientForOrganization : IAdminSyncPositionsClientByOrganizationApiMethods
    {
    }

    public partial class AdminSyncPositionsClient : BaseClient<IAdminSyncPositionsClient, IAdminSyncPositionsClientForUser, IAdminSyncPositionsClientForOrganization, AdminSyncPositionsClient>, IAdminSyncPositionsClient, IAdminSyncPositionsClientForUser, IAdminSyncPositionsClientForOrganization
    {
        /// <summary>
        /// Create a synchronized position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="tradeSmithUserId">TradeSmith user ID of a user who owns the position to create.</param>
        /// <param name="userId">ID of a user who owns the position to create.</param>
        /// <param name="position">Create synchronized position contract.</param>
        /// <returns>The method returns contract for newly created position.</returns>
        public PositionContract AdminCreateSyncPosition(int tradeSmithUserId, int userId, CreateSyncPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/{userId}/sync-positions/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(position);

            return PerformRequest<PositionContract>(request);
        }

        /// <summary>
        /// Create a synchronized position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="tradeSmithUserId">TradeSmith user ID of a user who owns the position to create.</param>
        /// <param name="userId">ID of a user who owns the position to create.</param>
        /// <param name="position">Create synchronized position contract.</param>
        /// <returns>The method returns contract for newly created position.</returns>
        public async Task<PositionContract> AdminCreateSyncPositionAsync(int tradeSmithUserId, int userId, CreateSyncPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/{userId}/sync-positions/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(position);

            return await PerformRequestAsync<PositionContract>(request);
        }
    }

    public interface IAdminSyncReportsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get general statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to get general statistics.</param>
        /// <returns>The method returns contract with information about general statistics for sync reports.</returns>
        SyncReportsGeneralStatisticsResultContract AdminGetGeneralStatistics(GetSyncReportsGeneralStatisticsContract contract);

        /// <summary>
        /// Get general statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to get general statistics.</param>
        /// <returns>The method returns contract with information about general statistics for sync reports.</returns>
        Task<SyncReportsGeneralStatisticsResultContract> AdminGetGeneralStatisticsAsync(GetSyncReportsGeneralStatisticsContract contract);

        /// <summary>
        /// Search brokers statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to search brokers statistics.</param>
        /// <returns>The method returns contract with information about brokers statistics for sync reports.</returns>
        SearchResultContract<AdminSyncReportsBrokerStatisticsContract> AdminSearchBrokersStatistics(SearchSyncReportsBrokersStatisticsContract contract);

        /// <summary>
        /// Search brokers statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to search brokers statistics.</param>
        /// <returns>The method returns contract with information about brokers statistics for sync reports.</returns>
        Task<SearchResultContract<AdminSyncReportsBrokerStatisticsContract>> AdminSearchBrokersStatisticsAsync(SearchSyncReportsBrokersStatisticsContract contract);

        /// <summary>
        /// Search errors statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to search errors statistics.</param>
        /// <returns>The method returns contract with information about errors statistics and brokers to filter for sync reports.</returns>
        SearchResultWithAdditionalInfoContract<AdminSyncReportsErrorStatisticsContract,List<string>> AdminSearchErrorsStatistics(SearchSyncReportsErrorsStatisticsContract contract);

        /// <summary>
        /// Search errors statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to search errors statistics.</param>
        /// <returns>The method returns contract with information about errors statistics and brokers to filter for sync reports.</returns>
        Task<SearchResultWithAdditionalInfoContract<AdminSyncReportsErrorStatisticsContract,List<string>>> AdminSearchErrorsStatisticsAsync(SearchSyncReportsErrorsStatisticsContract contract);

        SearchResultWithAdditionalInfoContract<AdminSyncReportsAccountStatisticsContract,List<string>> AdminSearchAccountsStatistics(SearchSyncReportsAccountsStatisticsContract searchContract);

        Task<SearchResultWithAdditionalInfoContract<AdminSyncReportsAccountStatisticsContract,List<string>>> AdminSearchAccountsStatisticsAsync(SearchSyncReportsAccountsStatisticsContract searchContract);

        SearchResultContract<VendorPortfolioLogContract> AdminSearchPortfoliosStatistics(SearchSyncReportsPortfoliosStatisticsContract searchContract);

        Task<SearchResultContract<VendorPortfolioLogContract>> AdminSearchPortfoliosStatisticsAsync(SearchSyncReportsPortfoliosStatisticsContract searchContract);

        SearchResultWithAdditionalInfoContract<IncompleteOptionLogContract,List<string>> AdminSearchIncompleteOptions(SearchIncompleteOptionsContract searchContract);

        Task<SearchResultWithAdditionalInfoContract<IncompleteOptionLogContract,List<string>>> AdminSearchIncompleteOptionsAsync(SearchIncompleteOptionsContract searchContract);

        /// <summary>
        /// Get filtered and sorted information about vendor system errors and financial institutions.
        /// It's allowed to sort and to filter vendor system errors by date, financial institution name and key words.
        /// </summary>
        /// <param name="contract">Necessary parameters to get list of errors</param>
        /// <returns>The method returns contract with information about vendor system errors and financial institution.</returns>
        SearchResultWithAdditionalInfoContract<VendorSystemErrorContract,List<string>> AdminSearchVendorSystemErrors(SearchVendorSystemErrorsContract contract);

        /// <summary>
        /// Get filtered and sorted information about vendor system errors and financial institutions.
        /// It's allowed to sort and to filter vendor system errors by date, financial institution name and key words.
        /// </summary>
        /// <param name="contract">Necessary parameters to get list of errors</param>
        /// <returns>The method returns contract with information about vendor system errors and financial institution.</returns>
        Task<SearchResultWithAdditionalInfoContract<VendorSystemErrorContract,List<string>>> AdminSearchVendorSystemErrorsAsync(SearchVendorSystemErrorsContract contract);

        /// <summary>
        /// Initiates sync vendor account task in admin area.
        /// </summary>
        /// <param name="userId">User ID.</param>
        /// <param name="contract">Initiate sync vendor account task contract.</param>
        /// <returns>The method returns ID of initiated sync vendor account task.</returns>
        int AdminGetInitiatedSyncVendorAccountTaskId(int userId, InitiateSyncVendorAccountTaskContract contract);

        /// <summary>
        /// Initiates sync vendor account task in admin area.
        /// </summary>
        /// <param name="userId">User ID.</param>
        /// <param name="contract">Initiate sync vendor account task contract.</param>
        /// <returns>The method returns ID of initiated sync vendor account task.</returns>
        Task<int> AdminGetInitiatedSyncVendorAccountTaskIdAsync(int userId, InitiateSyncVendorAccountTaskContract contract);
    }

    public interface IAdminSyncReportsClientByContextKeyApiMethods : IAdminSyncReportsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminSyncReportsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminSyncReportsClient : IAdminSyncReportsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminSyncReportsClient, IAdminSyncReportsClientForUser, IAdminSyncReportsClientForOrganization>
    {
    }

    public interface IAdminSyncReportsClientForUser : IAdminSyncReportsClientByContextKeyApiMethods, IClientByContext<IAdminSyncReportsClientForUser, IAdminSyncReportsClientForOrganization>
    {
    }

    public interface IAdminSyncReportsClientForOrganization : IAdminSyncReportsClientByOrganizationApiMethods
    {
    }

    public partial class AdminSyncReportsClient : BaseClient<IAdminSyncReportsClient, IAdminSyncReportsClientForUser, IAdminSyncReportsClientForOrganization, AdminSyncReportsClient>, IAdminSyncReportsClient, IAdminSyncReportsClientForUser, IAdminSyncReportsClientForOrganization
    {
        /// <summary>
        /// Get general statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to get general statistics.</param>
        /// <returns>The method returns contract with information about general statistics for sync reports.</returns>
        public SyncReportsGeneralStatisticsResultContract AdminGetGeneralStatistics(GetSyncReportsGeneralStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/get-general-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SyncReportsGeneralStatisticsResultContract>(request);
        }

        /// <summary>
        /// Get general statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to get general statistics.</param>
        /// <returns>The method returns contract with information about general statistics for sync reports.</returns>
        public async Task<SyncReportsGeneralStatisticsResultContract> AdminGetGeneralStatisticsAsync(GetSyncReportsGeneralStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/get-general-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SyncReportsGeneralStatisticsResultContract>(request);
        }

        /// <summary>
        /// Search brokers statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to search brokers statistics.</param>
        /// <returns>The method returns contract with information about brokers statistics for sync reports.</returns>
        public SearchResultContract<AdminSyncReportsBrokerStatisticsContract> AdminSearchBrokersStatistics(SearchSyncReportsBrokersStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-brokers-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SearchResultContract<AdminSyncReportsBrokerStatisticsContract>>(request);
        }

        /// <summary>
        /// Search brokers statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to search brokers statistics.</param>
        /// <returns>The method returns contract with information about brokers statistics for sync reports.</returns>
        public async Task<SearchResultContract<AdminSyncReportsBrokerStatisticsContract>> AdminSearchBrokersStatisticsAsync(SearchSyncReportsBrokersStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-brokers-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SearchResultContract<AdminSyncReportsBrokerStatisticsContract>>(request);
        }

        /// <summary>
        /// Search errors statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to search errors statistics.</param>
        /// <returns>The method returns contract with information about errors statistics and brokers to filter for sync reports.</returns>
        public SearchResultWithAdditionalInfoContract<AdminSyncReportsErrorStatisticsContract,List<string>> AdminSearchErrorsStatistics(SearchSyncReportsErrorsStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-errors-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SearchResultWithAdditionalInfoContract<AdminSyncReportsErrorStatisticsContract,List<string>>>(request);
        }

        /// <summary>
        /// Search errors statistics for sync reports.
        /// </summary>
        /// <param name="contract">Necessary parameters to search errors statistics.</param>
        /// <returns>The method returns contract with information about errors statistics and brokers to filter for sync reports.</returns>
        public async Task<SearchResultWithAdditionalInfoContract<AdminSyncReportsErrorStatisticsContract,List<string>>> AdminSearchErrorsStatisticsAsync(SearchSyncReportsErrorsStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-errors-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SearchResultWithAdditionalInfoContract<AdminSyncReportsErrorStatisticsContract,List<string>>>(request);
        }

        public SearchResultWithAdditionalInfoContract<AdminSyncReportsAccountStatisticsContract,List<string>> AdminSearchAccountsStatistics(SearchSyncReportsAccountsStatisticsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-accounts-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultWithAdditionalInfoContract<AdminSyncReportsAccountStatisticsContract,List<string>>>(request);
        }

        public async Task<SearchResultWithAdditionalInfoContract<AdminSyncReportsAccountStatisticsContract,List<string>>> AdminSearchAccountsStatisticsAsync(SearchSyncReportsAccountsStatisticsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-accounts-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultWithAdditionalInfoContract<AdminSyncReportsAccountStatisticsContract,List<string>>>(request);
        }

        public SearchResultContract<VendorPortfolioLogContract> AdminSearchPortfoliosStatistics(SearchSyncReportsPortfoliosStatisticsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-portfolios-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<VendorPortfolioLogContract>>(request);
        }

        public async Task<SearchResultContract<VendorPortfolioLogContract>> AdminSearchPortfoliosStatisticsAsync(SearchSyncReportsPortfoliosStatisticsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-portfolios-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<VendorPortfolioLogContract>>(request);
        }

        public SearchResultWithAdditionalInfoContract<IncompleteOptionLogContract,List<string>> AdminSearchIncompleteOptions(SearchIncompleteOptionsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-incomplete-options",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultWithAdditionalInfoContract<IncompleteOptionLogContract,List<string>>>(request);
        }

        public async Task<SearchResultWithAdditionalInfoContract<IncompleteOptionLogContract,List<string>>> AdminSearchIncompleteOptionsAsync(SearchIncompleteOptionsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-incomplete-options",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultWithAdditionalInfoContract<IncompleteOptionLogContract,List<string>>>(request);
        }

        /// <summary>
        /// Get filtered and sorted information about vendor system errors and financial institutions.
        /// It's allowed to sort and to filter vendor system errors by date, financial institution name and key words.
        /// </summary>
        /// <param name="contract">Necessary parameters to get list of errors</param>
        /// <returns>The method returns contract with information about vendor system errors and financial institution.</returns>
        public SearchResultWithAdditionalInfoContract<VendorSystemErrorContract,List<string>> AdminSearchVendorSystemErrors(SearchVendorSystemErrorsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-vendor-system-errors",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SearchResultWithAdditionalInfoContract<VendorSystemErrorContract,List<string>>>(request);
        }

        /// <summary>
        /// Get filtered and sorted information about vendor system errors and financial institutions.
        /// It's allowed to sort and to filter vendor system errors by date, financial institution name and key words.
        /// </summary>
        /// <param name="contract">Necessary parameters to get list of errors</param>
        /// <returns>The method returns contract with information about vendor system errors and financial institution.</returns>
        public async Task<SearchResultWithAdditionalInfoContract<VendorSystemErrorContract,List<string>>> AdminSearchVendorSystemErrorsAsync(SearchVendorSystemErrorsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/sync-reports/search-vendor-system-errors",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SearchResultWithAdditionalInfoContract<VendorSystemErrorContract,List<string>>>(request);
        }

        /// <summary>
        /// Initiates sync vendor account task in admin area.
        /// </summary>
        /// <param name="userId">User ID.</param>
        /// <param name="contract">Initiate sync vendor account task contract.</param>
        /// <returns>The method returns ID of initiated sync vendor account task.</returns>
        public int AdminGetInitiatedSyncVendorAccountTaskId(int userId, InitiateSyncVendorAccountTaskContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/sync-reports/get-initiated-sync-vendor-account-task-id",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<int>(request);
        }

        /// <summary>
        /// Initiates sync vendor account task in admin area.
        /// </summary>
        /// <param name="userId">User ID.</param>
        /// <param name="contract">Initiate sync vendor account task contract.</param>
        /// <returns>The method returns ID of initiated sync vendor account task.</returns>
        public async Task<int> AdminGetInitiatedSyncVendorAccountTaskIdAsync(int userId, InitiateSyncVendorAccountTaskContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/sync-reports/get-initiated-sync-vendor-account-task-id",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<int>(request);
        }
    }

    public interface IAdminSystemEventsClientByLicenseKeyApiMethods
    {
        void CreateAlertTriggeredEvents(List<CreateAlertTriggeredEventContract> contracts);

        Task CreateAlertTriggeredEventsAsync(List<CreateAlertTriggeredEventContract> contracts);

        void CreateSystemAlertTriggeredEvents(List<CreateSystemAlertTriggeredEventContract> contracts);

        Task CreateSystemAlertTriggeredEventsAsync(List<CreateSystemAlertTriggeredEventContract> contracts);
    }

    public interface IAdminSystemEventsClientByContextKeyApiMethods : IAdminSystemEventsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminSystemEventsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminSystemEventsClient : IAdminSystemEventsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminSystemEventsClient, IAdminSystemEventsClientForUser, IAdminSystemEventsClientForOrganization>
    {
    }

    public interface IAdminSystemEventsClientForUser : IAdminSystemEventsClientByContextKeyApiMethods, IClientByContext<IAdminSystemEventsClientForUser, IAdminSystemEventsClientForOrganization>
    {
    }

    public interface IAdminSystemEventsClientForOrganization : IAdminSystemEventsClientByOrganizationApiMethods
    {
    }

    public partial class AdminSystemEventsClient : BaseClient<IAdminSystemEventsClient, IAdminSystemEventsClientForUser, IAdminSystemEventsClientForOrganization, AdminSystemEventsClient>, IAdminSystemEventsClient, IAdminSystemEventsClientForUser, IAdminSystemEventsClientForOrganization
    {
        public void CreateAlertTriggeredEvents(List<CreateAlertTriggeredEventContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"admin/system-events/alerts-triggered",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            PerformRequest(request);
        }

        public async Task CreateAlertTriggeredEventsAsync(List<CreateAlertTriggeredEventContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"admin/system-events/alerts-triggered",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            await PerformRequestAsync(request);
        }

        public void CreateSystemAlertTriggeredEvents(List<CreateSystemAlertTriggeredEventContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"admin/system-events/virtual-alerts-triggered",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            PerformRequest(request);
        }

        public async Task CreateSystemAlertTriggeredEventsAsync(List<CreateSystemAlertTriggeredEventContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"admin/system-events/virtual-alerts-triggered",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            await PerformRequestAsync(request);
        }
    }

    public interface IAdminTagsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get tags by the position ID.
        /// </summary>
        /// <param name="userId">User ID</param>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns all tags assigned to the requested position.</returns>
        List<PositionTagContract> AdminGetPositionTags(int userId, int positionId);

        /// <summary>
        /// Get tags by the position ID.
        /// </summary>
        /// <param name="userId">User ID</param>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns all tags assigned to the requested position.</returns>
        Task<List<PositionTagContract>> AdminGetPositionTagsAsync(int userId, int positionId);

        List<PositionTagContract> AdminGetPositionsTags(int userId, List<int> positionIds);

        Task<List<PositionTagContract>> AdminGetPositionsTagsAsync(int userId, List<int> positionIds);
    }

    public interface IAdminTagsClientByContextKeyApiMethods : IAdminTagsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminTagsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminTagsClient : IAdminTagsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminTagsClient, IAdminTagsClientForUser, IAdminTagsClientForOrganization>
    {
    }

    public interface IAdminTagsClientForUser : IAdminTagsClientByContextKeyApiMethods, IClientByContext<IAdminTagsClientForUser, IAdminTagsClientForOrganization>
    {
    }

    public interface IAdminTagsClientForOrganization : IAdminTagsClientByOrganizationApiMethods
    {
    }

    public partial class AdminTagsClient : BaseClient<IAdminTagsClient, IAdminTagsClientForUser, IAdminTagsClientForOrganization, AdminTagsClient>, IAdminTagsClient, IAdminTagsClientForUser, IAdminTagsClientForOrganization
    {
        /// <summary>
        /// Get tags by the position ID.
        /// </summary>
        /// <param name="userId">User ID</param>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns all tags assigned to the requested position.</returns>
        public List<PositionTagContract> AdminGetPositionTags(int userId, int positionId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/tags/position/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PositionTagContract>>(request);
        }

        /// <summary>
        /// Get tags by the position ID.
        /// </summary>
        /// <param name="userId">User ID</param>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns all tags assigned to the requested position.</returns>
        public async Task<List<PositionTagContract>> AdminGetPositionTagsAsync(int userId, int positionId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/tags/position/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PositionTagContract>>(request);
        }

        public List<PositionTagContract> AdminGetPositionsTags(int userId, List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/tags/get-by-position-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return PerformRequest<List<PositionTagContract>>(request);
        }

        public async Task<List<PositionTagContract>> AdminGetPositionsTagsAsync(int userId, List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/tags/get-by-position-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return await PerformRequestAsync<List<PositionTagContract>>(request);
        }
    }

    public interface IAdminTradeIdeasUsersClientByLicenseKeyApiMethods
    {
        void CheckUserHasDefaultStockFinderSearches(int tradeSmithUserId);

        Task CheckUserHasDefaultStockFinderSearchesAsync(int tradeSmithUserId);
    }

    public interface IAdminTradeIdeasUsersClientByContextKeyApiMethods : IAdminTradeIdeasUsersClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminTradeIdeasUsersClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminTradeIdeasUsersClient : IAdminTradeIdeasUsersClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminTradeIdeasUsersClient, IAdminTradeIdeasUsersClientForUser, IAdminTradeIdeasUsersClientForOrganization>
    {
    }

    public interface IAdminTradeIdeasUsersClientForUser : IAdminTradeIdeasUsersClientByContextKeyApiMethods, IClientByContext<IAdminTradeIdeasUsersClientForUser, IAdminTradeIdeasUsersClientForOrganization>
    {
    }

    public interface IAdminTradeIdeasUsersClientForOrganization : IAdminTradeIdeasUsersClientByOrganizationApiMethods
    {
    }

    public partial class AdminTradeIdeasUsersClient : BaseClient<IAdminTradeIdeasUsersClient, IAdminTradeIdeasUsersClientForUser, IAdminTradeIdeasUsersClientForOrganization, AdminTradeIdeasUsersClient>, IAdminTradeIdeasUsersClient, IAdminTradeIdeasUsersClientForUser, IAdminTradeIdeasUsersClientForOrganization
    {
        public void CheckUserHasDefaultStockFinderSearches(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/trade-ideas-users/{tradeSmithUserId}/check-has-default-stock-finder-filters",
                Method = HttpMethod.Post,
            };

            PerformRequest(request);
        }

        public async Task CheckUserHasDefaultStockFinderSearchesAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/trade-ideas-users/{tradeSmithUserId}/check-has-default-stock-finder-filters",
                Method = HttpMethod.Post,
            };

            await PerformRequestAsync(request);
        }
    }

    public interface IAdminTradeSmithUsersClientByLicenseKeyApiMethods
    {
        TradeSmithUserContract GetTradeSmithUser(int tradeSmithUserId);

        Task<TradeSmithUserContract> GetTradeSmithUserAsync(int tradeSmithUserId);

        TradeSmithUserContract GetTradeSmithUserByGuid(Guid userGuid);

        Task<TradeSmithUserContract> GetTradeSmithUserByGuidAsync(Guid userGuid);

        TradeSmithUserContract GetTradeSmithUserByEmail(EmailContract contract);

        Task<TradeSmithUserContract> GetTradeSmithUserByEmailAsync(EmailContract contract);

        TradeSmithUserContract GetTradeSmithUserByEmailOrSnaid(GetTradeSmithUserByEmailOrSnaidContract contract);

        Task<TradeSmithUserContract> GetTradeSmithUserByEmailOrSnaidAsync(GetTradeSmithUserByEmailOrSnaidContract contract);

        TradeSmithUserContract GetTradeSmithUserByCustomerNumber(AgoraCustomerNumberContract contract);

        Task<TradeSmithUserContract> GetTradeSmithUserByCustomerNumberAsync(AgoraCustomerNumberContract contract);

        TradeSmithUserContract SynchronizeTradeSmithUserBySnaid(SnaidContract contract);

        Task<TradeSmithUserContract> SynchronizeTradeSmithUserBySnaidAsync(SnaidContract contract);

        void UpdateUserPassword(int tradeSmithUserId, UpdatePasswordContract contract);

        Task UpdateUserPasswordAsync(int tradeSmithUserId, UpdatePasswordContract contract);

        /// <summary>
        /// Delete user data completely from all databases
        /// </summary>
        /// <param name="tradeSmithUserId">ID of user in TradeSmith database</param>
        /// <returns>HTTP status code 200 in case of success</returns>
        void DeleteTradeSmithUser(int tradeSmithUserId);

        /// <summary>
        /// Delete user data completely from all databases
        /// </summary>
        /// <param name="tradeSmithUserId">ID of user in TradeSmith database</param>
        /// <returns>HTTP status code 200 in case of success</returns>
        Task DeleteTradeSmithUserAsync(int tradeSmithUserId);

        SearchResultContract<TradeSmithUserContract> SearchUsers(SearchTradeSmithUsersContract input);

        Task<SearchResultContract<TradeSmithUserContract>> SearchUsersAsync(SearchTradeSmithUsersContract input);

        List<TradeSmithUserContract> SearchUsersBySubscription(SearchTradeSmithUsersBySubscriptionContract contract);

        Task<List<TradeSmithUserContract>> SearchUsersBySubscriptionAsync(SearchTradeSmithUsersBySubscriptionContract contract);

        List<TradeSmithUserContract> GetTradeSmithUsers(List<int> tradeSmithUserIds);

        Task<List<TradeSmithUserContract>> GetTradeSmithUsersAsync(List<int> tradeSmithUserIds);

        TradeSmithUserContract CreateTradeSmithUser(CreateTradeSmithUserContract contract);

        Task<TradeSmithUserContract> CreateTradeSmithUserAsync(CreateTradeSmithUserContract contract);

        UserPersonalInfoContract UpdateTradeSmithUserPersonalinfo(int tradeSmithUserId, UserPersonalInfoContract contract);

        Task<UserPersonalInfoContract> UpdateTradeSmithUserPersonalinfoAsync(int tradeSmithUserId, UserPersonalInfoContract contract);

        void UpdateUserEmail(int tradeSmithUserId, UpdateEmailContract contract);

        Task UpdateUserEmailAsync(int tradeSmithUserId, UpdateEmailContract contract);

        TradeSmithUserContract EditTradeSmithUser(int tradeSmithUserId, EditTradeSmithUserContract contract);

        Task<TradeSmithUserContract> EditTradeSmithUserAsync(int tradeSmithUserId, EditTradeSmithUserContract contract);
    }

    public interface IAdminTradeSmithUsersClientByContextKeyApiMethods : IAdminTradeSmithUsersClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminTradeSmithUsersClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminTradeSmithUsersClient : IAdminTradeSmithUsersClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminTradeSmithUsersClient, IAdminTradeSmithUsersClientForUser, IAdminTradeSmithUsersClientForOrganization>
    {
    }

    public interface IAdminTradeSmithUsersClientForUser : IAdminTradeSmithUsersClientByContextKeyApiMethods, IClientByContext<IAdminTradeSmithUsersClientForUser, IAdminTradeSmithUsersClientForOrganization>
    {
    }

    public interface IAdminTradeSmithUsersClientForOrganization : IAdminTradeSmithUsersClientByOrganizationApiMethods
    {
    }

    public partial class AdminTradeSmithUsersClient : BaseClient<IAdminTradeSmithUsersClient, IAdminTradeSmithUsersClientForUser, IAdminTradeSmithUsersClientForOrganization, AdminTradeSmithUsersClient>, IAdminTradeSmithUsersClient, IAdminTradeSmithUsersClientForUser, IAdminTradeSmithUsersClientForOrganization
    {
        public TradeSmithUserContract GetTradeSmithUser(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users",
                Method = HttpMethod.Get,
            };

            return PerformRequest<TradeSmithUserContract>(request);
        }

        public async Task<TradeSmithUserContract> GetTradeSmithUserAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }

        public TradeSmithUserContract GetTradeSmithUserByGuid(Guid userGuid)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/get-by-guid/{userGuid}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<TradeSmithUserContract>(request);
        }

        public async Task<TradeSmithUserContract> GetTradeSmithUserByGuidAsync(Guid userGuid)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/get-by-guid/{userGuid}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }

        public TradeSmithUserContract GetTradeSmithUserByEmail(EmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/get-by-email",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<TradeSmithUserContract>(request);
        }

        public async Task<TradeSmithUserContract> GetTradeSmithUserByEmailAsync(EmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/get-by-email",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }

        public TradeSmithUserContract GetTradeSmithUserByEmailOrSnaid(GetTradeSmithUserByEmailOrSnaidContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/get-by-email-or-snaid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<TradeSmithUserContract>(request);
        }

        public async Task<TradeSmithUserContract> GetTradeSmithUserByEmailOrSnaidAsync(GetTradeSmithUserByEmailOrSnaidContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/get-by-email-or-snaid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }

        public TradeSmithUserContract GetTradeSmithUserByCustomerNumber(AgoraCustomerNumberContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/get-by-agora-customer-number",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<TradeSmithUserContract>(request);
        }

        public async Task<TradeSmithUserContract> GetTradeSmithUserByCustomerNumberAsync(AgoraCustomerNumberContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/get-by-agora-customer-number",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }

        public TradeSmithUserContract SynchronizeTradeSmithUserBySnaid(SnaidContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/sync-by-snaid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<TradeSmithUserContract>(request);
        }

        public async Task<TradeSmithUserContract> SynchronizeTradeSmithUserBySnaidAsync(SnaidContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/sync-by-snaid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }

        public void UpdateUserPassword(int tradeSmithUserId, UpdatePasswordContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users/password",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task UpdateUserPasswordAsync(int tradeSmithUserId, UpdatePasswordContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/tradesmith-users/password",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Delete user data completely from all databases
        /// </summary>
        /// <param name="tradeSmithUserId">ID of user in TradeSmith database</param>
        /// <returns>HTTP status code 200 in case of success</returns>
        public void DeleteTradeSmithUser(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/delete-by-id/{tradeSmithUserId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete user data completely from all databases
        /// </summary>
        /// <param name="tradeSmithUserId">ID of user in TradeSmith database</param>
        /// <returns>HTTP status code 200 in case of success</returns>
        public async Task DeleteTradeSmithUserAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/delete-by-id/{tradeSmithUserId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        public SearchResultContract<TradeSmithUserContract> SearchUsers(SearchTradeSmithUsersContract input)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<SearchResultContract<TradeSmithUserContract>>(request);
        }

        public async Task<SearchResultContract<TradeSmithUserContract>> SearchUsersAsync(SearchTradeSmithUsersContract input)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<SearchResultContract<TradeSmithUserContract>>(request);
        }

        public List<TradeSmithUserContract> SearchUsersBySubscription(SearchTradeSmithUsersBySubscriptionContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/search-by-subscription",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<TradeSmithUserContract>>(request);
        }

        public async Task<List<TradeSmithUserContract>> SearchUsersBySubscriptionAsync(SearchTradeSmithUsersBySubscriptionContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/search-by-subscription",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<TradeSmithUserContract>>(request);
        }

        public List<TradeSmithUserContract> GetTradeSmithUsers(List<int> tradeSmithUserIds)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(tradeSmithUserIds);

            return PerformRequest<List<TradeSmithUserContract>>(request);
        }

        public async Task<List<TradeSmithUserContract>> GetTradeSmithUsersAsync(List<int> tradeSmithUserIds)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(tradeSmithUserIds);

            return await PerformRequestAsync<List<TradeSmithUserContract>>(request);
        }

        public TradeSmithUserContract CreateTradeSmithUser(CreateTradeSmithUserContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<TradeSmithUserContract>(request);
        }

        public async Task<TradeSmithUserContract> CreateTradeSmithUserAsync(CreateTradeSmithUserContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }

        public UserPersonalInfoContract UpdateTradeSmithUserPersonalinfo(int tradeSmithUserId, UserPersonalInfoContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/update-personal-info/{tradeSmithUserId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<UserPersonalInfoContract>(request);
        }

        public async Task<UserPersonalInfoContract> UpdateTradeSmithUserPersonalinfoAsync(int tradeSmithUserId, UserPersonalInfoContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/update-personal-info/{tradeSmithUserId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserPersonalInfoContract>(request);
        }

        public void UpdateUserEmail(int tradeSmithUserId, UpdateEmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/update-email/{tradeSmithUserId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task UpdateUserEmailAsync(int tradeSmithUserId, UpdateEmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/update-email/{tradeSmithUserId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public TradeSmithUserContract EditTradeSmithUser(int tradeSmithUserId, EditTradeSmithUserContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/edit/{tradeSmithUserId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<TradeSmithUserContract>(request);
        }

        public async Task<TradeSmithUserContract> EditTradeSmithUserAsync(int tradeSmithUserId, EditTradeSmithUserContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/tradesmith-users/edit/{tradeSmithUserId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }
    }

    public interface IAdminUnconfirmedPositionsClientByLicenseKeyApiMethods
    {
        UnconfirmedPositionContract AdminGetUnconfirmedPosition(int userId, int positionId);

        Task<UnconfirmedPositionContract> AdminGetUnconfirmedPositionAsync(int userId, int positionId);

        List<UnconfirmedPositionContract> AdminGetPortfolioUnconfirmedPositions(int userId, int portfolioId);

        Task<List<UnconfirmedPositionContract>> AdminGetPortfolioUnconfirmedPositionsAsync(int userId, int portfolioId);

        UnconfirmedPositionContract AdminEditUnconfirmedPosition(int userId, EditUnconfirmedPositionContract unconfirmedPosition);

        Task<UnconfirmedPositionContract> AdminEditUnconfirmedPositionAsync(int userId, EditUnconfirmedPositionContract unconfirmedPosition);

        void AdminDeleteUnconfirmedPosition(int userId, int unconfirmedPositionId);

        Task AdminDeleteUnconfirmedPositionAsync(int userId, int unconfirmedPositionId);

        SearchResultContract<UnconfirmedPositionContract> AdminSearchUnconfirmedPositions(int userId, int portfolioId, SearchUnconfirmedPositionsContract searchContract);

        Task<SearchResultContract<UnconfirmedPositionContract>> AdminSearchUnconfirmedPositionsAsync(int userId, int portfolioId, SearchUnconfirmedPositionsContract searchContract);

        PositionContract AdminConfirmUnconfirmedPosition(int tradeSmithUserId, int userId, int unconfirmedPositionId, int symbolId);

        Task<PositionContract> AdminConfirmUnconfirmedPositionAsync(int tradeSmithUserId, int userId, int unconfirmedPositionId, int symbolId);
    }

    public interface IAdminUnconfirmedPositionsClientByContextKeyApiMethods : IAdminUnconfirmedPositionsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminUnconfirmedPositionsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminUnconfirmedPositionsClient : IAdminUnconfirmedPositionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminUnconfirmedPositionsClient, IAdminUnconfirmedPositionsClientForUser, IAdminUnconfirmedPositionsClientForOrganization>
    {
    }

    public interface IAdminUnconfirmedPositionsClientForUser : IAdminUnconfirmedPositionsClientByContextKeyApiMethods, IClientByContext<IAdminUnconfirmedPositionsClientForUser, IAdminUnconfirmedPositionsClientForOrganization>
    {
    }

    public interface IAdminUnconfirmedPositionsClientForOrganization : IAdminUnconfirmedPositionsClientByOrganizationApiMethods
    {
    }

    public partial class AdminUnconfirmedPositionsClient : BaseClient<IAdminUnconfirmedPositionsClient, IAdminUnconfirmedPositionsClientForUser, IAdminUnconfirmedPositionsClientForOrganization, AdminUnconfirmedPositionsClient>, IAdminUnconfirmedPositionsClient, IAdminUnconfirmedPositionsClientForUser, IAdminUnconfirmedPositionsClientForOrganization
    {
        public UnconfirmedPositionContract AdminGetUnconfirmedPosition(int userId, int positionId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/unconfirmed-positions/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<UnconfirmedPositionContract>(request);
        }

        public async Task<UnconfirmedPositionContract> AdminGetUnconfirmedPositionAsync(int userId, int positionId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/unconfirmed-positions/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<UnconfirmedPositionContract>(request);
        }

        public List<UnconfirmedPositionContract> AdminGetPortfolioUnconfirmedPositions(int userId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/unconfirmed-positions/portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<UnconfirmedPositionContract>>(request);
        }

        public async Task<List<UnconfirmedPositionContract>> AdminGetPortfolioUnconfirmedPositionsAsync(int userId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/unconfirmed-positions/portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<UnconfirmedPositionContract>>(request);
        }

        public UnconfirmedPositionContract AdminEditUnconfirmedPosition(int userId, EditUnconfirmedPositionContract unconfirmedPosition)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/unconfirmed-positions/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(unconfirmedPosition);

            return PerformRequest<UnconfirmedPositionContract>(request);
        }

        public async Task<UnconfirmedPositionContract> AdminEditUnconfirmedPositionAsync(int userId, EditUnconfirmedPositionContract unconfirmedPosition)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/unconfirmed-positions/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(unconfirmedPosition);

            return await PerformRequestAsync<UnconfirmedPositionContract>(request);
        }

        public void AdminDeleteUnconfirmedPosition(int userId, int unconfirmedPositionId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/unconfirmed-positions/{unconfirmedPositionId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        public async Task AdminDeleteUnconfirmedPositionAsync(int userId, int unconfirmedPositionId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/unconfirmed-positions/{unconfirmedPositionId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        public SearchResultContract<UnconfirmedPositionContract> AdminSearchUnconfirmedPositions(int userId, int portfolioId, SearchUnconfirmedPositionsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/unconfirmed-positions/search-positions/{portfolioId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<UnconfirmedPositionContract>>(request);
        }

        public async Task<SearchResultContract<UnconfirmedPositionContract>> AdminSearchUnconfirmedPositionsAsync(int userId, int portfolioId, SearchUnconfirmedPositionsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/unconfirmed-positions/search-positions/{portfolioId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<UnconfirmedPositionContract>>(request);
        }

        public PositionContract AdminConfirmUnconfirmedPosition(int tradeSmithUserId, int userId, int unconfirmedPositionId, int symbolId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/{userId}/unconfirmed-positions/confirm/{unconfirmedPositionId}/{symbolId}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<PositionContract>(request);
        }

        public async Task<PositionContract> AdminConfirmUnconfirmedPositionAsync(int tradeSmithUserId, int userId, int unconfirmedPositionId, int symbolId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/{userId}/unconfirmed-positions/confirm/{unconfirmedPositionId}/{symbolId}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<PositionContract>(request);
        }
    }

    public interface IAdminUsersClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create new user with Portfolio Analyzer subscription or get existing user if it already exists.
        /// Corresponding User Product Subscription will be created (if necessary) in both cases.
        /// </summary>
        /// <param name="contract">Information to identify/create new user</param>
        /// <returns>Created/found user contract</returns>
        TradeSmithUserContract CreatePortfolioAnalyzerUser(CreatePortfolioAnalyzerUserContract contract);

        /// <summary>
        /// Create new user with Portfolio Analyzer subscription or get existing user if it already exists.
        /// Corresponding User Product Subscription will be created (if necessary) in both cases.
        /// </summary>
        /// <param name="contract">Information to identify/create new user</param>
        /// <returns>Created/found user contract</returns>
        Task<TradeSmithUserContract> CreatePortfolioAnalyzerUserAsync(CreatePortfolioAnalyzerUserContract contract);

        UserSettingsContract GetUserSettings(int tradeSmithUserId);

        Task<UserSettingsContract> GetUserSettingsAsync(int tradeSmithUserId);

        UserSettingsContract UpdateUserSettings(int tradeSmithUserId, UserSettingsContract contract);

        Task<UserSettingsContract> UpdateUserSettingsAsync(int tradeSmithUserId, UserSettingsContract contract);
    }

    public interface IAdminUsersClientByContextKeyApiMethods : IAdminUsersClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminUsersClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminUsersClient : IAdminUsersClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminUsersClient, IAdminUsersClientForUser, IAdminUsersClientForOrganization>
    {
    }

    public interface IAdminUsersClientForUser : IAdminUsersClientByContextKeyApiMethods, IClientByContext<IAdminUsersClientForUser, IAdminUsersClientForOrganization>
    {
    }

    public interface IAdminUsersClientForOrganization : IAdminUsersClientByOrganizationApiMethods
    {
    }

    public partial class AdminUsersClient : BaseClient<IAdminUsersClient, IAdminUsersClientForUser, IAdminUsersClientForOrganization, AdminUsersClient>, IAdminUsersClient, IAdminUsersClientForUser, IAdminUsersClientForOrganization
    {
        /// <summary>
        /// Create new user with Portfolio Analyzer subscription or get existing user if it already exists.
        /// Corresponding User Product Subscription will be created (if necessary) in both cases.
        /// </summary>
        /// <param name="contract">Information to identify/create new user</param>
        /// <returns>Created/found user contract</returns>
        public TradeSmithUserContract CreatePortfolioAnalyzerUser(CreatePortfolioAnalyzerUserContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/users/create-portfolio-analyzer",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<TradeSmithUserContract>(request);
        }

        /// <summary>
        /// Create new user with Portfolio Analyzer subscription or get existing user if it already exists.
        /// Corresponding User Product Subscription will be created (if necessary) in both cases.
        /// </summary>
        /// <param name="contract">Information to identify/create new user</param>
        /// <returns>Created/found user contract</returns>
        public async Task<TradeSmithUserContract> CreatePortfolioAnalyzerUserAsync(CreatePortfolioAnalyzerUserContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/users/create-portfolio-analyzer",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }

        public UserSettingsContract GetUserSettings(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/user-settings",
                Method = HttpMethod.Get,
            };

            return PerformRequest<UserSettingsContract>(request);
        }

        public async Task<UserSettingsContract> GetUserSettingsAsync(int tradeSmithUserId)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/user-settings",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<UserSettingsContract>(request);
        }

        public UserSettingsContract UpdateUserSettings(int tradeSmithUserId, UserSettingsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/users/settings",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<UserSettingsContract>(request);
        }

        public async Task<UserSettingsContract> UpdateUserSettingsAsync(int tradeSmithUserId, UserSettingsContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{tradeSmithUserId}/users/settings",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserSettingsContract>(request);
        }
    }

    public interface IAdminYodleeUserContextsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get yodlee user context data for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        YodleeUserContextContract GetYodleeUserContext(int userId);

        /// <summary>
        /// Get yodlee user context data for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        Task<YodleeUserContextContract> GetYodleeUserContextAsync(int userId);

        /// <summary>
        /// Create or update yodlee user context for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <param name="contract">Parameters to create or update Yodlee User context.</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        YodleeUserContextContract CreateOrUpdateYodleeUserContext(int userId, CreateOrUpdateYodleeUserContextContract contract);

        /// <summary>
        /// Create or update yodlee user context for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <param name="contract">Parameters to create or update Yodlee User context.</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        Task<YodleeUserContextContract> CreateOrUpdateYodleeUserContextAsync(int userId, CreateOrUpdateYodleeUserContextContract contract);

        /// <summary>
        /// Delete yodlee user context for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <returns>The method returns HTTP status code 200 after the deleting of Yodlee user context.</returns>
        void DeleteYodleeUserContext(int userId);

        /// <summary>
        /// Delete yodlee user context for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <returns>The method returns HTTP status code 200 after the deleting of Yodlee user context.</returns>
        Task DeleteYodleeUserContextAsync(int userId);
    }

    public interface IAdminYodleeUserContextsClientByContextKeyApiMethods : IAdminYodleeUserContextsClientByLicenseKeyApiMethods
    {
    }

    public interface IAdminYodleeUserContextsClientByOrganizationApiMethods
    {
    }

    public partial interface IAdminYodleeUserContextsClient : IAdminYodleeUserContextsClientByLicenseKeyApiMethods, IClientByLicenseKey<IAdminYodleeUserContextsClient, IAdminYodleeUserContextsClientForUser, IAdminYodleeUserContextsClientForOrganization>
    {
    }

    public interface IAdminYodleeUserContextsClientForUser : IAdminYodleeUserContextsClientByContextKeyApiMethods, IClientByContext<IAdminYodleeUserContextsClientForUser, IAdminYodleeUserContextsClientForOrganization>
    {
    }

    public interface IAdminYodleeUserContextsClientForOrganization : IAdminYodleeUserContextsClientByOrganizationApiMethods
    {
    }

    public partial class AdminYodleeUserContextsClient : BaseClient<IAdminYodleeUserContextsClient, IAdminYodleeUserContextsClientForUser, IAdminYodleeUserContextsClientForOrganization, AdminYodleeUserContextsClient>, IAdminYodleeUserContextsClient, IAdminYodleeUserContextsClientForUser, IAdminYodleeUserContextsClientForOrganization
    {
        /// <summary>
        /// Get yodlee user context data for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        public YodleeUserContextContract GetYodleeUserContext(int userId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/yodlee-user-contexts/get",
                Method = HttpMethod.Get,
            };

            return PerformRequest<YodleeUserContextContract>(request);
        }

        /// <summary>
        /// Get yodlee user context data for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        public async Task<YodleeUserContextContract> GetYodleeUserContextAsync(int userId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/yodlee-user-contexts/get",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<YodleeUserContextContract>(request);
        }

        /// <summary>
        /// Create or update yodlee user context for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <param name="contract">Parameters to create or update Yodlee User context.</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        public YodleeUserContextContract CreateOrUpdateYodleeUserContext(int userId, CreateOrUpdateYodleeUserContextContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/yodlee-user-contexts/create-or-update",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<YodleeUserContextContract>(request);
        }

        /// <summary>
        /// Create or update yodlee user context for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <param name="contract">Parameters to create or update Yodlee User context.</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        public async Task<YodleeUserContextContract> CreateOrUpdateYodleeUserContextAsync(int userId, CreateOrUpdateYodleeUserContextContract contract)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/yodlee-user-contexts/create-or-update",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<YodleeUserContextContract>(request);
        }

        /// <summary>
        /// Delete yodlee user context for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <returns>The method returns HTTP status code 200 after the deleting of Yodlee user context.</returns>
        public void DeleteYodleeUserContext(int userId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/yodlee-user-contexts/delete",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete yodlee user context for the specified user.
        /// </summary>
        /// <param name="userId">ID of the user</param>
        /// <returns>The method returns HTTP status code 200 after the deleting of Yodlee user context.</returns>
        public async Task DeleteYodleeUserContextAsync(int userId)
        {
            var request = new RequestData
            {
                Url = $"admin/{userId}/yodlee-user-contexts/delete",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }
    }

    public interface IAlertTemplatesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Internal method used for AlertTemplates to take trigger description.
        /// Ideally should be removed in future. To do this, we must save template triggers into database after pressing 'Add' button on UI.
        /// </summary>
        /// <param name="contract">Trigger parameters</param>
        /// <returns>Trigger description</returns>
        TriggerDescriptionContract GetTriggerDescription(TriggerFieldsContract contract);

        /// <summary>
        /// Internal method used for AlertTemplates to take trigger description.
        /// Ideally should be removed in future. To do this, we must save template triggers into database after pressing 'Add' button on UI.
        /// </summary>
        /// <param name="contract">Trigger parameters</param>
        /// <returns>Trigger description</returns>
        Task<TriggerDescriptionContract> GetTriggerDescriptionAsync(TriggerFieldsContract contract);
    }

    public interface IAlertTemplatesClientByContextKeyApiMethods : IAlertTemplatesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// The method allows to get the list of created user alert templates.
        /// </summary>
        /// <returns>The method returns an array of all existing alerts templates for the current user.</returns>
        List<AlertTemplateContract> GetUserAlertTemplates();

        /// <summary>
        /// The method allows to get the list of created user alert templates.
        /// </summary>
        /// <returns>The method returns an array of all existing alerts templates for the current user.</returns>
        Task<List<AlertTemplateContract>> GetUserAlertTemplatesAsync();

        /// <summary>
        /// The method get the information about the selected alert template by its ID.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns the information about the selected alert template.</returns>
        AlertTemplateContract GetUserAlertTemplate(int alertTemplateId);

        /// <summary>
        /// The method get the information about the selected alert template by its ID.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns the information about the selected alert template.</returns>
        Task<AlertTemplateContract> GetUserAlertTemplateAsync(int alertTemplateId);

        /// <summary>
        /// The method allow to  get all trigger types assigned to the selected alert template.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns the information about trigger types assigned to the selected alert template.</returns>
        List<AlertTemplateTriggerContract> GetAlertTemplateTriggers(int alertTemplateId);

        /// <summary>
        /// The method allow to  get all trigger types assigned to the selected alert template.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns the information about trigger types assigned to the selected alert template.</returns>
        Task<List<AlertTemplateTriggerContract>> GetAlertTemplateTriggersAsync(int alertTemplateId);

        List<AlertTemplateTriggerContract> GetAlertTemplateTriggers(List<int> alertTemplateIds);

        Task<List<AlertTemplateTriggerContract>> GetAlertTemplateTriggersAsync(List<int> alertTemplateIds);

        void DeleteAlertTemplates(List<int> alertTemplateIds);

        Task DeleteAlertTemplatesAsync(List<int> alertTemplateIds);

        /// <summary>
        /// The method deletes the selected alert template trigger.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="alertTemplateTriggerId">Id of the trigger type assigned to the alert template.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the selected alert template trigger.</returns>
        void DeleteAlertTemplateTrigger(int alertTemplateId, int alertTemplateTriggerId);

        /// <summary>
        /// The method deletes the selected alert template trigger.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="alertTemplateTriggerId">Id of the trigger type assigned to the alert template.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the selected alert template trigger.</returns>
        Task DeleteAlertTemplateTriggerAsync(int alertTemplateId, int alertTemplateTriggerId);

        /// <summary>
        /// The method creates an alert template.
        /// </summary>
        /// <param name="template">Template to create.</param>
        /// <returns>The method returns created template.</returns>
        AlertTemplateContract CreateAlertTemplate(CreateAlertTemplateContract template);

        /// <summary>
        /// The method creates an alert template.
        /// </summary>
        /// <param name="template">Template to create.</param>
        /// <returns>The method returns created template.</returns>
        Task<AlertTemplateContract> CreateAlertTemplateAsync(CreateAlertTemplateContract template);

        /// <summary>
        /// The method creates an alert template trigger. Different inputs are required depending on the trigger type.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="trigger">Alert template parameters to create a template.</param>
        /// <returns>The method returns the information about the created alert template trigger.</returns>
        AlertTemplateTriggerContract CreateAlertTemplateTrigger(int alertTemplateId, TriggerFieldsContract trigger);

        /// <summary>
        /// The method creates an alert template trigger. Different inputs are required depending on the trigger type.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="trigger">Alert template parameters to create a template.</param>
        /// <returns>The method returns the information about the created alert template trigger.</returns>
        Task<AlertTemplateTriggerContract> CreateAlertTemplateTriggerAsync(int alertTemplateId, TriggerFieldsContract trigger);

        /// <summary>
        /// The method edits an alert template.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="template">Alert template parameters to edit a template.</param>
        /// <returns>The method returns the information about the edited alert template.</returns>
        AlertTemplateContract EditAlertTemplate(int alertTemplateId, EditAlertTemplateContract template);

        /// <summary>
        /// The method edits an alert template.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="template">Alert template parameters to edit a template.</param>
        /// <returns>The method returns the information about the edited alert template.</returns>
        Task<AlertTemplateContract> EditAlertTemplateAsync(int alertTemplateId, EditAlertTemplateContract template);

        /// <summary>
        /// The method edits an alert template trigger. Different inputs are required depending on the trigger type.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="triggerId">Alert template trigger Id.</param>
        /// <param name="trigger">Alert template parameters to edit a template.</param>
        /// <returns>The method returns the information about the edited alert template trigger.</returns>
        AlertTemplateTriggerContract EditAlertTemplateTrigger(int alertTemplateId, int triggerId, TriggerFieldsContract trigger);

        /// <summary>
        /// The method edits an alert template trigger. Different inputs are required depending on the trigger type.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="triggerId">Alert template trigger Id.</param>
        /// <param name="trigger">Alert template parameters to edit a template.</param>
        /// <returns>The method returns the information about the edited alert template trigger.</returns>
        Task<AlertTemplateTriggerContract> EditAlertTemplateTriggerAsync(int alertTemplateId, int triggerId, TriggerFieldsContract trigger);

        BulkCreatePositionTriggersResultContract ApplyTemplate(int alertTemplateId, List<int> positionIds);

        Task<BulkCreatePositionTriggersResultContract> ApplyTemplateAsync(int alertTemplateId, List<int> positionIds);

        /// <summary>
        /// The method sets the selected alert template as default on position creating.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns HTTP status code 200 after setting of the selected alert template as default.</returns>
        void SetDefaultAlertTemplate(int alertTemplateId);

        /// <summary>
        /// The method sets the selected alert template as default on position creating.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns HTTP status code 200 after setting of the selected alert template as default.</returns>
        Task SetDefaultAlertTemplateAsync(int alertTemplateId);

        List<AlertTemplateTriggerContract> ReplaceAlertTemplateTriggers(int alertTemplateId, List<TriggerFieldsContract> triggers);

        Task<List<AlertTemplateTriggerContract>> ReplaceAlertTemplateTriggersAsync(int alertTemplateId, List<TriggerFieldsContract> triggers);

        /// <summary>
        /// The method creates an alert template based on alerts that were already assigned to selected position.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <param name="contract">Template to create.</param>
        /// <returns>The method returns the information about the created alert template based on the selected position.</returns>
        AlertTemplateContract CreateTemplateFromPosition(int positionId, CreateAlertTemplateContract contract);

        /// <summary>
        /// The method creates an alert template based on alerts that were already assigned to selected position.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <param name="contract">Template to create.</param>
        /// <returns>The method returns the information about the created alert template based on the selected position.</returns>
        Task<AlertTemplateContract> CreateTemplateFromPositionAsync(int positionId, CreateAlertTemplateContract contract);
    }

    public interface IAlertTemplatesClientByOrganizationApiMethods
    {
    }

    public partial interface IAlertTemplatesClient : IAlertTemplatesClientByLicenseKeyApiMethods, IClientByLicenseKey<IAlertTemplatesClient, IAlertTemplatesClientForUser, IAlertTemplatesClientForOrganization>
    {
    }

    public interface IAlertTemplatesClientForUser : IAlertTemplatesClientByContextKeyApiMethods, IClientByContext<IAlertTemplatesClientForUser, IAlertTemplatesClientForOrganization>
    {
    }

    public interface IAlertTemplatesClientForOrganization : IAlertTemplatesClientByOrganizationApiMethods
    {
    }

    public partial class AlertTemplatesClient : BaseClient<IAlertTemplatesClient, IAlertTemplatesClientForUser, IAlertTemplatesClientForOrganization, AlertTemplatesClient>, IAlertTemplatesClient, IAlertTemplatesClientForUser, IAlertTemplatesClientForOrganization
    {
        /// <summary>
        /// The method allows to get the list of created user alert templates.
        /// </summary>
        /// <returns>The method returns an array of all existing alerts templates for the current user.</returns>
        public List<AlertTemplateContract> GetUserAlertTemplates()
        {
            var request = new RequestData
            {
                Url = $"alert-templates",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<AlertTemplateContract>>(request);
        }

        /// <summary>
        /// The method allows to get the list of created user alert templates.
        /// </summary>
        /// <returns>The method returns an array of all existing alerts templates for the current user.</returns>
        public async Task<List<AlertTemplateContract>> GetUserAlertTemplatesAsync()
        {
            var request = new RequestData
            {
                Url = $"alert-templates",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<AlertTemplateContract>>(request);
        }

        /// <summary>
        /// The method get the information about the selected alert template by its ID.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns the information about the selected alert template.</returns>
        public AlertTemplateContract GetUserAlertTemplate(int alertTemplateId)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<AlertTemplateContract>(request);
        }

        /// <summary>
        /// The method get the information about the selected alert template by its ID.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns the information about the selected alert template.</returns>
        public async Task<AlertTemplateContract> GetUserAlertTemplateAsync(int alertTemplateId)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<AlertTemplateContract>(request);
        }

        /// <summary>
        /// The method allow to  get all trigger types assigned to the selected alert template.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns the information about trigger types assigned to the selected alert template.</returns>
        public List<AlertTemplateTriggerContract> GetAlertTemplateTriggers(int alertTemplateId)
        {
            var request = new RequestData
            {
                Url = $"alert-template/{alertTemplateId}/triggers",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<AlertTemplateTriggerContract>>(request);
        }

        /// <summary>
        /// The method allow to  get all trigger types assigned to the selected alert template.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns the information about trigger types assigned to the selected alert template.</returns>
        public async Task<List<AlertTemplateTriggerContract>> GetAlertTemplateTriggersAsync(int alertTemplateId)
        {
            var request = new RequestData
            {
                Url = $"alert-template/{alertTemplateId}/triggers",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<AlertTemplateTriggerContract>>(request);
        }

        public List<AlertTemplateTriggerContract> GetAlertTemplateTriggers(List<int> alertTemplateIds)
        {
            var request = new RequestData
            {
                Url = $"alert-template/triggers/get-by-template-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(alertTemplateIds);

            return PerformRequest<List<AlertTemplateTriggerContract>>(request);
        }

        public async Task<List<AlertTemplateTriggerContract>> GetAlertTemplateTriggersAsync(List<int> alertTemplateIds)
        {
            var request = new RequestData
            {
                Url = $"alert-template/triggers/get-by-template-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(alertTemplateIds);

            return await PerformRequestAsync<List<AlertTemplateTriggerContract>>(request);
        }

        public void DeleteAlertTemplates(List<int> alertTemplateIds)
        {
            var request = new RequestData
            {
                Url = $"alert-templates",
                Method = HttpMethod.Delete,
            };

            request.SetBody(alertTemplateIds);

            PerformRequest(request);
        }

        public async Task DeleteAlertTemplatesAsync(List<int> alertTemplateIds)
        {
            var request = new RequestData
            {
                Url = $"alert-templates",
                Method = HttpMethod.Delete,
            };

            request.SetBody(alertTemplateIds);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// The method deletes the selected alert template trigger.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="alertTemplateTriggerId">Id of the trigger type assigned to the alert template.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the selected alert template trigger.</returns>
        public void DeleteAlertTemplateTrigger(int alertTemplateId, int alertTemplateTriggerId)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/triggers/{alertTemplateTriggerId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// The method deletes the selected alert template trigger.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="alertTemplateTriggerId">Id of the trigger type assigned to the alert template.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the selected alert template trigger.</returns>
        public async Task DeleteAlertTemplateTriggerAsync(int alertTemplateId, int alertTemplateTriggerId)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/triggers/{alertTemplateTriggerId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// The method creates an alert template.
        /// </summary>
        /// <param name="template">Template to create.</param>
        /// <returns>The method returns created template.</returns>
        public AlertTemplateContract CreateAlertTemplate(CreateAlertTemplateContract template)
        {
            var request = new RequestData
            {
                Url = $"alert-templates",
                Method = HttpMethod.Post,
            };

            request.SetBody(template);

            return PerformRequest<AlertTemplateContract>(request);
        }

        /// <summary>
        /// The method creates an alert template.
        /// </summary>
        /// <param name="template">Template to create.</param>
        /// <returns>The method returns created template.</returns>
        public async Task<AlertTemplateContract> CreateAlertTemplateAsync(CreateAlertTemplateContract template)
        {
            var request = new RequestData
            {
                Url = $"alert-templates",
                Method = HttpMethod.Post,
            };

            request.SetBody(template);

            return await PerformRequestAsync<AlertTemplateContract>(request);
        }

        /// <summary>
        /// The method creates an alert template trigger. Different inputs are required depending on the trigger type.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="trigger">Alert template parameters to create a template.</param>
        /// <returns>The method returns the information about the created alert template trigger.</returns>
        public AlertTemplateTriggerContract CreateAlertTemplateTrigger(int alertTemplateId, TriggerFieldsContract trigger)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/triggers",
                Method = HttpMethod.Post,
            };

            request.SetBody(trigger);

            return PerformRequest<AlertTemplateTriggerContract>(request);
        }

        /// <summary>
        /// The method creates an alert template trigger. Different inputs are required depending on the trigger type.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="trigger">Alert template parameters to create a template.</param>
        /// <returns>The method returns the information about the created alert template trigger.</returns>
        public async Task<AlertTemplateTriggerContract> CreateAlertTemplateTriggerAsync(int alertTemplateId, TriggerFieldsContract trigger)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/triggers",
                Method = HttpMethod.Post,
            };

            request.SetBody(trigger);

            return await PerformRequestAsync<AlertTemplateTriggerContract>(request);
        }

        /// <summary>
        /// The method edits an alert template.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="template">Alert template parameters to edit a template.</param>
        /// <returns>The method returns the information about the edited alert template.</returns>
        public AlertTemplateContract EditAlertTemplate(int alertTemplateId, EditAlertTemplateContract template)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(template);

            return PerformRequest<AlertTemplateContract>(request);
        }

        /// <summary>
        /// The method edits an alert template.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="template">Alert template parameters to edit a template.</param>
        /// <returns>The method returns the information about the edited alert template.</returns>
        public async Task<AlertTemplateContract> EditAlertTemplateAsync(int alertTemplateId, EditAlertTemplateContract template)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(template);

            return await PerformRequestAsync<AlertTemplateContract>(request);
        }

        /// <summary>
        /// The method edits an alert template trigger. Different inputs are required depending on the trigger type.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="triggerId">Alert template trigger Id.</param>
        /// <param name="trigger">Alert template parameters to edit a template.</param>
        /// <returns>The method returns the information about the edited alert template trigger.</returns>
        public AlertTemplateTriggerContract EditAlertTemplateTrigger(int alertTemplateId, int triggerId, TriggerFieldsContract trigger)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/triggers/{triggerId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(trigger);

            return PerformRequest<AlertTemplateTriggerContract>(request);
        }

        /// <summary>
        /// The method edits an alert template trigger. Different inputs are required depending on the trigger type.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <param name="triggerId">Alert template trigger Id.</param>
        /// <param name="trigger">Alert template parameters to edit a template.</param>
        /// <returns>The method returns the information about the edited alert template trigger.</returns>
        public async Task<AlertTemplateTriggerContract> EditAlertTemplateTriggerAsync(int alertTemplateId, int triggerId, TriggerFieldsContract trigger)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/triggers/{triggerId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(trigger);

            return await PerformRequestAsync<AlertTemplateTriggerContract>(request);
        }

        public BulkCreatePositionTriggersResultContract ApplyTemplate(int alertTemplateId, List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/apply",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return PerformRequest<BulkCreatePositionTriggersResultContract>(request);
        }

        public async Task<BulkCreatePositionTriggersResultContract> ApplyTemplateAsync(int alertTemplateId, List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/apply",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return await PerformRequestAsync<BulkCreatePositionTriggersResultContract>(request);
        }

        /// <summary>
        /// The method sets the selected alert template as default on position creating.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns HTTP status code 200 after setting of the selected alert template as default.</returns>
        public void SetDefaultAlertTemplate(int alertTemplateId)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/set-default",
                Method = HttpMethod.Post,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// The method sets the selected alert template as default on position creating.
        /// </summary>
        /// <param name="alertTemplateId">Alert template Id.</param>
        /// <returns>The method returns HTTP status code 200 after setting of the selected alert template as default.</returns>
        public async Task SetDefaultAlertTemplateAsync(int alertTemplateId)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/set-default",
                Method = HttpMethod.Post,
            };

            await PerformRequestAsync(request);
        }

        public List<AlertTemplateTriggerContract> ReplaceAlertTemplateTriggers(int alertTemplateId, List<TriggerFieldsContract> triggers)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/replace-triggers",
                Method = HttpMethod.Post,
            };

            request.SetBody(triggers);

            return PerformRequest<List<AlertTemplateTriggerContract>>(request);
        }

        public async Task<List<AlertTemplateTriggerContract>> ReplaceAlertTemplateTriggersAsync(int alertTemplateId, List<TriggerFieldsContract> triggers)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/{alertTemplateId}/replace-triggers",
                Method = HttpMethod.Post,
            };

            request.SetBody(triggers);

            return await PerformRequestAsync<List<AlertTemplateTriggerContract>>(request);
        }

        /// <summary>
        /// The method creates an alert template based on alerts that were already assigned to selected position.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <param name="contract">Template to create.</param>
        /// <returns>The method returns the information about the created alert template based on the selected position.</returns>
        public AlertTemplateContract CreateTemplateFromPosition(int positionId, CreateAlertTemplateContract contract)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/create-from-position/{positionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<AlertTemplateContract>(request);
        }

        /// <summary>
        /// The method creates an alert template based on alerts that were already assigned to selected position.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <param name="contract">Template to create.</param>
        /// <returns>The method returns the information about the created alert template based on the selected position.</returns>
        public async Task<AlertTemplateContract> CreateTemplateFromPositionAsync(int positionId, CreateAlertTemplateContract contract)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/create-from-position/{positionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<AlertTemplateContract>(request);
        }

        /// <summary>
        /// Internal method used for AlertTemplates to take trigger description.
        /// Ideally should be removed in future. To do this, we must save template triggers into database after pressing 'Add' button on UI.
        /// </summary>
        /// <param name="contract">Trigger parameters</param>
        /// <returns>Trigger description</returns>
        public TriggerDescriptionContract GetTriggerDescription(TriggerFieldsContract contract)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/get-trigger-description",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<TriggerDescriptionContract>(request);
        }

        /// <summary>
        /// Internal method used for AlertTemplates to take trigger description.
        /// Ideally should be removed in future. To do this, we must save template triggers into database after pressing 'Add' button on UI.
        /// </summary>
        /// <param name="contract">Trigger parameters</param>
        /// <returns>Trigger description</returns>
        public async Task<TriggerDescriptionContract> GetTriggerDescriptionAsync(TriggerFieldsContract contract)
        {
            var request = new RequestData
            {
                Url = $"alert-templates/get-trigger-description",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<TriggerDescriptionContract>(request);
        }
    }

    public interface IBacktesterClientByLicenseKeyApiMethods
    {
    }

    public interface IBacktesterClientByContextKeyApiMethods : IBacktesterClientByLicenseKeyApiMethods
    {
        List<BacktesterStrategyContract> GetUserStrategies();

        Task<List<BacktesterStrategyContract>> GetUserStrategiesAsync();

        BacktesterStrategyContract GetStrategy(int strategyId);

        Task<BacktesterStrategyContract> GetStrategyAsync(int strategyId);

        BacktesterStrategyContract CreateStrategy(CreateBacktesterStrategyContract contract);

        Task<BacktesterStrategyContract> CreateStrategyAsync(CreateBacktesterStrategyContract contract);

        BacktesterStrategyContract EditStrategy(int strategyId, EditBacktesterStrategyContract contract);

        Task<BacktesterStrategyContract> EditStrategyAsync(int strategyId, EditBacktesterStrategyContract contract);

        /// <summary>
        /// Delete Backtester Strategy from the database with all related entities, like Task Results.
        /// </summary>
        /// <param name="strategyId">ID of the strategy to delete.</param>
        /// <returns>HTTP Status OK in case of success.</returns>
        void DeleteStrategy(int strategyId);

        /// <summary>
        /// Delete Backtester Strategy from the database with all related entities, like Task Results.
        /// </summary>
        /// <param name="strategyId">ID of the strategy to delete.</param>
        /// <returns>HTTP Status OK in case of success.</returns>
        Task DeleteStrategyAsync(int strategyId);

        List<BacktesterTaskContract> GetUserTasks();

        Task<List<BacktesterTaskContract>> GetUserTasksAsync();

        BacktesterTaskContract GetTask(int taskId);

        Task<BacktesterTaskContract> GetTaskAsync(int taskId);

        BacktesterTaskContract CreateTask(CreateBacktesterTaskContract contract);

        Task<BacktesterTaskContract> CreateTaskAsync(CreateBacktesterTaskContract contract);

        /// <summary>
        /// Delete Backtester task with all related data (with all input for task and results).
        /// </summary>
        /// <param name="taskId">ID of the backtester task.</param>
        /// <returns>HTTP Status code 200 in case of success.</returns>
        void DeleteTask(int taskId);

        /// <summary>
        /// Delete Backtester task with all related data (with all input for task and results).
        /// </summary>
        /// <param name="taskId">ID of the backtester task.</param>
        /// <returns>HTTP Status code 200 in case of success.</returns>
        Task DeleteTaskAsync(int taskId);

        void DeleteTasks(List<int> taskIds);

        Task DeleteTasksAsync(List<int> taskIds);

        /// <summary>
        /// Get the results for each Strategy in Backtester Task.
        /// </summary>
        /// <param name="taskId">ID of the task.</param>
        /// <returns>The list of results for each Strategy.</returns>
        List<BacktesterSubtaskResultContract> GetTaskResults(int taskId);

        /// <summary>
        /// Get the results for each Strategy in Backtester Task.
        /// </summary>
        /// <param name="taskId">ID of the task.</param>
        /// <returns>The list of results for each Strategy.</returns>
        Task<List<BacktesterSubtaskResultContract>> GetTaskResultsAsync(int taskId);
    }

    public interface IBacktesterClientByOrganizationApiMethods
    {
    }

    public partial interface IBacktesterClient : IBacktesterClientByLicenseKeyApiMethods, IClientByLicenseKey<IBacktesterClient, IBacktesterClientForUser, IBacktesterClientForOrganization>
    {
    }

    public interface IBacktesterClientForUser : IBacktesterClientByContextKeyApiMethods, IClientByContext<IBacktesterClientForUser, IBacktesterClientForOrganization>
    {
    }

    public interface IBacktesterClientForOrganization : IBacktesterClientByOrganizationApiMethods
    {
    }

    public partial class BacktesterClient : BaseClient<IBacktesterClient, IBacktesterClientForUser, IBacktesterClientForOrganization, BacktesterClient>, IBacktesterClient, IBacktesterClientForUser, IBacktesterClientForOrganization
    {
        public List<BacktesterStrategyContract> GetUserStrategies()
        {
            var request = new RequestData
            {
                Url = $"backtester/user-strategies",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<BacktesterStrategyContract>>(request);
        }

        public async Task<List<BacktesterStrategyContract>> GetUserStrategiesAsync()
        {
            var request = new RequestData
            {
                Url = $"backtester/user-strategies",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<BacktesterStrategyContract>>(request);
        }

        public BacktesterStrategyContract GetStrategy(int strategyId)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-strategies/{strategyId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<BacktesterStrategyContract>(request);
        }

        public async Task<BacktesterStrategyContract> GetStrategyAsync(int strategyId)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-strategies/{strategyId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<BacktesterStrategyContract>(request);
        }

        public BacktesterStrategyContract CreateStrategy(CreateBacktesterStrategyContract contract)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-strategies",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<BacktesterStrategyContract>(request);
        }

        public async Task<BacktesterStrategyContract> CreateStrategyAsync(CreateBacktesterStrategyContract contract)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-strategies",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<BacktesterStrategyContract>(request);
        }

        public BacktesterStrategyContract EditStrategy(int strategyId, EditBacktesterStrategyContract contract)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-strategies/{strategyId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<BacktesterStrategyContract>(request);
        }

        public async Task<BacktesterStrategyContract> EditStrategyAsync(int strategyId, EditBacktesterStrategyContract contract)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-strategies/{strategyId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<BacktesterStrategyContract>(request);
        }

        /// <summary>
        /// Delete Backtester Strategy from the database with all related entities, like Task Results.
        /// </summary>
        /// <param name="strategyId">ID of the strategy to delete.</param>
        /// <returns>HTTP Status OK in case of success.</returns>
        public void DeleteStrategy(int strategyId)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-strategies/{strategyId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete Backtester Strategy from the database with all related entities, like Task Results.
        /// </summary>
        /// <param name="strategyId">ID of the strategy to delete.</param>
        /// <returns>HTTP Status OK in case of success.</returns>
        public async Task DeleteStrategyAsync(int strategyId)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-strategies/{strategyId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        public List<BacktesterTaskContract> GetUserTasks()
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<BacktesterTaskContract>>(request);
        }

        public async Task<List<BacktesterTaskContract>> GetUserTasksAsync()
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<BacktesterTaskContract>>(request);
        }

        public BacktesterTaskContract GetTask(int taskId)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks/{taskId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<BacktesterTaskContract>(request);
        }

        public async Task<BacktesterTaskContract> GetTaskAsync(int taskId)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks/{taskId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<BacktesterTaskContract>(request);
        }

        public BacktesterTaskContract CreateTask(CreateBacktesterTaskContract contract)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<BacktesterTaskContract>(request);
        }

        public async Task<BacktesterTaskContract> CreateTaskAsync(CreateBacktesterTaskContract contract)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<BacktesterTaskContract>(request);
        }

        /// <summary>
        /// Delete Backtester task with all related data (with all input for task and results).
        /// </summary>
        /// <param name="taskId">ID of the backtester task.</param>
        /// <returns>HTTP Status code 200 in case of success.</returns>
        public void DeleteTask(int taskId)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks/{taskId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete Backtester task with all related data (with all input for task and results).
        /// </summary>
        /// <param name="taskId">ID of the backtester task.</param>
        /// <returns>HTTP Status code 200 in case of success.</returns>
        public async Task DeleteTaskAsync(int taskId)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks/{taskId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        public void DeleteTasks(List<int> taskIds)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks",
                Method = HttpMethod.Delete,
            };

            request.SetBody(taskIds);

            PerformRequest(request);
        }

        public async Task DeleteTasksAsync(List<int> taskIds)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks",
                Method = HttpMethod.Delete,
            };

            request.SetBody(taskIds);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get the results for each Strategy in Backtester Task.
        /// </summary>
        /// <param name="taskId">ID of the task.</param>
        /// <returns>The list of results for each Strategy.</returns>
        public List<BacktesterSubtaskResultContract> GetTaskResults(int taskId)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks/{taskId}/results",
                Method = HttpMethod.Post,
            };

            return PerformRequest<List<BacktesterSubtaskResultContract>>(request);
        }

        /// <summary>
        /// Get the results for each Strategy in Backtester Task.
        /// </summary>
        /// <param name="taskId">ID of the task.</param>
        /// <returns>The list of results for each Strategy.</returns>
        public async Task<List<BacktesterSubtaskResultContract>> GetTaskResultsAsync(int taskId)
        {
            var request = new RequestData
            {
                Url = $"backtester/user-tasks/{taskId}/results",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<List<BacktesterSubtaskResultContract>>(request);
        }
    }

    public interface IBasketsClientByLicenseKeyApiMethods
    {
        List<int> GetSystemBasketSymbolIds(List<BasketTypes> basketTypes);

        Task<List<int>> GetSystemBasketSymbolIdsAsync(List<BasketTypes> basketTypes);
    }

    public interface IBasketsClientByContextKeyApiMethods : IBasketsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get list of all available for user baskets.
        /// </summary>
        /// <returns>The method returns list of user's baskets.</returns>
        List<BasketContract> GetAllAvailableBaskets();

        /// <summary>
        /// Get list of all available for user baskets.
        /// </summary>
        /// <returns>The method returns list of user's baskets.</returns>
        Task<List<BasketContract>> GetAllAvailableBasketsAsync();

        /// <summary>
        /// Get basket
        /// </summary>
        /// <param name="basketId">Basket ID</param>
        /// <returns>Basket contract</returns>
        BasketContract GetBasket(int basketId);

        /// <summary>
        /// Get basket
        /// </summary>
        /// <param name="basketId">Basket ID</param>
        /// <returns>Basket contract</returns>
        Task<BasketContract> GetBasketAsync(int basketId);

        List<BasketContract> GetBasketsByBasketTypes(List<BasketTypes> basketTypes);

        Task<List<BasketContract>> GetBasketsByBasketTypesAsync(List<BasketTypes> basketTypes);

        /// <summary>
        /// Get basket symbols
        /// </summary>
        /// <param name="basketId">Basket ID</param>
        /// <returns>Basket Symbol contracts</returns>
        List<BasketSymbolContract> GetBasketSymbols(int basketId);

        /// <summary>
        /// Get basket symbols
        /// </summary>
        /// <param name="basketId">Basket ID</param>
        /// <returns>Basket Symbol contracts</returns>
        Task<List<BasketSymbolContract>> GetBasketSymbolsAsync(int basketId);

        List<BasketSymbolContract> GetMultipleBasketSymbols(List<int> basketIds);

        Task<List<BasketSymbolContract>> GetMultipleBasketSymbolsAsync(List<int> basketIds);

        /// <summary>
        /// Create basket
        /// </summary>
        /// <param name="createContract">Parameters to create basket</param>
        /// <returns>Created basket.</returns>
        BasketContract CreateBasket(CreateBasketContract createContract);

        /// <summary>
        /// Create basket
        /// </summary>
        /// <param name="createContract">Parameters to create basket</param>
        /// <returns>Created basket.</returns>
        Task<BasketContract> CreateBasketAsync(CreateBasketContract createContract);

        /// <summary>
        /// Edit basket
        /// </summary>
        /// <param name="basketId">Basket ID.</param>
        /// <param name="editContract">Parameters to edit basket.</param>
        /// <returns>Basket contract.</returns>
        BasketContract EditBasket(int basketId, EditBasketContract editContract);

        /// <summary>
        /// Edit basket
        /// </summary>
        /// <param name="basketId">Basket ID.</param>
        /// <param name="editContract">Parameters to edit basket.</param>
        /// <returns>Basket contract.</returns>
        Task<BasketContract> EditBasketAsync(int basketId, EditBasketContract editContract);

        List<BasketSymbolContract> CreateBasketSymbols(int basketId, List<int> symbolIds);

        Task<List<BasketSymbolContract>> CreateBasketSymbolsAsync(int basketId, List<int> symbolIds);

        void DeleteUserBasket(List<int> basketIds);

        Task DeleteUserBasketAsync(List<int> basketIds);

        void DeleteBasketSymbols(int basketId, List<int> basketSymbolIds);

        Task DeleteBasketSymbolsAsync(int basketId, List<int> basketSymbolIds);
    }

    public interface IBasketsClientByOrganizationApiMethods
    {
    }

    public partial interface IBasketsClient : IBasketsClientByLicenseKeyApiMethods, IClientByLicenseKey<IBasketsClient, IBasketsClientForUser, IBasketsClientForOrganization>
    {
    }

    public interface IBasketsClientForUser : IBasketsClientByContextKeyApiMethods, IClientByContext<IBasketsClientForUser, IBasketsClientForOrganization>
    {
    }

    public interface IBasketsClientForOrganization : IBasketsClientByOrganizationApiMethods
    {
    }

    public partial class BasketsClient : BaseClient<IBasketsClient, IBasketsClientForUser, IBasketsClientForOrganization, BasketsClient>, IBasketsClient, IBasketsClientForUser, IBasketsClientForOrganization
    {
        /// <summary>
        /// Get list of all available for user baskets.
        /// </summary>
        /// <returns>The method returns list of user's baskets.</returns>
        public List<BasketContract> GetAllAvailableBaskets()
        {
            var request = new RequestData
            {
                Url = $"baskets/get-all-available-baskets",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<BasketContract>>(request);
        }

        /// <summary>
        /// Get list of all available for user baskets.
        /// </summary>
        /// <returns>The method returns list of user's baskets.</returns>
        public async Task<List<BasketContract>> GetAllAvailableBasketsAsync()
        {
            var request = new RequestData
            {
                Url = $"baskets/get-all-available-baskets",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<BasketContract>>(request);
        }

        /// <summary>
        /// Get basket
        /// </summary>
        /// <param name="basketId">Basket ID</param>
        /// <returns>Basket contract</returns>
        public BasketContract GetBasket(int basketId)
        {
            var request = new RequestData
            {
                Url = $"baskets/{basketId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<BasketContract>(request);
        }

        /// <summary>
        /// Get basket
        /// </summary>
        /// <param name="basketId">Basket ID</param>
        /// <returns>Basket contract</returns>
        public async Task<BasketContract> GetBasketAsync(int basketId)
        {
            var request = new RequestData
            {
                Url = $"baskets/{basketId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<BasketContract>(request);
        }

        public List<BasketContract> GetBasketsByBasketTypes(List<BasketTypes> basketTypes)
        {
            var request = new RequestData
            {
                Url = $"baskets/get-by-basket-types",
                Method = HttpMethod.Post,
            };

            request.SetBody(basketTypes);

            return PerformRequest<List<BasketContract>>(request);
        }

        public async Task<List<BasketContract>> GetBasketsByBasketTypesAsync(List<BasketTypes> basketTypes)
        {
            var request = new RequestData
            {
                Url = $"baskets/get-by-basket-types",
                Method = HttpMethod.Post,
            };

            request.SetBody(basketTypes);

            return await PerformRequestAsync<List<BasketContract>>(request);
        }

        /// <summary>
        /// Get basket symbols
        /// </summary>
        /// <param name="basketId">Basket ID</param>
        /// <returns>Basket Symbol contracts</returns>
        public List<BasketSymbolContract> GetBasketSymbols(int basketId)
        {
            var request = new RequestData
            {
                Url = $"baskets/get-basket-symbols/{basketId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<BasketSymbolContract>>(request);
        }

        /// <summary>
        /// Get basket symbols
        /// </summary>
        /// <param name="basketId">Basket ID</param>
        /// <returns>Basket Symbol contracts</returns>
        public async Task<List<BasketSymbolContract>> GetBasketSymbolsAsync(int basketId)
        {
            var request = new RequestData
            {
                Url = $"baskets/get-basket-symbols/{basketId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<BasketSymbolContract>>(request);
        }

        public List<BasketSymbolContract> GetMultipleBasketSymbols(List<int> basketIds)
        {
            var request = new RequestData
            {
                Url = $"baskets/get-multiple-basket-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(basketIds);

            return PerformRequest<List<BasketSymbolContract>>(request);
        }

        public async Task<List<BasketSymbolContract>> GetMultipleBasketSymbolsAsync(List<int> basketIds)
        {
            var request = new RequestData
            {
                Url = $"baskets/get-multiple-basket-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(basketIds);

            return await PerformRequestAsync<List<BasketSymbolContract>>(request);
        }

        /// <summary>
        /// Create basket
        /// </summary>
        /// <param name="createContract">Parameters to create basket</param>
        /// <returns>Created basket.</returns>
        public BasketContract CreateBasket(CreateBasketContract createContract)
        {
            var request = new RequestData
            {
                Url = $"baskets",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return PerformRequest<BasketContract>(request);
        }

        /// <summary>
        /// Create basket
        /// </summary>
        /// <param name="createContract">Parameters to create basket</param>
        /// <returns>Created basket.</returns>
        public async Task<BasketContract> CreateBasketAsync(CreateBasketContract createContract)
        {
            var request = new RequestData
            {
                Url = $"baskets",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return await PerformRequestAsync<BasketContract>(request);
        }

        /// <summary>
        /// Edit basket
        /// </summary>
        /// <param name="basketId">Basket ID.</param>
        /// <param name="editContract">Parameters to edit basket.</param>
        /// <returns>Basket contract.</returns>
        public BasketContract EditBasket(int basketId, EditBasketContract editContract)
        {
            var request = new RequestData
            {
                Url = $"baskets/{basketId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContract);

            return PerformRequest<BasketContract>(request);
        }

        /// <summary>
        /// Edit basket
        /// </summary>
        /// <param name="basketId">Basket ID.</param>
        /// <param name="editContract">Parameters to edit basket.</param>
        /// <returns>Basket contract.</returns>
        public async Task<BasketContract> EditBasketAsync(int basketId, EditBasketContract editContract)
        {
            var request = new RequestData
            {
                Url = $"baskets/{basketId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContract);

            return await PerformRequestAsync<BasketContract>(request);
        }

        public List<BasketSymbolContract> CreateBasketSymbols(int basketId, List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"baskets/create-basket-symbols/{basketId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<BasketSymbolContract>>(request);
        }

        public async Task<List<BasketSymbolContract>> CreateBasketSymbolsAsync(int basketId, List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"baskets/create-basket-symbols/{basketId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<BasketSymbolContract>>(request);
        }

        public void DeleteUserBasket(List<int> basketIds)
        {
            var request = new RequestData
            {
                Url = $"baskets",
                Method = HttpMethod.Delete,
            };

            request.SetBody(basketIds);

            PerformRequest(request);
        }

        public async Task DeleteUserBasketAsync(List<int> basketIds)
        {
            var request = new RequestData
            {
                Url = $"baskets",
                Method = HttpMethod.Delete,
            };

            request.SetBody(basketIds);

            await PerformRequestAsync(request);
        }

        public void DeleteBasketSymbols(int basketId, List<int> basketSymbolIds)
        {
            var request = new RequestData
            {
                Url = $"baskets/delete-basket-symbols/{basketId}",
                Method = HttpMethod.Delete,
            };

            request.SetBody(basketSymbolIds);

            PerformRequest(request);
        }

        public async Task DeleteBasketSymbolsAsync(int basketId, List<int> basketSymbolIds)
        {
            var request = new RequestData
            {
                Url = $"baskets/delete-basket-symbols/{basketId}",
                Method = HttpMethod.Delete,
            };

            request.SetBody(basketSymbolIds);

            await PerformRequestAsync(request);
        }

        public List<int> GetSystemBasketSymbolIds(List<BasketTypes> basketTypes)
        {
            var request = new RequestData
            {
                Url = $"baskets/get-system-basket-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(basketTypes);

            return PerformRequest<List<int>>(request);
        }

        public async Task<List<int>> GetSystemBasketSymbolIdsAsync(List<BasketTypes> basketTypes)
        {
            var request = new RequestData
            {
                Url = $"baskets/get-system-basket-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(basketTypes);

            return await PerformRequestAsync<List<int>>(request);
        }
    }

    public interface IBehavioralDataClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get list of most popular tickers.
        /// </summary>
        /// <param name="maximumNumberOfTickers">Maximum number of tickers to return</param>
        /// <returns>The method returns most popular tickers.</returns>
        List<MostPopularTickerContract> GetMostPopularTickers(int maximumNumberOfTickers);

        /// <summary>
        /// Get list of most popular tickers.
        /// </summary>
        /// <param name="maximumNumberOfTickers">Maximum number of tickers to return</param>
        /// <returns>The method returns most popular tickers.</returns>
        Task<List<MostPopularTickerContract>> GetMostPopularTickersAsync(int maximumNumberOfTickers);

        /// <summary>
        /// Get list of most popular tickers.
        /// </summary>
        /// <param name="contract">Parameters for getting most popular tickers</param>
        /// <returns>The method returns most popular tickers.</returns>
        List<MostPopularTickerContract> GetTopTickers(GetMostPopularTickersContract contract);

        /// <summary>
        /// Get list of most popular tickers.
        /// </summary>
        /// <param name="contract">Parameters for getting most popular tickers</param>
        /// <returns>The method returns most popular tickers.</returns>
        Task<List<MostPopularTickerContract>> GetTopTickersAsync(GetMostPopularTickersContract contract);
    }

    public interface IBehavioralDataClientByContextKeyApiMethods : IBehavioralDataClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create behavioral event.
        /// </summary>
        /// <param name="contract">Create behavioral event contract.</param>
        /// <returns>The method returns HTTP status code 200 after the behaviour event creating.</returns>
        void CreateBehavioralEvent(CreateBehavioralEventContract contract);

        /// <summary>
        /// Create behavioral event.
        /// </summary>
        /// <param name="contract">Create behavioral event contract.</param>
        /// <returns>The method returns HTTP status code 200 after the behaviour event creating.</returns>
        Task CreateBehavioralEventAsync(CreateBehavioralEventContract contract);

        void CreateBehavioralEvents(List<CreateBehavioralEventContract> contracts);

        Task CreateBehavioralEventsAsync(List<CreateBehavioralEventContract> contracts);

        /// <summary>
        /// Create behavioral event immediately without batching
        /// </summary>
        /// <param name="contract">Create behavioral event contract.</param>
        /// <returns>The method returns HTTP status code 200 after the behaviour event creating.</returns>
        void CreateBehavioralEventImmediately(CreateBehavioralEventContract contract);

        /// <summary>
        /// Create behavioral event immediately without batching
        /// </summary>
        /// <param name="contract">Create behavioral event contract.</param>
        /// <returns>The method returns HTTP status code 200 after the behaviour event creating.</returns>
        Task CreateBehavioralEventImmediatelyAsync(CreateBehavioralEventContract contract);

        /// <summary>
        /// Track ticker.
        /// </summary>
        /// <param name="contract">Parameters to track ticker.</param>
        /// <returns>The method returns HTTP status code 200 after the tracking of the ticker.</returns>
        void TrackTicker(TrackTickerContract contract);

        /// <summary>
        /// Track ticker.
        /// </summary>
        /// <param name="contract">Parameters to track ticker.</param>
        /// <returns>The method returns HTTP status code 200 after the tracking of the ticker.</returns>
        Task TrackTickerAsync(TrackTickerContract contract);

        void TrackTickers(List<TrackTickerContract> contracts);

        Task TrackTickersAsync(List<TrackTickerContract> contracts);
    }

    public interface IBehavioralDataClientByOrganizationApiMethods
    {
    }

    public partial interface IBehavioralDataClient : IBehavioralDataClientByLicenseKeyApiMethods, IClientByLicenseKey<IBehavioralDataClient, IBehavioralDataClientForUser, IBehavioralDataClientForOrganization>
    {
    }

    public interface IBehavioralDataClientForUser : IBehavioralDataClientByContextKeyApiMethods, IClientByContext<IBehavioralDataClientForUser, IBehavioralDataClientForOrganization>
    {
    }

    public interface IBehavioralDataClientForOrganization : IBehavioralDataClientByOrganizationApiMethods
    {
    }

    public partial class BehavioralDataClient : BaseClient<IBehavioralDataClient, IBehavioralDataClientForUser, IBehavioralDataClientForOrganization, BehavioralDataClient>, IBehavioralDataClient, IBehavioralDataClientForUser, IBehavioralDataClientForOrganization
    {
        /// <summary>
        /// Create behavioral event.
        /// </summary>
        /// <param name="contract">Create behavioral event contract.</param>
        /// <returns>The method returns HTTP status code 200 after the behaviour event creating.</returns>
        public void CreateBehavioralEvent(CreateBehavioralEventContract contract)
        {
            var request = new RequestData
            {
                Url = $"behavioral/create-event",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Create behavioral event.
        /// </summary>
        /// <param name="contract">Create behavioral event contract.</param>
        /// <returns>The method returns HTTP status code 200 after the behaviour event creating.</returns>
        public async Task CreateBehavioralEventAsync(CreateBehavioralEventContract contract)
        {
            var request = new RequestData
            {
                Url = $"behavioral/create-event",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public void CreateBehavioralEvents(List<CreateBehavioralEventContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"behavioral/create-events",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            PerformRequest(request);
        }

        public async Task CreateBehavioralEventsAsync(List<CreateBehavioralEventContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"behavioral/create-events",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Create behavioral event immediately without batching
        /// </summary>
        /// <param name="contract">Create behavioral event contract.</param>
        /// <returns>The method returns HTTP status code 200 after the behaviour event creating.</returns>
        public void CreateBehavioralEventImmediately(CreateBehavioralEventContract contract)
        {
            var request = new RequestData
            {
                Url = $"behavioral/create-event-immediately",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Create behavioral event immediately without batching
        /// </summary>
        /// <param name="contract">Create behavioral event contract.</param>
        /// <returns>The method returns HTTP status code 200 after the behaviour event creating.</returns>
        public async Task CreateBehavioralEventImmediatelyAsync(CreateBehavioralEventContract contract)
        {
            var request = new RequestData
            {
                Url = $"behavioral/create-event-immediately",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Track ticker.
        /// </summary>
        /// <param name="contract">Parameters to track ticker.</param>
        /// <returns>The method returns HTTP status code 200 after the tracking of the ticker.</returns>
        public void TrackTicker(TrackTickerContract contract)
        {
            var request = new RequestData
            {
                Url = $"behavioral/track-ticker",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Track ticker.
        /// </summary>
        /// <param name="contract">Parameters to track ticker.</param>
        /// <returns>The method returns HTTP status code 200 after the tracking of the ticker.</returns>
        public async Task TrackTickerAsync(TrackTickerContract contract)
        {
            var request = new RequestData
            {
                Url = $"behavioral/track-ticker",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public void TrackTickers(List<TrackTickerContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"behavioral/track-tickers",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            PerformRequest(request);
        }

        public async Task TrackTickersAsync(List<TrackTickerContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"behavioral/track-tickers",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get list of most popular tickers.
        /// </summary>
        /// <param name="maximumNumberOfTickers">Maximum number of tickers to return</param>
        /// <returns>The method returns most popular tickers.</returns>
        public List<MostPopularTickerContract> GetMostPopularTickers(int maximumNumberOfTickers)
        {
            var request = new RequestData
            {
                Url = $"behavioral/get-most-popular-tickers/{maximumNumberOfTickers}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<MostPopularTickerContract>>(request);
        }

        /// <summary>
        /// Get list of most popular tickers.
        /// </summary>
        /// <param name="maximumNumberOfTickers">Maximum number of tickers to return</param>
        /// <returns>The method returns most popular tickers.</returns>
        public async Task<List<MostPopularTickerContract>> GetMostPopularTickersAsync(int maximumNumberOfTickers)
        {
            var request = new RequestData
            {
                Url = $"behavioral/get-most-popular-tickers/{maximumNumberOfTickers}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<MostPopularTickerContract>>(request);
        }

        /// <summary>
        /// Get list of most popular tickers.
        /// </summary>
        /// <param name="contract">Parameters for getting most popular tickers</param>
        /// <returns>The method returns most popular tickers.</returns>
        public List<MostPopularTickerContract> GetTopTickers(GetMostPopularTickersContract contract)
        {
            var request = new RequestData
            {
                Url = $"behavioral/get-top-tickers",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<MostPopularTickerContract>>(request);
        }

        /// <summary>
        /// Get list of most popular tickers.
        /// </summary>
        /// <param name="contract">Parameters for getting most popular tickers</param>
        /// <returns>The method returns most popular tickers.</returns>
        public async Task<List<MostPopularTickerContract>> GetTopTickersAsync(GetMostPopularTickersContract contract)
        {
            var request = new RequestData
            {
                Url = $"behavioral/get-top-tickers",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<MostPopularTickerContract>>(request);
        }
    }

    public interface IBrokerPillsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// The method returns the information about the created alert template based on the selected position.
        /// </summary>
        /// <returns>The method returns an array of broker pills.</returns>
        List<BrokerPillContract> GetAll();

        /// <summary>
        /// The method returns the information about the created alert template based on the selected position.
        /// </summary>
        /// <returns>The method returns an array of broker pills.</returns>
        Task<List<BrokerPillContract>> GetAllAsync();
    }

    public interface IBrokerPillsClientByContextKeyApiMethods : IBrokerPillsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get all financial institutions assigned to the selected broker pill.
        /// </summary>
        /// <param name="brokerPillId">Broker pill Id.</param>
        /// <returns>The method returns an array of financial institutions assigned to the selected broker pill .</returns>
        List<FinancialInstitutionContract> GetFinancialInstitutions(int brokerPillId);

        /// <summary>
        /// Get all financial institutions assigned to the selected broker pill.
        /// </summary>
        /// <param name="brokerPillId">Broker pill Id.</param>
        /// <returns>The method returns an array of financial institutions assigned to the selected broker pill .</returns>
        Task<List<FinancialInstitutionContract>> GetFinancialInstitutionsAsync(int brokerPillId);
    }

    public interface IBrokerPillsClientByOrganizationApiMethods
    {
    }

    public partial interface IBrokerPillsClient : IBrokerPillsClientByLicenseKeyApiMethods, IClientByLicenseKey<IBrokerPillsClient, IBrokerPillsClientForUser, IBrokerPillsClientForOrganization>
    {
    }

    public interface IBrokerPillsClientForUser : IBrokerPillsClientByContextKeyApiMethods, IClientByContext<IBrokerPillsClientForUser, IBrokerPillsClientForOrganization>
    {
    }

    public interface IBrokerPillsClientForOrganization : IBrokerPillsClientByOrganizationApiMethods
    {
    }

    public partial class BrokerPillsClient : BaseClient<IBrokerPillsClient, IBrokerPillsClientForUser, IBrokerPillsClientForOrganization, BrokerPillsClient>, IBrokerPillsClient, IBrokerPillsClientForUser, IBrokerPillsClientForOrganization
    {
        /// <summary>
        /// The method returns the information about the created alert template based on the selected position.
        /// </summary>
        /// <returns>The method returns an array of broker pills.</returns>
        public List<BrokerPillContract> GetAll()
        {
            var request = new RequestData
            {
                Url = $"broker-pills/all",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<BrokerPillContract>>(request);
        }

        /// <summary>
        /// The method returns the information about the created alert template based on the selected position.
        /// </summary>
        /// <returns>The method returns an array of broker pills.</returns>
        public async Task<List<BrokerPillContract>> GetAllAsync()
        {
            var request = new RequestData
            {
                Url = $"broker-pills/all",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<BrokerPillContract>>(request);
        }

        /// <summary>
        /// Get all financial institutions assigned to the selected broker pill.
        /// </summary>
        /// <param name="brokerPillId">Broker pill Id.</param>
        /// <returns>The method returns an array of financial institutions assigned to the selected broker pill .</returns>
        public List<FinancialInstitutionContract> GetFinancialInstitutions(int brokerPillId)
        {
            var request = new RequestData
            {
                Url = $"broker-pills/get-financial-institutions/{brokerPillId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<FinancialInstitutionContract>>(request);
        }

        /// <summary>
        /// Get all financial institutions assigned to the selected broker pill.
        /// </summary>
        /// <param name="brokerPillId">Broker pill Id.</param>
        /// <returns>The method returns an array of financial institutions assigned to the selected broker pill .</returns>
        public async Task<List<FinancialInstitutionContract>> GetFinancialInstitutionsAsync(int brokerPillId)
        {
            var request = new RequestData
            {
                Url = $"broker-pills/get-financial-institutions/{brokerPillId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<FinancialInstitutionContract>>(request);
        }
    }

    public interface IChartsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get available chart items by symbol ID according to the trade type for prices adjusted or not adjusted by dividends.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeType">Position Trade type.</param>
        /// <param name="adjustByDividends">Determines if the prices on charts adjusted by dividends.</param>
        /// <returns>The method returns an array of chart items that are available for the requested symbol.</returns>
        List<ChartItemTypes> GetAvailablePriceChartItems(int symbolId, TradeTypes tradeType, bool adjustByDividends);

        /// <summary>
        /// Get available chart items by symbol ID according to the trade type for prices adjusted or not adjusted by dividends.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeType">Position Trade type.</param>
        /// <param name="adjustByDividends">Determines if the prices on charts adjusted by dividends.</param>
        /// <returns>The method returns an array of chart items that are available for the requested symbol.</returns>
        Task<List<ChartItemTypes>> GetAvailablePriceChartItemsAsync(int symbolId, TradeTypes tradeType, bool adjustByDividends);

        /// <summary>
        /// Get the list of available chart items for Pure Quant Indicator.
        /// </summary>
        /// <returns>The method returns an array of chart items that are available for Pure Quant Indicator.</returns>
        List<ChartItemTypes> GetAvailablePureQuantIndicatorChartItems();

        /// <summary>
        /// Get the list of available chart items for Pure Quant Indicator.
        /// </summary>
        /// <returns>The method returns an array of chart items that are available for Pure Quant Indicator.</returns>
        Task<List<ChartItemTypes>> GetAvailablePureQuantIndicatorChartItemsAsync();

        /// <summary>
        /// Get the info of the selected symbol used for building a chart.
        /// </summary>
        /// <param name="chartItemsData">Chat item parameters.</param>
        /// <returns>The method returns chart items used for building a chart.</returns>
        PriceChartDataContract GetChartItemsForSymbol(GetChartItemsForSymbolContract chartItemsData);

        /// <summary>
        /// Get the info of the selected symbol used for building a chart.
        /// </summary>
        /// <param name="chartItemsData">Chat item parameters.</param>
        /// <returns>The method returns chart items used for building a chart.</returns>
        Task<PriceChartDataContract> GetChartItemsForSymbolAsync(GetChartItemsForSymbolContract chartItemsData);

        /// <summary>
        /// Get the info for building the Pure Quant Indicator chart.
        /// </summary>
        /// <param name="chartItemsData">Chat parameters.</param>
        /// <returns>The method returns chart items used for building the Pure Quant Indicator chart.</returns>
        ValueChartDataContract GetPureQuantIndicatorChartItems(GetPureQuantIndicatorChartItemsContract chartItemsData);

        /// <summary>
        /// Get the info for building the Pure Quant Indicator chart.
        /// </summary>
        /// <param name="chartItemsData">Chat parameters.</param>
        /// <returns>The method returns chart items used for building the Pure Quant Indicator chart.</returns>
        Task<ValueChartDataContract> GetPureQuantIndicatorChartItemsAsync(GetPureQuantIndicatorChartItemsContract chartItemsData);

        /// <summary>
        /// Get predicted price chart items.
        /// </summary>
        /// <param name="contract">Params to predict prices</param>
        /// <returns>Predicted prices.</returns>
        PredictedPriceChartContract GetPredictedPriceChartItems(GetPredictedPriceChartContract contract);

        /// <summary>
        /// Get predicted price chart items.
        /// </summary>
        /// <param name="contract">Params to predict prices</param>
        /// <returns>Predicted prices.</returns>
        Task<PredictedPriceChartContract> GetPredictedPriceChartItemsAsync(GetPredictedPriceChartContract contract);
    }

    public interface IChartsClientByContextKeyApiMethods : IChartsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the list of available chart items by the position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of chart items that are available for the requested position.</returns>
        List<ChartItemTypes> GetAvailablePriceChartItemsByPosition(int positionId);

        /// <summary>
        /// Get the list of available chart items by the position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of chart items that are available for the requested position.</returns>
        Task<List<ChartItemTypes>> GetAvailablePriceChartItemsByPositionAsync(int positionId);

        /// <summary>
        /// Get available chart items by symbol ID according to the trade type for prices adjusted or not adjusted by dividends.
        /// Filtering of available chart items is applied according to user's subscription.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeType">Position Trade type.</param>
        /// <param name="adjustByDividends">Determines if the prices on charts adjusted by dividends.</param>
        /// <returns>The method returns an array of chart items that are available for the requested symbol.</returns>
        List<ChartItemTypes> GetAvailablePriceChartItemsBySymbolForUser(int symbolId, TradeTypes tradeType, bool adjustByDividends);

        /// <summary>
        /// Get available chart items by symbol ID according to the trade type for prices adjusted or not adjusted by dividends.
        /// Filtering of available chart items is applied according to user's subscription.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeType">Position Trade type.</param>
        /// <param name="adjustByDividends">Determines if the prices on charts adjusted by dividends.</param>
        /// <returns>The method returns an array of chart items that are available for the requested symbol.</returns>
        Task<List<ChartItemTypes>> GetAvailablePriceChartItemsBySymbolForUserAsync(int symbolId, TradeTypes tradeType, bool adjustByDividends);

        /// <summary>
        /// Get the info of the selected position item used for building a chart.
        /// </summary>
        /// <param name="chartItemsData">Chart parameters</param>
        /// <returns>The method returns the item information used in the position chart.</returns>
        PriceChartDataContract GetChartItemsForPosition(GetChartItemsForPositionContract chartItemsData);

        /// <summary>
        /// Get the info of the selected position item used for building a chart.
        /// </summary>
        /// <param name="chartItemsData">Chart parameters</param>
        /// <returns>The method returns the item information used in the position chart.</returns>
        Task<PriceChartDataContract> GetChartItemsForPositionAsync(GetChartItemsForPositionContract chartItemsData);
    }

    public interface IChartsClientByOrganizationApiMethods
    {
    }

    public partial interface IChartsClient : IChartsClientByLicenseKeyApiMethods, IClientByLicenseKey<IChartsClient, IChartsClientForUser, IChartsClientForOrganization>
    {
    }

    public interface IChartsClientForUser : IChartsClientByContextKeyApiMethods, IClientByContext<IChartsClientForUser, IChartsClientForOrganization>
    {
    }

    public interface IChartsClientForOrganization : IChartsClientByOrganizationApiMethods
    {
    }

    public partial class ChartsClient : BaseClient<IChartsClient, IChartsClientForUser, IChartsClientForOrganization, ChartsClient>, IChartsClient, IChartsClientForUser, IChartsClientForOrganization
    {
        /// <summary>
        /// Get the list of available chart items by the position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of chart items that are available for the requested position.</returns>
        public List<ChartItemTypes> GetAvailablePriceChartItemsByPosition(int positionId)
        {
            var request = new RequestData
            {
                Url = $"charts/available-price-chart-legend-items/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ChartItemTypes>>(request);
        }

        /// <summary>
        /// Get the list of available chart items by the position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of chart items that are available for the requested position.</returns>
        public async Task<List<ChartItemTypes>> GetAvailablePriceChartItemsByPositionAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"charts/available-price-chart-legend-items/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ChartItemTypes>>(request);
        }

        /// <summary>
        /// Get available chart items by symbol ID according to the trade type for prices adjusted or not adjusted by dividends.
        /// Filtering of available chart items is applied according to user's subscription.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeType">Position Trade type.</param>
        /// <param name="adjustByDividends">Determines if the prices on charts adjusted by dividends.</param>
        /// <returns>The method returns an array of chart items that are available for the requested symbol.</returns>
        public List<ChartItemTypes> GetAvailablePriceChartItemsBySymbolForUser(int symbolId, TradeTypes tradeType, bool adjustByDividends)
        {
            var request = new RequestData
            {
                Url = $"charts/available-price-chart-legend-items/for-user/{symbolId}/{tradeType}/{adjustByDividends}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ChartItemTypes>>(request);
        }

        /// <summary>
        /// Get available chart items by symbol ID according to the trade type for prices adjusted or not adjusted by dividends.
        /// Filtering of available chart items is applied according to user's subscription.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeType">Position Trade type.</param>
        /// <param name="adjustByDividends">Determines if the prices on charts adjusted by dividends.</param>
        /// <returns>The method returns an array of chart items that are available for the requested symbol.</returns>
        public async Task<List<ChartItemTypes>> GetAvailablePriceChartItemsBySymbolForUserAsync(int symbolId, TradeTypes tradeType, bool adjustByDividends)
        {
            var request = new RequestData
            {
                Url = $"charts/available-price-chart-legend-items/for-user/{symbolId}/{tradeType}/{adjustByDividends}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ChartItemTypes>>(request);
        }

        /// <summary>
        /// Get available chart items by symbol ID according to the trade type for prices adjusted or not adjusted by dividends.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeType">Position Trade type.</param>
        /// <param name="adjustByDividends">Determines if the prices on charts adjusted by dividends.</param>
        /// <returns>The method returns an array of chart items that are available for the requested symbol.</returns>
        public List<ChartItemTypes> GetAvailablePriceChartItems(int symbolId, TradeTypes tradeType, bool adjustByDividends)
        {
            var request = new RequestData
            {
                Url = $"charts/available-price-chart-legend-items/{symbolId}/{tradeType}/{adjustByDividends}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ChartItemTypes>>(request);
        }

        /// <summary>
        /// Get available chart items by symbol ID according to the trade type for prices adjusted or not adjusted by dividends.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeType">Position Trade type.</param>
        /// <param name="adjustByDividends">Determines if the prices on charts adjusted by dividends.</param>
        /// <returns>The method returns an array of chart items that are available for the requested symbol.</returns>
        public async Task<List<ChartItemTypes>> GetAvailablePriceChartItemsAsync(int symbolId, TradeTypes tradeType, bool adjustByDividends)
        {
            var request = new RequestData
            {
                Url = $"charts/available-price-chart-legend-items/{symbolId}/{tradeType}/{adjustByDividends}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ChartItemTypes>>(request);
        }

        /// <summary>
        /// Get the list of available chart items for Pure Quant Indicator.
        /// </summary>
        /// <returns>The method returns an array of chart items that are available for Pure Quant Indicator.</returns>
        public List<ChartItemTypes> GetAvailablePureQuantIndicatorChartItems()
        {
            var request = new RequestData
            {
                Url = $"charts/available-pure-quant-indicator-chart-legend-items",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ChartItemTypes>>(request);
        }

        /// <summary>
        /// Get the list of available chart items for Pure Quant Indicator.
        /// </summary>
        /// <returns>The method returns an array of chart items that are available for Pure Quant Indicator.</returns>
        public async Task<List<ChartItemTypes>> GetAvailablePureQuantIndicatorChartItemsAsync()
        {
            var request = new RequestData
            {
                Url = $"charts/available-pure-quant-indicator-chart-legend-items",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ChartItemTypes>>(request);
        }

        /// <summary>
        /// Get the info of the selected position item used for building a chart.
        /// </summary>
        /// <param name="chartItemsData">Chart parameters</param>
        /// <returns>The method returns the item information used in the position chart.</returns>
        public PriceChartDataContract GetChartItemsForPosition(GetChartItemsForPositionContract chartItemsData)
        {
            var request = new RequestData
            {
                Url = $"charts/get-chart-items-for-position",
                Method = HttpMethod.Post,
            };

            request.SetBody(chartItemsData);

            return PerformRequest<PriceChartDataContract>(request);
        }

        /// <summary>
        /// Get the info of the selected position item used for building a chart.
        /// </summary>
        /// <param name="chartItemsData">Chart parameters</param>
        /// <returns>The method returns the item information used in the position chart.</returns>
        public async Task<PriceChartDataContract> GetChartItemsForPositionAsync(GetChartItemsForPositionContract chartItemsData)
        {
            var request = new RequestData
            {
                Url = $"charts/get-chart-items-for-position",
                Method = HttpMethod.Post,
            };

            request.SetBody(chartItemsData);

            return await PerformRequestAsync<PriceChartDataContract>(request);
        }

        /// <summary>
        /// Get the info of the selected symbol used for building a chart.
        /// </summary>
        /// <param name="chartItemsData">Chat item parameters.</param>
        /// <returns>The method returns chart items used for building a chart.</returns>
        public PriceChartDataContract GetChartItemsForSymbol(GetChartItemsForSymbolContract chartItemsData)
        {
            var request = new RequestData
            {
                Url = $"charts/get-chart-items-for-symbol",
                Method = HttpMethod.Post,
            };

            request.SetBody(chartItemsData);

            return PerformRequest<PriceChartDataContract>(request);
        }

        /// <summary>
        /// Get the info of the selected symbol used for building a chart.
        /// </summary>
        /// <param name="chartItemsData">Chat item parameters.</param>
        /// <returns>The method returns chart items used for building a chart.</returns>
        public async Task<PriceChartDataContract> GetChartItemsForSymbolAsync(GetChartItemsForSymbolContract chartItemsData)
        {
            var request = new RequestData
            {
                Url = $"charts/get-chart-items-for-symbol",
                Method = HttpMethod.Post,
            };

            request.SetBody(chartItemsData);

            return await PerformRequestAsync<PriceChartDataContract>(request);
        }

        /// <summary>
        /// Get the info for building the Pure Quant Indicator chart.
        /// </summary>
        /// <param name="chartItemsData">Chat parameters.</param>
        /// <returns>The method returns chart items used for building the Pure Quant Indicator chart.</returns>
        public ValueChartDataContract GetPureQuantIndicatorChartItems(GetPureQuantIndicatorChartItemsContract chartItemsData)
        {
            var request = new RequestData
            {
                Url = $"charts/get-pure-quant-indicator-chart-items",
                Method = HttpMethod.Post,
            };

            request.SetBody(chartItemsData);

            return PerformRequest<ValueChartDataContract>(request);
        }

        /// <summary>
        /// Get the info for building the Pure Quant Indicator chart.
        /// </summary>
        /// <param name="chartItemsData">Chat parameters.</param>
        /// <returns>The method returns chart items used for building the Pure Quant Indicator chart.</returns>
        public async Task<ValueChartDataContract> GetPureQuantIndicatorChartItemsAsync(GetPureQuantIndicatorChartItemsContract chartItemsData)
        {
            var request = new RequestData
            {
                Url = $"charts/get-pure-quant-indicator-chart-items",
                Method = HttpMethod.Post,
            };

            request.SetBody(chartItemsData);

            return await PerformRequestAsync<ValueChartDataContract>(request);
        }

        /// <summary>
        /// Get predicted price chart items.
        /// </summary>
        /// <param name="contract">Params to predict prices</param>
        /// <returns>Predicted prices.</returns>
        public PredictedPriceChartContract GetPredictedPriceChartItems(GetPredictedPriceChartContract contract)
        {
            var request = new RequestData
            {
                Url = $"charts/get-predicted-price-chart-items",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PredictedPriceChartContract>(request);
        }

        /// <summary>
        /// Get predicted price chart items.
        /// </summary>
        /// <param name="contract">Params to predict prices</param>
        /// <returns>Predicted prices.</returns>
        public async Task<PredictedPriceChartContract> GetPredictedPriceChartItemsAsync(GetPredictedPriceChartContract contract)
        {
            var request = new RequestData
            {
                Url = $"charts/get-predicted-price-chart-items",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PredictedPriceChartContract>(request);
        }
    }

    public interface IChecklistsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Apply checklist to a symbol.
        /// </summary>
        /// <param name="contract">Parameters to apply checklist.</param>
        /// <returns>The method returns applied checklist results</returns>
        ApplyChecklistResultContract ApplyChecklist(ApplyChecklistContract contract);

        /// <summary>
        /// Apply checklist to a symbol.
        /// </summary>
        /// <param name="contract">Parameters to apply checklist.</param>
        /// <returns>The method returns applied checklist results</returns>
        Task<ApplyChecklistResultContract> ApplyChecklistAsync(ApplyChecklistContract contract);
    }

    public interface IChecklistsClientByContextKeyApiMethods : IChecklistsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get list of current user's checklists.
        /// </summary>
        /// <param name="contract">Parameters to get checklists</param>
        /// <returns>The method returns list of current user's checklists.</returns>
        List<StockFinderSearchContract> GetUserChecklists(GetUserChecklistsContract contract);

        /// <summary>
        /// Get list of current user's checklists.
        /// </summary>
        /// <param name="contract">Parameters to get checklists</param>
        /// <returns>The method returns list of current user's checklists.</returns>
        Task<List<StockFinderSearchContract>> GetUserChecklistsAsync(GetUserChecklistsContract contract);

        /// <summary>
        /// Get checklist.
        /// </summary>
        /// <param name="checklistId">Checklist ID.</param>
        /// <returns>The method returns checklist.</returns>
        StockFinderSearchContract GetChecklist(int checklistId);

        /// <summary>
        /// Get checklist.
        /// </summary>
        /// <param name="checklistId">Checklist ID.</param>
        /// <returns>The method returns checklist.</returns>
        Task<StockFinderSearchContract> GetChecklistAsync(int checklistId);

        /// <summary>
        /// Create checklist.
        /// </summary>
        /// <param name="contract">Parameters to checklist.</param>
        /// <returns>The method returns created checklist.</returns>
        StockFinderSearchContract CreateChecklist(CreateStockFinderSearchContract contract);

        /// <summary>
        /// Create checklist.
        /// </summary>
        /// <param name="contract">Parameters to checklist.</param>
        /// <returns>The method returns created checklist.</returns>
        Task<StockFinderSearchContract> CreateChecklistAsync(CreateStockFinderSearchContract contract);

        StockFinderSearchContract UpdateChecklist(int checklistId, CreateStockFinderSearchContract contract);

        Task<StockFinderSearchContract> UpdateChecklistAsync(int checklistId, CreateStockFinderSearchContract contract);

        void DeleteChecklists(List<int> checklistIds);

        Task DeleteChecklistsAsync(List<int> checklistIds);
    }

    public interface IChecklistsClientByOrganizationApiMethods
    {
    }

    public partial interface IChecklistsClient : IChecklistsClientByLicenseKeyApiMethods, IClientByLicenseKey<IChecklistsClient, IChecklistsClientForUser, IChecklistsClientForOrganization>
    {
    }

    public interface IChecklistsClientForUser : IChecklistsClientByContextKeyApiMethods, IClientByContext<IChecklistsClientForUser, IChecklistsClientForOrganization>
    {
    }

    public interface IChecklistsClientForOrganization : IChecklistsClientByOrganizationApiMethods
    {
    }

    public partial class ChecklistsClient : BaseClient<IChecklistsClient, IChecklistsClientForUser, IChecklistsClientForOrganization, ChecklistsClient>, IChecklistsClient, IChecklistsClientForUser, IChecklistsClientForOrganization
    {
        /// <summary>
        /// Get list of current user's checklists.
        /// </summary>
        /// <param name="contract">Parameters to get checklists</param>
        /// <returns>The method returns list of current user's checklists.</returns>
        public List<StockFinderSearchContract> GetUserChecklists(GetUserChecklistsContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/get-user-checklists",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<StockFinderSearchContract>>(request);
        }

        /// <summary>
        /// Get list of current user's checklists.
        /// </summary>
        /// <param name="contract">Parameters to get checklists</param>
        /// <returns>The method returns list of current user's checklists.</returns>
        public async Task<List<StockFinderSearchContract>> GetUserChecklistsAsync(GetUserChecklistsContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/get-user-checklists",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<StockFinderSearchContract>>(request);
        }

        /// <summary>
        /// Get checklist.
        /// </summary>
        /// <param name="checklistId">Checklist ID.</param>
        /// <returns>The method returns checklist.</returns>
        public StockFinderSearchContract GetChecklist(int checklistId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/get-checklist/{checklistId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<StockFinderSearchContract>(request);
        }

        /// <summary>
        /// Get checklist.
        /// </summary>
        /// <param name="checklistId">Checklist ID.</param>
        /// <returns>The method returns checklist.</returns>
        public async Task<StockFinderSearchContract> GetChecklistAsync(int checklistId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/get-checklist/{checklistId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<StockFinderSearchContract>(request);
        }

        /// <summary>
        /// Create checklist.
        /// </summary>
        /// <param name="contract">Parameters to checklist.</param>
        /// <returns>The method returns created checklist.</returns>
        public StockFinderSearchContract CreateChecklist(CreateStockFinderSearchContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/create-checklist",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<StockFinderSearchContract>(request);
        }

        /// <summary>
        /// Create checklist.
        /// </summary>
        /// <param name="contract">Parameters to checklist.</param>
        /// <returns>The method returns created checklist.</returns>
        public async Task<StockFinderSearchContract> CreateChecklistAsync(CreateStockFinderSearchContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/create-checklist",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<StockFinderSearchContract>(request);
        }

        public StockFinderSearchContract UpdateChecklist(int checklistId, CreateStockFinderSearchContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/update-checklist/{checklistId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<StockFinderSearchContract>(request);
        }

        public async Task<StockFinderSearchContract> UpdateChecklistAsync(int checklistId, CreateStockFinderSearchContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/update-checklist/{checklistId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<StockFinderSearchContract>(request);
        }

        /// <summary>
        /// Apply checklist to a symbol.
        /// </summary>
        /// <param name="contract">Parameters to apply checklist.</param>
        /// <returns>The method returns applied checklist results</returns>
        public ApplyChecklistResultContract ApplyChecklist(ApplyChecklistContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/apply-checklist",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<ApplyChecklistResultContract>(request);
        }

        /// <summary>
        /// Apply checklist to a symbol.
        /// </summary>
        /// <param name="contract">Parameters to apply checklist.</param>
        /// <returns>The method returns applied checklist results</returns>
        public async Task<ApplyChecklistResultContract> ApplyChecklistAsync(ApplyChecklistContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/apply-checklist",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<ApplyChecklistResultContract>(request);
        }

        public void DeleteChecklists(List<int> checklistIds)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/delete-checklists",
                Method = HttpMethod.Post,
            };

            request.SetBody(checklistIds);

            PerformRequest(request);
        }

        public async Task DeleteChecklistsAsync(List<int> checklistIds)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/checklists/delete-checklists",
                Method = HttpMethod.Post,
            };

            request.SetBody(checklistIds);

            await PerformRequestAsync(request);
        }
    }

    public interface ICommoditiesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get list of all commodities.
        /// </summary>
        /// <returns>The method returns the list of contracts with relevant data for Commodities.</returns>
        List<CommodityResultContract> GetAllCommodities();

        /// <summary>
        /// Get list of all commodities.
        /// </summary>
        /// <returns>The method returns the list of contracts with relevant data for Commodities.</returns>
        Task<List<CommodityResultContract>> GetAllCommoditiesAsync();
    }

    public interface ICommoditiesClientByContextKeyApiMethods : ICommoditiesClientByLicenseKeyApiMethods
    {
    }

    public interface ICommoditiesClientByOrganizationApiMethods
    {
    }

    public partial interface ICommoditiesClient : ICommoditiesClientByLicenseKeyApiMethods, IClientByLicenseKey<ICommoditiesClient, ICommoditiesClientForUser, ICommoditiesClientForOrganization>
    {
    }

    public interface ICommoditiesClientForUser : ICommoditiesClientByContextKeyApiMethods, IClientByContext<ICommoditiesClientForUser, ICommoditiesClientForOrganization>
    {
    }

    public interface ICommoditiesClientForOrganization : ICommoditiesClientByOrganizationApiMethods
    {
    }

    public partial class CommoditiesClient : BaseClient<ICommoditiesClient, ICommoditiesClientForUser, ICommoditiesClientForOrganization, CommoditiesClient>, ICommoditiesClient, ICommoditiesClientForUser, ICommoditiesClientForOrganization
    {
        /// <summary>
        /// Get list of all commodities.
        /// </summary>
        /// <returns>The method returns the list of contracts with relevant data for Commodities.</returns>
        public List<CommodityResultContract> GetAllCommodities()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/commodities/get-all",
                Method = HttpMethod.Post,
            };

            return PerformRequest<List<CommodityResultContract>>(request);
        }

        /// <summary>
        /// Get list of all commodities.
        /// </summary>
        /// <returns>The method returns the list of contracts with relevant data for Commodities.</returns>
        public async Task<List<CommodityResultContract>> GetAllCommoditiesAsync()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/commodities/get-all",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<List<CommodityResultContract>>(request);
        }
    }

    public interface ICorporateActionsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get Corporate Actions by Symbol ID in specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">From Date (example: /2001-01-01 ).</param>
        /// <param name="toDate">To Date (example: /2008-01-01 ).</param>
        /// <returns>The method returns Corporate Actions for requested SymbolID in specified time range.</returns>
        CorporateActionsContract Get(int symbolId, DateTime fromDate, DateTime toDate);

        /// <summary>
        /// Get Corporate Actions by Symbol ID in specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">From Date (example: /2001-01-01 ).</param>
        /// <param name="toDate">To Date (example: /2008-01-01 ).</param>
        /// <returns>The method returns Corporate Actions for requested SymbolID in specified time range.</returns>
        Task<CorporateActionsContract> GetAsync(int symbolId, DateTime fromDate, DateTime toDate);

        /// <summary>
        /// Get Announced Dividends by Symbol Id.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <returns>The method returns Announced Dividends for requested SymbolId.</returns>
        IList<AnnouncedDividendContract> GetAnnouncedDividends(int symbolId);

        /// <summary>
        /// Get Announced Dividends by Symbol Id.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <returns>The method returns Announced Dividends for requested SymbolId.</returns>
        Task<IList<AnnouncedDividendContract>> GetAnnouncedDividendsAsync(int symbolId);
    }

    public interface ICorporateActionsClientByContextKeyApiMethods : ICorporateActionsClientByLicenseKeyApiMethods
    {
    }

    public interface ICorporateActionsClientByOrganizationApiMethods
    {
    }

    public partial interface ICorporateActionsClient : ICorporateActionsClientByLicenseKeyApiMethods, IClientByLicenseKey<ICorporateActionsClient, ICorporateActionsClientForUser, ICorporateActionsClientForOrganization>
    {
    }

    public interface ICorporateActionsClientForUser : ICorporateActionsClientByContextKeyApiMethods, IClientByContext<ICorporateActionsClientForUser, ICorporateActionsClientForOrganization>
    {
    }

    public interface ICorporateActionsClientForOrganization : ICorporateActionsClientByOrganizationApiMethods
    {
    }

    public partial class CorporateActionsClient : BaseClient<ICorporateActionsClient, ICorporateActionsClientForUser, ICorporateActionsClientForOrganization, CorporateActionsClient>, ICorporateActionsClient, ICorporateActionsClientForUser, ICorporateActionsClientForOrganization
    {
        /// <summary>
        /// Get Corporate Actions by Symbol ID in specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">From Date (example: /2001-01-01 ).</param>
        /// <param name="toDate">To Date (example: /2008-01-01 ).</param>
        /// <returns>The method returns Corporate Actions for requested SymbolID in specified time range.</returns>
        public CorporateActionsContract Get(int symbolId, DateTime fromDate, DateTime toDate)
        {
            var request = new RequestData
            {
                Url = $"corporateactions/{symbolId}/{fromDate:yyyy-MM-dd}/{toDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<CorporateActionsContract>(request);
        }

        /// <summary>
        /// Get Corporate Actions by Symbol ID in specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">From Date (example: /2001-01-01 ).</param>
        /// <param name="toDate">To Date (example: /2008-01-01 ).</param>
        /// <returns>The method returns Corporate Actions for requested SymbolID in specified time range.</returns>
        public async Task<CorporateActionsContract> GetAsync(int symbolId, DateTime fromDate, DateTime toDate)
        {
            var request = new RequestData
            {
                Url = $"corporateactions/{symbolId}/{fromDate:yyyy-MM-dd}/{toDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<CorporateActionsContract>(request);
        }

        /// <summary>
        /// Get Announced Dividends by Symbol Id.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <returns>The method returns Announced Dividends for requested SymbolId.</returns>
        public IList<AnnouncedDividendContract> GetAnnouncedDividends(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"announced-dividends/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<IList<AnnouncedDividendContract>>(request);
        }

        /// <summary>
        /// Get Announced Dividends by Symbol Id.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <returns>The method returns Announced Dividends for requested SymbolId.</returns>
        public async Task<IList<AnnouncedDividendContract>> GetAnnouncedDividendsAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"announced-dividends/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<IList<AnnouncedDividendContract>>(request);
        }
    }

    public interface ICountriesClientByLicenseKeyApiMethods
    {
        CountryContract Get(int countryId);

        Task<CountryContract> GetAsync(int countryId);

        List<CountryContract> GetAll();

        Task<List<CountryContract>> GetAllAsync();
    }

    public interface ICountriesClientByContextKeyApiMethods : ICountriesClientByLicenseKeyApiMethods
    {
    }

    public interface ICountriesClientByOrganizationApiMethods
    {
    }

    public partial interface ICountriesClient : ICountriesClientByLicenseKeyApiMethods, IClientByLicenseKey<ICountriesClient, ICountriesClientForUser, ICountriesClientForOrganization>
    {
    }

    public interface ICountriesClientForUser : ICountriesClientByContextKeyApiMethods, IClientByContext<ICountriesClientForUser, ICountriesClientForOrganization>
    {
    }

    public interface ICountriesClientForOrganization : ICountriesClientByOrganizationApiMethods
    {
    }

    public partial class CountriesClient : BaseClient<ICountriesClient, ICountriesClientForUser, ICountriesClientForOrganization, CountriesClient>, ICountriesClient, ICountriesClientForUser, ICountriesClientForOrganization
    {
        public CountryContract Get(int countryId)
        {
            var request = new RequestData
            {
                Url = $"countries/{countryId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<CountryContract>(request);
        }

        public async Task<CountryContract> GetAsync(int countryId)
        {
            var request = new RequestData
            {
                Url = $"countries/{countryId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<CountryContract>(request);
        }

        public List<CountryContract> GetAll()
        {
            var request = new RequestData
            {
                Url = $"countries",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<CountryContract>>(request);
        }

        public async Task<List<CountryContract>> GetAllAsync()
        {
            var request = new RequestData
            {
                Url = $"countries",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<CountryContract>>(request);
        }
    }

    public interface ICreditCardUrlsClientByLicenseKeyApiMethods
    {
    }

    public interface ICreditCardUrlsClientByContextKeyApiMethods : ICreditCardUrlsClientByLicenseKeyApiMethods
    {
        string GetUpdateCreditCardUrl();

        Task<string> GetUpdateCreditCardUrlAsync();
    }

    public interface ICreditCardUrlsClientByOrganizationApiMethods
    {
    }

    public partial interface ICreditCardUrlsClient : ICreditCardUrlsClientByLicenseKeyApiMethods, IClientByLicenseKey<ICreditCardUrlsClient, ICreditCardUrlsClientForUser, ICreditCardUrlsClientForOrganization>
    {
    }

    public interface ICreditCardUrlsClientForUser : ICreditCardUrlsClientByContextKeyApiMethods, IClientByContext<ICreditCardUrlsClientForUser, ICreditCardUrlsClientForOrganization>
    {
    }

    public interface ICreditCardUrlsClientForOrganization : ICreditCardUrlsClientByOrganizationApiMethods
    {
    }

    public partial class CreditCardUrlsClient : BaseClient<ICreditCardUrlsClient, ICreditCardUrlsClientForUser, ICreditCardUrlsClientForOrganization, CreditCardUrlsClient>, ICreditCardUrlsClient, ICreditCardUrlsClientForUser, ICreditCardUrlsClientForOrganization
    {
        public string GetUpdateCreditCardUrl()
        {
            var request = new RequestData
            {
                Url = $"subscriptions/credit-card-url",
                Method = HttpMethod.Get,
            };

            return PerformRequest<string>(request);
        }

        public async Task<string> GetUpdateCreditCardUrlAsync()
        {
            var request = new RequestData
            {
                Url = $"subscriptions/credit-card-url",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<string>(request);
        }
    }

    public interface ICurrenciesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get a currency by its ID.
        /// </summary>
        /// <param name="currencyId">Currency ID.</param>
        /// <returns>The method returns the currency contract.</returns>
        CurrencyContract Get(int currencyId);

        /// <summary>
        /// Get a currency by its ID.
        /// </summary>
        /// <param name="currencyId">Currency ID.</param>
        /// <returns>The method returns the currency contract.</returns>
        Task<CurrencyContract> GetAsync(int currencyId);

        /// <summary>
        /// Get all the supported currencies.
        /// </summary>
        /// <returns>The method returns an array of currency contracts.</returns>
        List<CurrencyContract> GetAll();

        /// <summary>
        /// Get all the supported currencies.
        /// </summary>
        /// <returns>The method returns an array of currency contracts.</returns>
        Task<List<CurrencyContract>> GetAllAsync();

        /// <summary>
        /// Get a currency rate for the specific currency pair on the requested date.
        /// If currency exchange does not exist, it is returned null value.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="tradeDate">Trade Date (example: /2018-02-11).</param>
        /// <returns>The method returns the decimal rate value of the currency exchange or null value if currency exchange does not exist.</returns>
        decimal? GetCrossCourse(int fromCurrencyId, int toCurrencyId, DateTime tradeDate);

        /// <summary>
        /// Get a currency rate for the specific currency pair on the requested date.
        /// If currency exchange does not exist, it is returned null value.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="tradeDate">Trade Date (example: /2018-02-11).</param>
        /// <returns>The method returns the decimal rate value of the currency exchange or null value if currency exchange does not exist.</returns>
        Task<decimal?> GetCrossCourseAsync(int fromCurrencyId, int toCurrencyId, DateTime tradeDate);

        /// <summary>
        /// Get a currency rate for the specific currency pair on the requested date.
        /// If currency exchange does not exist, it is returned 1.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="tradeDate">Trade Date (example: /2018-02-11).</param>
        /// <returns>The method returns the decimal rate value of the currency exchange or 1 value if currency exchange does not exist.</returns>
        decimal GetCrossCourseNotNull(int fromCurrencyId, int toCurrencyId, DateTime tradeDate);

        /// <summary>
        /// Get a currency rate for the specific currency pair on the requested date.
        /// If currency exchange does not exist, it is returned 1.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="tradeDate">Trade Date (example: /2018-02-11).</param>
        /// <returns>The method returns the decimal rate value of the currency exchange or 1 value if currency exchange does not exist.</returns>
        Task<decimal> GetCrossCourseNotNullAsync(int fromCurrencyId, int toCurrencyId, DateTime tradeDate);

        /// <summary>
        /// Get the latest available cross-courses in the system.
        /// If currency exchange for the specific currency pair does not exist, currency rate has null value.
        /// </summary>
        /// <returns>
        /// The method returns a hashset of the hashsets with all possible combinations of cross-courses.
        /// Hashset has the structure: Dictionary (int, Dictionary(int, decimal)).
        /// It can be accessible like CrossCourses[fromCurrencyId][toCurrencyId].
        /// </returns>
        Dictionary<int,Dictionary<int,decimal?>> GetAllCrossCourses();

        /// <summary>
        /// Get the latest available cross-courses in the system.
        /// If currency exchange for the specific currency pair does not exist, currency rate has null value.
        /// </summary>
        /// <returns>
        /// The method returns a hashset of the hashsets with all possible combinations of cross-courses.
        /// Hashset has the structure: Dictionary (int, Dictionary(int, decimal)).
        /// It can be accessible like CrossCourses[fromCurrencyId][toCurrencyId].
        /// </returns>
        Task<Dictionary<int,Dictionary<int,decimal?>>> GetAllCrossCoursesAsync();

        /// <summary>
        /// Get the latest available cross-courses in the system.
        /// Value equal to 1 will be used as cross-course if cross-course is not available.
        /// </summary>
        /// <returns>
        /// The method returns a hashset of the hashsets with all possible combinations of cross-courses.
        /// Hashset has the structure: Dictionary (int, Dictionary(int, decimal)).
        /// It can be accessible like CrossCourses[fromCurrencyId][toCurrencyId].
        /// </returns>
        Dictionary<int,Dictionary<int,decimal>> GetAllCrossCoursesNotNull();

        /// <summary>
        /// Get the latest available cross-courses in the system.
        /// Value equal to 1 will be used as cross-course if cross-course is not available.
        /// </summary>
        /// <returns>
        /// The method returns a hashset of the hashsets with all possible combinations of cross-courses.
        /// Hashset has the structure: Dictionary (int, Dictionary(int, decimal)).
        /// It can be accessible like CrossCourses[fromCurrencyId][toCurrencyId].
        /// </returns>
        Task<Dictionary<int,Dictionary<int,decimal>>> GetAllCrossCoursesNotNullAsync();

        /// <summary>
        /// Get cross course history for each CALENDAR (not Trade) date.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="fromDate">From date range (example: /2018-02-11).</param>
        /// <param name="toDate">To date range (example: /2020-02-11).</param>
        /// <returns>The method returns an dictionary of cross courses for each calendar date.</returns>
        Dictionary<DateTime,decimal> GetCrossCourseHistory(int fromCurrencyId, int toCurrencyId, DateTime fromDate, DateTime toDate);

        /// <summary>
        /// Get cross course history for each CALENDAR (not Trade) date.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="fromDate">From date range (example: /2018-02-11).</param>
        /// <param name="toDate">To date range (example: /2020-02-11).</param>
        /// <returns>The method returns an dictionary of cross courses for each calendar date.</returns>
        Task<Dictionary<DateTime,decimal>> GetCrossCourseHistoryAsync(int fromCurrencyId, int toCurrencyId, DateTime fromDate, DateTime toDate);
    }

    public interface ICurrenciesClientByContextKeyApiMethods : ICurrenciesClientByLicenseKeyApiMethods
    {
    }

    public interface ICurrenciesClientByOrganizationApiMethods
    {
    }

    public partial interface ICurrenciesClient : ICurrenciesClientByLicenseKeyApiMethods, IClientByLicenseKey<ICurrenciesClient, ICurrenciesClientForUser, ICurrenciesClientForOrganization>
    {
    }

    public interface ICurrenciesClientForUser : ICurrenciesClientByContextKeyApiMethods, IClientByContext<ICurrenciesClientForUser, ICurrenciesClientForOrganization>
    {
    }

    public interface ICurrenciesClientForOrganization : ICurrenciesClientByOrganizationApiMethods
    {
    }

    public partial class CurrenciesClient : BaseClient<ICurrenciesClient, ICurrenciesClientForUser, ICurrenciesClientForOrganization, CurrenciesClient>, ICurrenciesClient, ICurrenciesClientForUser, ICurrenciesClientForOrganization
    {
        /// <summary>
        /// Get a currency by its ID.
        /// </summary>
        /// <param name="currencyId">Currency ID.</param>
        /// <returns>The method returns the currency contract.</returns>
        public CurrencyContract Get(int currencyId)
        {
            var request = new RequestData
            {
                Url = $"currencies/{currencyId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<CurrencyContract>(request);
        }

        /// <summary>
        /// Get a currency by its ID.
        /// </summary>
        /// <param name="currencyId">Currency ID.</param>
        /// <returns>The method returns the currency contract.</returns>
        public async Task<CurrencyContract> GetAsync(int currencyId)
        {
            var request = new RequestData
            {
                Url = $"currencies/{currencyId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<CurrencyContract>(request);
        }

        /// <summary>
        /// Get all the supported currencies.
        /// </summary>
        /// <returns>The method returns an array of currency contracts.</returns>
        public List<CurrencyContract> GetAll()
        {
            var request = new RequestData
            {
                Url = $"currencies",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<CurrencyContract>>(request);
        }

        /// <summary>
        /// Get all the supported currencies.
        /// </summary>
        /// <returns>The method returns an array of currency contracts.</returns>
        public async Task<List<CurrencyContract>> GetAllAsync()
        {
            var request = new RequestData
            {
                Url = $"currencies",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<CurrencyContract>>(request);
        }

        /// <summary>
        /// Get a currency rate for the specific currency pair on the requested date.
        /// If currency exchange does not exist, it is returned null value.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="tradeDate">Trade Date (example: /2018-02-11).</param>
        /// <returns>The method returns the decimal rate value of the currency exchange or null value if currency exchange does not exist.</returns>
        public decimal? GetCrossCourse(int fromCurrencyId, int toCurrencyId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"currencies/cross-course/{fromCurrencyId}/{toCurrencyId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<decimal?>(request);
        }

        /// <summary>
        /// Get a currency rate for the specific currency pair on the requested date.
        /// If currency exchange does not exist, it is returned null value.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="tradeDate">Trade Date (example: /2018-02-11).</param>
        /// <returns>The method returns the decimal rate value of the currency exchange or null value if currency exchange does not exist.</returns>
        public async Task<decimal?> GetCrossCourseAsync(int fromCurrencyId, int toCurrencyId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"currencies/cross-course/{fromCurrencyId}/{toCurrencyId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<decimal?>(request);
        }

        /// <summary>
        /// Get a currency rate for the specific currency pair on the requested date.
        /// If currency exchange does not exist, it is returned 1.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="tradeDate">Trade Date (example: /2018-02-11).</param>
        /// <returns>The method returns the decimal rate value of the currency exchange or 1 value if currency exchange does not exist.</returns>
        public decimal GetCrossCourseNotNull(int fromCurrencyId, int toCurrencyId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"currencies/cross-course-not-null/{fromCurrencyId}/{toCurrencyId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<decimal>(request);
        }

        /// <summary>
        /// Get a currency rate for the specific currency pair on the requested date.
        /// If currency exchange does not exist, it is returned 1.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="tradeDate">Trade Date (example: /2018-02-11).</param>
        /// <returns>The method returns the decimal rate value of the currency exchange or 1 value if currency exchange does not exist.</returns>
        public async Task<decimal> GetCrossCourseNotNullAsync(int fromCurrencyId, int toCurrencyId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"currencies/cross-course-not-null/{fromCurrencyId}/{toCurrencyId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<decimal>(request);
        }

        /// <summary>
        /// Get the latest available cross-courses in the system.
        /// If currency exchange for the specific currency pair does not exist, currency rate has null value.
        /// </summary>
        /// <returns>
        /// The method returns a hashset of the hashsets with all possible combinations of cross-courses.
        /// Hashset has the structure: Dictionary (int, Dictionary(int, decimal)).
        /// It can be accessible like CrossCourses[fromCurrencyId][toCurrencyId].
        /// </returns>
        public Dictionary<int,Dictionary<int,decimal?>> GetAllCrossCourses()
        {
            var request = new RequestData
            {
                Url = $"currencies/cross-courses",
                Method = HttpMethod.Get,
            };

            return PerformRequest<Dictionary<int,Dictionary<int,decimal?>>>(request);
        }

        /// <summary>
        /// Get the latest available cross-courses in the system.
        /// If currency exchange for the specific currency pair does not exist, currency rate has null value.
        /// </summary>
        /// <returns>
        /// The method returns a hashset of the hashsets with all possible combinations of cross-courses.
        /// Hashset has the structure: Dictionary (int, Dictionary(int, decimal)).
        /// It can be accessible like CrossCourses[fromCurrencyId][toCurrencyId].
        /// </returns>
        public async Task<Dictionary<int,Dictionary<int,decimal?>>> GetAllCrossCoursesAsync()
        {
            var request = new RequestData
            {
                Url = $"currencies/cross-courses",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<Dictionary<int,Dictionary<int,decimal?>>>(request);
        }

        /// <summary>
        /// Get the latest available cross-courses in the system.
        /// Value equal to 1 will be used as cross-course if cross-course is not available.
        /// </summary>
        /// <returns>
        /// The method returns a hashset of the hashsets with all possible combinations of cross-courses.
        /// Hashset has the structure: Dictionary (int, Dictionary(int, decimal)).
        /// It can be accessible like CrossCourses[fromCurrencyId][toCurrencyId].
        /// </returns>
        public Dictionary<int,Dictionary<int,decimal>> GetAllCrossCoursesNotNull()
        {
            var request = new RequestData
            {
                Url = $"currencies/cross-courses-not-null",
                Method = HttpMethod.Get,
            };

            return PerformRequest<Dictionary<int,Dictionary<int,decimal>>>(request);
        }

        /// <summary>
        /// Get the latest available cross-courses in the system.
        /// Value equal to 1 will be used as cross-course if cross-course is not available.
        /// </summary>
        /// <returns>
        /// The method returns a hashset of the hashsets with all possible combinations of cross-courses.
        /// Hashset has the structure: Dictionary (int, Dictionary(int, decimal)).
        /// It can be accessible like CrossCourses[fromCurrencyId][toCurrencyId].
        /// </returns>
        public async Task<Dictionary<int,Dictionary<int,decimal>>> GetAllCrossCoursesNotNullAsync()
        {
            var request = new RequestData
            {
                Url = $"currencies/cross-courses-not-null",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<Dictionary<int,Dictionary<int,decimal>>>(request);
        }

        /// <summary>
        /// Get cross course history for each CALENDAR (not Trade) date.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="fromDate">From date range (example: /2018-02-11).</param>
        /// <param name="toDate">To date range (example: /2020-02-11).</param>
        /// <returns>The method returns an dictionary of cross courses for each calendar date.</returns>
        public Dictionary<DateTime,decimal> GetCrossCourseHistory(int fromCurrencyId, int toCurrencyId, DateTime fromDate, DateTime toDate)
        {
            var request = new RequestData
            {
                Url = $"currencies/cross-courses/history/{fromCurrencyId}/{toCurrencyId}/{fromDate:yyyy-MM-dd}/{toDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<Dictionary<DateTime,decimal>>(request);
        }

        /// <summary>
        /// Get cross course history for each CALENDAR (not Trade) date.
        /// </summary>
        /// <param name="fromCurrencyId">Id of the currency to be exchanged.</param>
        /// <param name="toCurrencyId">Id of the goal currency of the exchange.</param>
        /// <param name="fromDate">From date range (example: /2018-02-11).</param>
        /// <param name="toDate">To date range (example: /2020-02-11).</param>
        /// <returns>The method returns an dictionary of cross courses for each calendar date.</returns>
        public async Task<Dictionary<DateTime,decimal>> GetCrossCourseHistoryAsync(int fromCurrencyId, int toCurrencyId, DateTime fromDate, DateTime toDate)
        {
            var request = new RequestData
            {
                Url = $"currencies/cross-courses/history/{fromCurrencyId}/{toCurrencyId}/{fromDate:yyyy-MM-dd}/{toDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<Dictionary<DateTime,decimal>>(request);
        }
    }

    public interface IDeletedSyncPositionsClientByLicenseKeyApiMethods
    {
    }

    public interface IDeletedSyncPositionsClientByContextKeyApiMethods : IDeletedSyncPositionsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get deleted sync positions by portfolio ID. Only the owner of the portfolio can obtain them.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <returns>The method returns list of contracts for all found deleted sync positions.</returns>
        List<DeletedSyncPositionContract> GetDeletedSyncPositionsByPortfolioId(int portfolioId);

        /// <summary>
        /// Get deleted sync positions by portfolio ID. Only the owner of the portfolio can obtain them.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <returns>The method returns list of contracts for all found deleted sync positions.</returns>
        Task<List<DeletedSyncPositionContract>> GetDeletedSyncPositionsByPortfolioIdAsync(int portfolioId);

        void DeleteDeletedSyncPositionsByIds(List<int> deletedSyncPositionIds);

        Task DeleteDeletedSyncPositionsByIdsAsync(List<int> deletedSyncPositionIds);

        List<DeletedSyncPositionContract> CreateDeletedSyncPositions(List<CreateDeletedSyncPositionContract> createContracts);

        Task<List<DeletedSyncPositionContract>> CreateDeletedSyncPositionsAsync(List<CreateDeletedSyncPositionContract> createContracts);
    }

    public interface IDeletedSyncPositionsClientByOrganizationApiMethods
    {
    }

    public partial interface IDeletedSyncPositionsClient : IDeletedSyncPositionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IDeletedSyncPositionsClient, IDeletedSyncPositionsClientForUser, IDeletedSyncPositionsClientForOrganization>
    {
    }

    public interface IDeletedSyncPositionsClientForUser : IDeletedSyncPositionsClientByContextKeyApiMethods, IClientByContext<IDeletedSyncPositionsClientForUser, IDeletedSyncPositionsClientForOrganization>
    {
    }

    public interface IDeletedSyncPositionsClientForOrganization : IDeletedSyncPositionsClientByOrganizationApiMethods
    {
    }

    public partial class DeletedSyncPositionsClient : BaseClient<IDeletedSyncPositionsClient, IDeletedSyncPositionsClientForUser, IDeletedSyncPositionsClientForOrganization, DeletedSyncPositionsClient>, IDeletedSyncPositionsClient, IDeletedSyncPositionsClientForUser, IDeletedSyncPositionsClientForOrganization
    {
        /// <summary>
        /// Get deleted sync positions by portfolio ID. Only the owner of the portfolio can obtain them.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <returns>The method returns list of contracts for all found deleted sync positions.</returns>
        public List<DeletedSyncPositionContract> GetDeletedSyncPositionsByPortfolioId(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"deleted-sync-positions/by-portfolio-id/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<DeletedSyncPositionContract>>(request);
        }

        /// <summary>
        /// Get deleted sync positions by portfolio ID. Only the owner of the portfolio can obtain them.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <returns>The method returns list of contracts for all found deleted sync positions.</returns>
        public async Task<List<DeletedSyncPositionContract>> GetDeletedSyncPositionsByPortfolioIdAsync(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"deleted-sync-positions/by-portfolio-id/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<DeletedSyncPositionContract>>(request);
        }

        public void DeleteDeletedSyncPositionsByIds(List<int> deletedSyncPositionIds)
        {
            var request = new RequestData
            {
                Url = $"deleted-sync-positions",
                Method = HttpMethod.Delete,
            };

            request.SetBody(deletedSyncPositionIds);

            PerformRequest(request);
        }

        public async Task DeleteDeletedSyncPositionsByIdsAsync(List<int> deletedSyncPositionIds)
        {
            var request = new RequestData
            {
                Url = $"deleted-sync-positions",
                Method = HttpMethod.Delete,
            };

            request.SetBody(deletedSyncPositionIds);

            await PerformRequestAsync(request);
        }

        public List<DeletedSyncPositionContract> CreateDeletedSyncPositions(List<CreateDeletedSyncPositionContract> createContracts)
        {
            var request = new RequestData
            {
                Url = $"deleted-sync-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContracts);

            return PerformRequest<List<DeletedSyncPositionContract>>(request);
        }

        public async Task<List<DeletedSyncPositionContract>> CreateDeletedSyncPositionsAsync(List<CreateDeletedSyncPositionContract> createContracts)
        {
            var request = new RequestData
            {
                Url = $"deleted-sync-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContracts);

            return await PerformRequestAsync<List<DeletedSyncPositionContract>>(request);
        }
    }

    public interface IEmailMessageClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// The method is used to send email.
        /// </summary>
        /// <param name="contract">User's email information.</param>
        /// <returns>The method returns HTTP status 200 OK in case of success.</returns>
        void SendEmail(SendEmailContract contract);

        /// <summary>
        /// The method is used to send email.
        /// </summary>
        /// <param name="contract">User's email information.</param>
        /// <returns>The method returns HTTP status 200 OK in case of success.</returns>
        Task SendEmailAsync(SendEmailContract contract);
    }

    public interface IEmailMessageClientByContextKeyApiMethods : IEmailMessageClientByLicenseKeyApiMethods
    {
    }

    public interface IEmailMessageClientByOrganizationApiMethods
    {
    }

    public partial interface IEmailMessageClient : IEmailMessageClientByLicenseKeyApiMethods, IClientByLicenseKey<IEmailMessageClient, IEmailMessageClientForUser, IEmailMessageClientForOrganization>
    {
    }

    public interface IEmailMessageClientForUser : IEmailMessageClientByContextKeyApiMethods, IClientByContext<IEmailMessageClientForUser, IEmailMessageClientForOrganization>
    {
    }

    public interface IEmailMessageClientForOrganization : IEmailMessageClientByOrganizationApiMethods
    {
    }

    public partial class EmailMessageClient : BaseClient<IEmailMessageClient, IEmailMessageClientForUser, IEmailMessageClientForOrganization, EmailMessageClient>, IEmailMessageClient, IEmailMessageClientForUser, IEmailMessageClientForOrganization
    {
        /// <summary>
        /// The method is used to send email.
        /// </summary>
        /// <param name="contract">User's email information.</param>
        /// <returns>The method returns HTTP status 200 OK in case of success.</returns>
        public void SendEmail(SendEmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"email/send-email",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// The method is used to send email.
        /// </summary>
        /// <param name="contract">User's email information.</param>
        /// <returns>The method returns HTTP status 200 OK in case of success.</returns>
        public async Task SendEmailAsync(SendEmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"email/send-email",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }
    }

    public interface IExchangesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get exchange holidays by specified parameters
        /// </summary>
        /// <param name="contract">Parameters to get exchange holidays.</param>
        /// <returns>List of exchange holidays</returns>
        List<ExchangeHolidayContract> GetHolidays(GetExchangeHolidaysContract contract);

        /// <summary>
        /// Get exchange holidays by specified parameters
        /// </summary>
        /// <param name="contract">Parameters to get exchange holidays.</param>
        /// <returns>List of exchange holidays</returns>
        Task<List<ExchangeHolidayContract>> GetHolidaysAsync(GetExchangeHolidaysContract contract);
    }

    public interface IExchangesClientByContextKeyApiMethods : IExchangesClientByLicenseKeyApiMethods
    {
    }

    public interface IExchangesClientByOrganizationApiMethods
    {
    }

    public partial interface IExchangesClient : IExchangesClientByLicenseKeyApiMethods, IClientByLicenseKey<IExchangesClient, IExchangesClientForUser, IExchangesClientForOrganization>
    {
    }

    public interface IExchangesClientForUser : IExchangesClientByContextKeyApiMethods, IClientByContext<IExchangesClientForUser, IExchangesClientForOrganization>
    {
    }

    public interface IExchangesClientForOrganization : IExchangesClientByOrganizationApiMethods
    {
    }

    public partial class ExchangesClient : BaseClient<IExchangesClient, IExchangesClientForUser, IExchangesClientForOrganization, ExchangesClient>, IExchangesClient, IExchangesClientForUser, IExchangesClientForOrganization
    {
        /// <summary>
        /// Get exchange holidays by specified parameters
        /// </summary>
        /// <param name="contract">Parameters to get exchange holidays.</param>
        /// <returns>List of exchange holidays</returns>
        public List<ExchangeHolidayContract> GetHolidays(GetExchangeHolidaysContract contract)
        {
            var request = new RequestData
            {
                Url = $"exchanges/get-holidays",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<ExchangeHolidayContract>>(request);
        }

        /// <summary>
        /// Get exchange holidays by specified parameters
        /// </summary>
        /// <param name="contract">Parameters to get exchange holidays.</param>
        /// <returns>List of exchange holidays</returns>
        public async Task<List<ExchangeHolidayContract>> GetHolidaysAsync(GetExchangeHolidaysContract contract)
        {
            var request = new RequestData
            {
                Url = $"exchanges/get-holidays",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<ExchangeHolidayContract>>(request);
        }
    }

    public interface IExternalNotificationsClientByLicenseKeyApiMethods
    {
        void SaveStansberryPushNotification(string snaid);

        Task SaveStansberryPushNotificationAsync(string snaid);

        void SaveAgoraPushNotification(string agoraCustomerNumber);

        Task SaveAgoraPushNotificationAsync(string agoraCustomerNumber);
    }

    public interface IExternalNotificationsClientByContextKeyApiMethods : IExternalNotificationsClientByLicenseKeyApiMethods
    {
    }

    public interface IExternalNotificationsClientByOrganizationApiMethods
    {
    }

    public partial interface IExternalNotificationsClient : IExternalNotificationsClientByLicenseKeyApiMethods, IClientByLicenseKey<IExternalNotificationsClient, IExternalNotificationsClientForUser, IExternalNotificationsClientForOrganization>
    {
    }

    public interface IExternalNotificationsClientForUser : IExternalNotificationsClientByContextKeyApiMethods, IClientByContext<IExternalNotificationsClientForUser, IExternalNotificationsClientForOrganization>
    {
    }

    public interface IExternalNotificationsClientForOrganization : IExternalNotificationsClientByOrganizationApiMethods
    {
    }

    public partial class ExternalNotificationsClient : BaseClient<IExternalNotificationsClient, IExternalNotificationsClientForUser, IExternalNotificationsClientForOrganization, ExternalNotificationsClient>, IExternalNotificationsClient, IExternalNotificationsClientForUser, IExternalNotificationsClientForOrganization
    {
        public void SaveStansberryPushNotification(string snaid)
        {
            var request = new RequestData
            {
                Url = $"external-notifications/trigger-stansberry-account-synchronization/{snaid}",
                Method = HttpMethod.Get,
            };

            PerformRequest(request);
        }

        public async Task SaveStansberryPushNotificationAsync(string snaid)
        {
            var request = new RequestData
            {
                Url = $"external-notifications/trigger-stansberry-account-synchronization/{snaid}",
                Method = HttpMethod.Get,
            };

            await PerformRequestAsync(request);
        }

        public void SaveAgoraPushNotification(string agoraCustomerNumber)
        {
            var request = new RequestData
            {
                Url = $"external-notifications/trigger-agora-account-synchronization/{agoraCustomerNumber}",
                Method = HttpMethod.Get,
            };

            PerformRequest(request);
        }

        public async Task SaveAgoraPushNotificationAsync(string agoraCustomerNumber)
        {
            var request = new RequestData
            {
                Url = $"external-notifications/trigger-agora-account-synchronization/{agoraCustomerNumber}",
                Method = HttpMethod.Get,
            };

            await PerformRequestAsync(request);
        }
    }

    public interface IFinancialInstitutionRulesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get financial institution rules by specific financial institution ID.
        /// </summary>
        /// <param name="financialInstitutionId">Financial institution ID.</param>
        /// <returns>The method returns rules for the specific financial institution.</returns>
        List<FinancialInstitutionRuleContract> GetFinancialInstitutionRules(int financialInstitutionId);

        /// <summary>
        /// Get financial institution rules by specific financial institution ID.
        /// </summary>
        /// <param name="financialInstitutionId">Financial institution ID.</param>
        /// <returns>The method returns rules for the specific financial institution.</returns>
        Task<List<FinancialInstitutionRuleContract>> GetFinancialInstitutionRulesAsync(int financialInstitutionId);
    }

    public interface IFinancialInstitutionRulesClientByContextKeyApiMethods : IFinancialInstitutionRulesClientByLicenseKeyApiMethods
    {
    }

    public interface IFinancialInstitutionRulesClientByOrganizationApiMethods
    {
    }

    public partial interface IFinancialInstitutionRulesClient : IFinancialInstitutionRulesClientByLicenseKeyApiMethods, IClientByLicenseKey<IFinancialInstitutionRulesClient, IFinancialInstitutionRulesClientForUser, IFinancialInstitutionRulesClientForOrganization>
    {
    }

    public interface IFinancialInstitutionRulesClientForUser : IFinancialInstitutionRulesClientByContextKeyApiMethods, IClientByContext<IFinancialInstitutionRulesClientForUser, IFinancialInstitutionRulesClientForOrganization>
    {
    }

    public interface IFinancialInstitutionRulesClientForOrganization : IFinancialInstitutionRulesClientByOrganizationApiMethods
    {
    }

    public partial class FinancialInstitutionRulesClient : BaseClient<IFinancialInstitutionRulesClient, IFinancialInstitutionRulesClientForUser, IFinancialInstitutionRulesClientForOrganization, FinancialInstitutionRulesClient>, IFinancialInstitutionRulesClient, IFinancialInstitutionRulesClientForUser, IFinancialInstitutionRulesClientForOrganization
    {
        /// <summary>
        /// Get financial institution rules by specific financial institution ID.
        /// </summary>
        /// <param name="financialInstitutionId">Financial institution ID.</param>
        /// <returns>The method returns rules for the specific financial institution.</returns>
        public List<FinancialInstitutionRuleContract> GetFinancialInstitutionRules(int financialInstitutionId)
        {
            var request = new RequestData
            {
                Url = $"financial-institution-rules/by-financial-intitution-id/{financialInstitutionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<FinancialInstitutionRuleContract>>(request);
        }

        /// <summary>
        /// Get financial institution rules by specific financial institution ID.
        /// </summary>
        /// <param name="financialInstitutionId">Financial institution ID.</param>
        /// <returns>The method returns rules for the specific financial institution.</returns>
        public async Task<List<FinancialInstitutionRuleContract>> GetFinancialInstitutionRulesAsync(int financialInstitutionId)
        {
            var request = new RequestData
            {
                Url = $"financial-institution-rules/by-financial-intitution-id/{financialInstitutionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<FinancialInstitutionRuleContract>>(request);
        }
    }

    public interface IFinancialInstitutionsClientByLicenseKeyApiMethods
    {
    }

    public interface IFinancialInstitutionsClientByContextKeyApiMethods : IFinancialInstitutionsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the information about all brokers supported by the system.
        /// </summary>
        /// <returns>The method returns the list containing the information about all brokers supported by the system.</returns>
        List<FinancialInstitutionContract> GetAllFinancialInstitutions();

        /// <summary>
        /// Get the information about all brokers supported by the system.
        /// </summary>
        /// <returns>The method returns the list containing the information about all brokers supported by the system.</returns>
        Task<List<FinancialInstitutionContract>> GetAllFinancialInstitutionsAsync();

        FinancialInstitutionContract GetFinancialInstitution(int financialInstitutionId);

        Task<FinancialInstitutionContract> GetFinancialInstitutionAsync(int financialInstitutionId);
    }

    public interface IFinancialInstitutionsClientByOrganizationApiMethods
    {
    }

    public partial interface IFinancialInstitutionsClient : IFinancialInstitutionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IFinancialInstitutionsClient, IFinancialInstitutionsClientForUser, IFinancialInstitutionsClientForOrganization>
    {
    }

    public interface IFinancialInstitutionsClientForUser : IFinancialInstitutionsClientByContextKeyApiMethods, IClientByContext<IFinancialInstitutionsClientForUser, IFinancialInstitutionsClientForOrganization>
    {
    }

    public interface IFinancialInstitutionsClientForOrganization : IFinancialInstitutionsClientByOrganizationApiMethods
    {
    }

    public partial class FinancialInstitutionsClient : BaseClient<IFinancialInstitutionsClient, IFinancialInstitutionsClientForUser, IFinancialInstitutionsClientForOrganization, FinancialInstitutionsClient>, IFinancialInstitutionsClient, IFinancialInstitutionsClientForUser, IFinancialInstitutionsClientForOrganization
    {
        /// <summary>
        /// Get the information about all brokers supported by the system.
        /// </summary>
        /// <returns>The method returns the list containing the information about all brokers supported by the system.</returns>
        public List<FinancialInstitutionContract> GetAllFinancialInstitutions()
        {
            var request = new RequestData
            {
                Url = $"financial-institutions/all",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<FinancialInstitutionContract>>(request);
        }

        /// <summary>
        /// Get the information about all brokers supported by the system.
        /// </summary>
        /// <returns>The method returns the list containing the information about all brokers supported by the system.</returns>
        public async Task<List<FinancialInstitutionContract>> GetAllFinancialInstitutionsAsync()
        {
            var request = new RequestData
            {
                Url = $"financial-institutions/all",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<FinancialInstitutionContract>>(request);
        }

        public FinancialInstitutionContract GetFinancialInstitution(int financialInstitutionId)
        {
            var request = new RequestData
            {
                Url = $"financial-institutions/{financialInstitutionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<FinancialInstitutionContract>(request);
        }

        public async Task<FinancialInstitutionContract> GetFinancialInstitutionAsync(int financialInstitutionId)
        {
            var request = new RequestData
            {
                Url = $"financial-institutions/{financialInstitutionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<FinancialInstitutionContract>(request);
        }
    }

    public interface IImportProcessesClientByLicenseKeyApiMethods
    {
    }

    public interface IImportProcessesClientByContextKeyApiMethods : IImportProcessesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get portfolio import process by the import process ID. Only the user that initiated import process can obtain it.
        /// </summary>
        /// <param name="importProcessId">Unique import process ID.</param>
        /// <returns>The method returns contract for the specific import process found by import process ID.</returns>
        ImportProcessContract GetImportProcess(int importProcessId);

        /// <summary>
        /// Get portfolio import process by the import process ID. Only the user that initiated import process can obtain it.
        /// </summary>
        /// <param name="importProcessId">Unique import process ID.</param>
        /// <returns>The method returns contract for the specific import process found by import process ID.</returns>
        Task<ImportProcessContract> GetImportProcessAsync(int importProcessId);

        /// <summary>
        /// Get portfolio import processes by unique vendor data. All import process can be obtained only by user initiated them.
        /// </summary>
        /// <param name="vendorAccountId">Unique vendor account ID of synced portfolio.</param>
        /// <param name="financialInstitutionId">Unique financial institution ID.</param>
        /// <returns>
        /// The method returns contract for the specific import process found by the vendor account and
        /// the financial institution ID for synced portfolios.
        /// </returns>
        ImportProcessContract GetImportProcess(string vendorAccountId, int financialInstitutionId);

        /// <summary>
        /// Get portfolio import processes by unique vendor data. All import process can be obtained only by user initiated them.
        /// </summary>
        /// <param name="vendorAccountId">Unique vendor account ID of synced portfolio.</param>
        /// <param name="financialInstitutionId">Unique financial institution ID.</param>
        /// <returns>
        /// The method returns contract for the specific import process found by the vendor account and
        /// the financial institution ID for synced portfolios.
        /// </returns>
        Task<ImportProcessContract> GetImportProcessAsync(string vendorAccountId, int financialInstitutionId);

        /// <summary>
        /// Create a new portfolio import process.
        /// </summary>
        /// <param name="createContract">Create import process contract.</param>
        /// <returns>The method returns contract for the newly created import process.</returns>
        ImportProcessContract CreateImportProcess(CreateImportProcessContract createContract);

        /// <summary>
        /// Create a new portfolio import process.
        /// </summary>
        /// <param name="createContract">Create import process contract.</param>
        /// <returns>The method returns contract for the newly created import process.</returns>
        Task<ImportProcessContract> CreateImportProcessAsync(CreateImportProcessContract createContract);

        /// <summary>
        /// Edit the portfolio import process. You can choose the fields to include in the request.
        /// Each field from a request payload can be omitted.
        /// Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="importProcessId">Import process ID.</param>
        /// <param name="editContract">Edit import process contract.</param>
        /// <returns>The method returns contract for updated import process.</returns>
        ImportProcessContract EditImportProcess(int importProcessId, EditImportProcessContract editContract);

        /// <summary>
        /// Edit the portfolio import process. You can choose the fields to include in the request.
        /// Each field from a request payload can be omitted.
        /// Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="importProcessId">Import process ID.</param>
        /// <param name="editContract">Edit import process contract.</param>
        /// <returns>The method returns contract for updated import process.</returns>
        Task<ImportProcessContract> EditImportProcessAsync(int importProcessId, EditImportProcessContract editContract);

        /// <summary>
        /// Get all import processes initiated by the current user.
        /// </summary>
        /// <returns>The method returns list of contracts for import processes initiated by the current user.</returns>
        List<ImportProcessContract> GetUserImportProcesses();

        /// <summary>
        /// Get all import processes initiated by the current user.
        /// </summary>
        /// <returns>The method returns list of contracts for import processes initiated by the current user.</returns>
        Task<List<ImportProcessContract>> GetUserImportProcessesAsync();

        void DeleteImportProcessesByIds(List<int> importProcessesIds);

        Task DeleteImportProcessesByIdsAsync(List<int> importProcessesIds);

        /// <summary>
        /// Get sync import process by Vendor Account ID and Vendor Type.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID.</param>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>The method returns sync import process.</returns>
        ImportProcessContract GetImportProcess(string vendorAccountId, VendorTypes vendorType);

        /// <summary>
        /// Get sync import process by Vendor Account ID and Vendor Type.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID.</param>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>The method returns sync import process.</returns>
        Task<ImportProcessContract> GetImportProcessAsync(string vendorAccountId, VendorTypes vendorType);

        void ImportProcessesByIds(List<int> importProcessesIds);

        Task ImportProcessesByIdsAsync(List<int> importProcessesIds);
    }

    public interface IImportProcessesClientByOrganizationApiMethods
    {
    }

    public partial interface IImportProcessesClient : IImportProcessesClientByLicenseKeyApiMethods, IClientByLicenseKey<IImportProcessesClient, IImportProcessesClientForUser, IImportProcessesClientForOrganization>
    {
    }

    public interface IImportProcessesClientForUser : IImportProcessesClientByContextKeyApiMethods, IClientByContext<IImportProcessesClientForUser, IImportProcessesClientForOrganization>
    {
    }

    public interface IImportProcessesClientForOrganization : IImportProcessesClientByOrganizationApiMethods
    {
    }

    public partial class ImportProcessesClient : BaseClient<IImportProcessesClient, IImportProcessesClientForUser, IImportProcessesClientForOrganization, ImportProcessesClient>, IImportProcessesClient, IImportProcessesClientForUser, IImportProcessesClientForOrganization
    {
        /// <summary>
        /// Get portfolio import process by the import process ID. Only the user that initiated import process can obtain it.
        /// </summary>
        /// <param name="importProcessId">Unique import process ID.</param>
        /// <returns>The method returns contract for the specific import process found by import process ID.</returns>
        public ImportProcessContract GetImportProcess(int importProcessId)
        {
            var request = new RequestData
            {
                Url = $"import-processes/{importProcessId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<ImportProcessContract>(request);
        }

        /// <summary>
        /// Get portfolio import process by the import process ID. Only the user that initiated import process can obtain it.
        /// </summary>
        /// <param name="importProcessId">Unique import process ID.</param>
        /// <returns>The method returns contract for the specific import process found by import process ID.</returns>
        public async Task<ImportProcessContract> GetImportProcessAsync(int importProcessId)
        {
            var request = new RequestData
            {
                Url = $"import-processes/{importProcessId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<ImportProcessContract>(request);
        }

        /// <summary>
        /// Get portfolio import processes by unique vendor data. All import process can be obtained only by user initiated them.
        /// </summary>
        /// <param name="vendorAccountId">Unique vendor account ID of synced portfolio.</param>
        /// <param name="financialInstitutionId">Unique financial institution ID.</param>
        /// <returns>
        /// The method returns contract for the specific import process found by the vendor account and
        /// the financial institution ID for synced portfolios.
        /// </returns>
        public ImportProcessContract GetImportProcess(string vendorAccountId, int financialInstitutionId)
        {
            var request = new RequestData
            {
                Url = $"import-processes/by-vendor-account-id-and-financial-institution-id/{vendorAccountId}/{financialInstitutionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<ImportProcessContract>(request);
        }

        /// <summary>
        /// Get portfolio import processes by unique vendor data. All import process can be obtained only by user initiated them.
        /// </summary>
        /// <param name="vendorAccountId">Unique vendor account ID of synced portfolio.</param>
        /// <param name="financialInstitutionId">Unique financial institution ID.</param>
        /// <returns>
        /// The method returns contract for the specific import process found by the vendor account and
        /// the financial institution ID for synced portfolios.
        /// </returns>
        public async Task<ImportProcessContract> GetImportProcessAsync(string vendorAccountId, int financialInstitutionId)
        {
            var request = new RequestData
            {
                Url = $"import-processes/by-vendor-account-id-and-financial-institution-id/{vendorAccountId}/{financialInstitutionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<ImportProcessContract>(request);
        }

        /// <summary>
        /// Create a new portfolio import process.
        /// </summary>
        /// <param name="createContract">Create import process contract.</param>
        /// <returns>The method returns contract for the newly created import process.</returns>
        public ImportProcessContract CreateImportProcess(CreateImportProcessContract createContract)
        {
            var request = new RequestData
            {
                Url = $"import-processes",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return PerformRequest<ImportProcessContract>(request);
        }

        /// <summary>
        /// Create a new portfolio import process.
        /// </summary>
        /// <param name="createContract">Create import process contract.</param>
        /// <returns>The method returns contract for the newly created import process.</returns>
        public async Task<ImportProcessContract> CreateImportProcessAsync(CreateImportProcessContract createContract)
        {
            var request = new RequestData
            {
                Url = $"import-processes",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return await PerformRequestAsync<ImportProcessContract>(request);
        }

        /// <summary>
        /// Edit the portfolio import process. You can choose the fields to include in the request.
        /// Each field from a request payload can be omitted.
        /// Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="importProcessId">Import process ID.</param>
        /// <param name="editContract">Edit import process contract.</param>
        /// <returns>The method returns contract for updated import process.</returns>
        public ImportProcessContract EditImportProcess(int importProcessId, EditImportProcessContract editContract)
        {
            var request = new RequestData
            {
                Url = $"import-processes/{importProcessId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContract);

            return PerformRequest<ImportProcessContract>(request);
        }

        /// <summary>
        /// Edit the portfolio import process. You can choose the fields to include in the request.
        /// Each field from a request payload can be omitted.
        /// Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="importProcessId">Import process ID.</param>
        /// <param name="editContract">Edit import process contract.</param>
        /// <returns>The method returns contract for updated import process.</returns>
        public async Task<ImportProcessContract> EditImportProcessAsync(int importProcessId, EditImportProcessContract editContract)
        {
            var request = new RequestData
            {
                Url = $"import-processes/{importProcessId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContract);

            return await PerformRequestAsync<ImportProcessContract>(request);
        }

        /// <summary>
        /// Get all import processes initiated by the current user.
        /// </summary>
        /// <returns>The method returns list of contracts for import processes initiated by the current user.</returns>
        public List<ImportProcessContract> GetUserImportProcesses()
        {
            var request = new RequestData
            {
                Url = $"import-processes/",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ImportProcessContract>>(request);
        }

        /// <summary>
        /// Get all import processes initiated by the current user.
        /// </summary>
        /// <returns>The method returns list of contracts for import processes initiated by the current user.</returns>
        public async Task<List<ImportProcessContract>> GetUserImportProcessesAsync()
        {
            var request = new RequestData
            {
                Url = $"import-processes/",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ImportProcessContract>>(request);
        }

        public void DeleteImportProcessesByIds(List<int> importProcessesIds)
        {
            var request = new RequestData
            {
                Url = $"import-processes/by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(importProcessesIds);

            PerformRequest(request);
        }

        public async Task DeleteImportProcessesByIdsAsync(List<int> importProcessesIds)
        {
            var request = new RequestData
            {
                Url = $"import-processes/by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(importProcessesIds);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get sync import process by Vendor Account ID and Vendor Type.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID.</param>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>The method returns sync import process.</returns>
        public ImportProcessContract GetImportProcess(string vendorAccountId, VendorTypes vendorType)
        {
            var request = new RequestData
            {
                Url = $"import-processes/by-vendor-account-id-and-vendor-type/{vendorAccountId}/{vendorType}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<ImportProcessContract>(request);
        }

        /// <summary>
        /// Get sync import process by Vendor Account ID and Vendor Type.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID.</param>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>The method returns sync import process.</returns>
        public async Task<ImportProcessContract> GetImportProcessAsync(string vendorAccountId, VendorTypes vendorType)
        {
            var request = new RequestData
            {
                Url = $"import-processes/by-vendor-account-id-and-vendor-type/{vendorAccountId}/{vendorType}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<ImportProcessContract>(request);
        }

        public void ImportProcessesByIds(List<int> importProcessesIds)
        {
            var request = new RequestData
            {
                Url = $"import-processes/delete/by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(importProcessesIds);

            PerformRequest(request);
        }

        public async Task ImportProcessesByIdsAsync(List<int> importProcessesIds)
        {
            var request = new RequestData
            {
                Url = $"import-processes/delete/by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(importProcessesIds);

            await PerformRequestAsync(request);
        }
    }

    public interface IIncompleteOptionsClientByLicenseKeyApiMethods
    {
    }

    public interface IIncompleteOptionsClientByContextKeyApiMethods : IIncompleteOptionsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create an incomplete option.
        /// </summary>
        /// <param name="contract">Create incomplete option contract.</param>
        /// <returns>The method returns contract for newly created incomplete option.</returns>
        IncompleteOptionLogContract CreateIncompleteOption(CreateIncompleteOptionLogContract contract);

        /// <summary>
        /// Create an incomplete option.
        /// </summary>
        /// <param name="contract">Create incomplete option contract.</param>
        /// <returns>The method returns contract for newly created incomplete option.</returns>
        Task<IncompleteOptionLogContract> CreateIncompleteOptionAsync(CreateIncompleteOptionLogContract contract);

        List<IncompleteOptionLogContract> CreateIncompleteOptions(List<CreateIncompleteOptionLogContract> contracts);

        Task<List<IncompleteOptionLogContract>> CreateIncompleteOptionsAsync(List<CreateIncompleteOptionLogContract> contracts);
    }

    public interface IIncompleteOptionsClientByOrganizationApiMethods
    {
    }

    public partial interface IIncompleteOptionsClient : IIncompleteOptionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IIncompleteOptionsClient, IIncompleteOptionsClientForUser, IIncompleteOptionsClientForOrganization>
    {
    }

    public interface IIncompleteOptionsClientForUser : IIncompleteOptionsClientByContextKeyApiMethods, IClientByContext<IIncompleteOptionsClientForUser, IIncompleteOptionsClientForOrganization>
    {
    }

    public interface IIncompleteOptionsClientForOrganization : IIncompleteOptionsClientByOrganizationApiMethods
    {
    }

    public partial class IncompleteOptionsClient : BaseClient<IIncompleteOptionsClient, IIncompleteOptionsClientForUser, IIncompleteOptionsClientForOrganization, IncompleteOptionsClient>, IIncompleteOptionsClient, IIncompleteOptionsClientForUser, IIncompleteOptionsClientForOrganization
    {
        /// <summary>
        /// Create an incomplete option.
        /// </summary>
        /// <param name="contract">Create incomplete option contract.</param>
        /// <returns>The method returns contract for newly created incomplete option.</returns>
        public IncompleteOptionLogContract CreateIncompleteOption(CreateIncompleteOptionLogContract contract)
        {
            var request = new RequestData
            {
                Url = $"incomplete-options",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<IncompleteOptionLogContract>(request);
        }

        /// <summary>
        /// Create an incomplete option.
        /// </summary>
        /// <param name="contract">Create incomplete option contract.</param>
        /// <returns>The method returns contract for newly created incomplete option.</returns>
        public async Task<IncompleteOptionLogContract> CreateIncompleteOptionAsync(CreateIncompleteOptionLogContract contract)
        {
            var request = new RequestData
            {
                Url = $"incomplete-options",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<IncompleteOptionLogContract>(request);
        }

        public List<IncompleteOptionLogContract> CreateIncompleteOptions(List<CreateIncompleteOptionLogContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"incomplete-options/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return PerformRequest<List<IncompleteOptionLogContract>>(request);
        }

        public async Task<List<IncompleteOptionLogContract>> CreateIncompleteOptionsAsync(List<CreateIncompleteOptionLogContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"incomplete-options/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return await PerformRequestAsync<List<IncompleteOptionLogContract>>(request);
        }
    }

    public interface IIntradayOptionsDataClientByLicenseKeyApiMethods
    {
        IntradayOptionDataContract GetLatestIntradayOptionData(int symbolId);

        Task<IntradayOptionDataContract> GetLatestIntradayOptionDataAsync(int symbolId);
    }

    public interface IIntradayOptionsDataClientByContextKeyApiMethods : IIntradayOptionsDataClientByLicenseKeyApiMethods
    {
    }

    public interface IIntradayOptionsDataClientByOrganizationApiMethods
    {
    }

    public partial interface IIntradayOptionsDataClient : IIntradayOptionsDataClientByLicenseKeyApiMethods, IClientByLicenseKey<IIntradayOptionsDataClient, IIntradayOptionsDataClientForUser, IIntradayOptionsDataClientForOrganization>
    {
    }

    public interface IIntradayOptionsDataClientForUser : IIntradayOptionsDataClientByContextKeyApiMethods, IClientByContext<IIntradayOptionsDataClientForUser, IIntradayOptionsDataClientForOrganization>
    {
    }

    public interface IIntradayOptionsDataClientForOrganization : IIntradayOptionsDataClientByOrganizationApiMethods
    {
    }

    public partial class IntradayOptionsDataClient : BaseClient<IIntradayOptionsDataClient, IIntradayOptionsDataClientForUser, IIntradayOptionsDataClientForOrganization, IntradayOptionsDataClient>, IIntradayOptionsDataClient, IIntradayOptionsDataClientForUser, IIntradayOptionsDataClientForOrganization
    {
        public IntradayOptionDataContract GetLatestIntradayOptionData(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"intraday-option-data/latest/{symbolId}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<IntradayOptionDataContract>(request);
        }

        public async Task<IntradayOptionDataContract> GetLatestIntradayOptionDataAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"intraday-option-data/latest/{symbolId}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<IntradayOptionDataContract>(request);
        }
    }

    public interface IIntradayPricesClientByLicenseKeyApiMethods
    {
        List<IntradayPricesAggregatedDataContract> GetIntradayPricesAggregatedData(GetIntradayPricesAggregatedDataContract contract);

        Task<List<IntradayPricesAggregatedDataContract>> GetIntradayPricesAggregatedDataAsync(GetIntradayPricesAggregatedDataContract contract);

        IntradayPricesAggregatedDataContract GetLastIntradayPricesAggregatedData(int symbolId);

        Task<IntradayPricesAggregatedDataContract> GetLastIntradayPricesAggregatedDataAsync(int symbolId);

        List<IntradayPricesAggregatedDataContract> GetLastIntradayPricesAggregatedDataForSymbols(GetLastIntradayPricesAggregatedDataForSymbolsContract contract);

        Task<List<IntradayPricesAggregatedDataContract>> GetLastIntradayPricesAggregatedDataForSymbolsAsync(GetLastIntradayPricesAggregatedDataForSymbolsContract contract);

        List<IntradayPricesAggregatedDataContract> GetCurrentOneDayIntradayPricesAggregatedData(int symbolId);

        Task<List<IntradayPricesAggregatedDataContract>> GetCurrentOneDayIntradayPricesAggregatedDataAsync(int symbolId);
    }

    public interface IIntradayPricesClientByContextKeyApiMethods : IIntradayPricesClientByLicenseKeyApiMethods
    {
    }

    public interface IIntradayPricesClientByOrganizationApiMethods
    {
    }

    public partial interface IIntradayPricesClient : IIntradayPricesClientByLicenseKeyApiMethods, IClientByLicenseKey<IIntradayPricesClient, IIntradayPricesClientForUser, IIntradayPricesClientForOrganization>
    {
    }

    public interface IIntradayPricesClientForUser : IIntradayPricesClientByContextKeyApiMethods, IClientByContext<IIntradayPricesClientForUser, IIntradayPricesClientForOrganization>
    {
    }

    public interface IIntradayPricesClientForOrganization : IIntradayPricesClientByOrganizationApiMethods
    {
    }

    public partial class IntradayPricesClient : BaseClient<IIntradayPricesClient, IIntradayPricesClientForUser, IIntradayPricesClientForOrganization, IntradayPricesClient>, IIntradayPricesClient, IIntradayPricesClientForUser, IIntradayPricesClientForOrganization
    {
        public List<IntradayPricesAggregatedDataContract> GetIntradayPricesAggregatedData(GetIntradayPricesAggregatedDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"intraday-prices/get-aggregated-data",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<IntradayPricesAggregatedDataContract>>(request);
        }

        public async Task<List<IntradayPricesAggregatedDataContract>> GetIntradayPricesAggregatedDataAsync(GetIntradayPricesAggregatedDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"intraday-prices/get-aggregated-data",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<IntradayPricesAggregatedDataContract>>(request);
        }

        public IntradayPricesAggregatedDataContract GetLastIntradayPricesAggregatedData(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"intraday-prices/get-last-aggregated-data/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<IntradayPricesAggregatedDataContract>(request);
        }

        public async Task<IntradayPricesAggregatedDataContract> GetLastIntradayPricesAggregatedDataAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"intraday-prices/get-last-aggregated-data/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<IntradayPricesAggregatedDataContract>(request);
        }

        public List<IntradayPricesAggregatedDataContract> GetLastIntradayPricesAggregatedDataForSymbols(GetLastIntradayPricesAggregatedDataForSymbolsContract contract)
        {
            var request = new RequestData
            {
                Url = $"intraday-prices/get-last-aggregated-data/by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<IntradayPricesAggregatedDataContract>>(request);
        }

        public async Task<List<IntradayPricesAggregatedDataContract>> GetLastIntradayPricesAggregatedDataForSymbolsAsync(GetLastIntradayPricesAggregatedDataForSymbolsContract contract)
        {
            var request = new RequestData
            {
                Url = $"intraday-prices/get-last-aggregated-data/by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<IntradayPricesAggregatedDataContract>>(request);
        }

        public List<IntradayPricesAggregatedDataContract> GetCurrentOneDayIntradayPricesAggregatedData(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"intraday-prices/get-current-one-day-aggregated-data/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<IntradayPricesAggregatedDataContract>>(request);
        }

        public async Task<List<IntradayPricesAggregatedDataContract>> GetCurrentOneDayIntradayPricesAggregatedDataAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"intraday-prices/get-current-one-day-aggregated-data/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<IntradayPricesAggregatedDataContract>>(request);
        }
    }

    public interface IInvestmentStrategiesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get list of Symbols that were recently added to strategies
        /// </summary>
        /// <param name="contract">Contract to get Symbols that were recently added to strategies</param>
        /// <returns>List of Symbols that were recently added to strategies with relevant information for each symbol</returns>
        List<StrategyCurrentResultContract> GetRecentStrategyResults(GetRecentStrategyResultsContract contract);

        /// <summary>
        /// Get list of Symbols that were recently added to strategies
        /// </summary>
        /// <param name="contract">Contract to get Symbols that were recently added to strategies</param>
        /// <returns>List of Symbols that were recently added to strategies with relevant information for each symbol</returns>
        Task<List<StrategyCurrentResultContract>> GetRecentStrategyResultsAsync(GetRecentStrategyResultsContract contract);

        /// <summary>
        /// Get the information about the unconfirmed imported position by the imported position ID.
        /// </summary>
        /// <param name="strategyType">The name of the strategy. Possible names can be found on Enumerations page.</param>
        /// <returns>The method returns contract with all results according to applied strategy.</returns>
        InvestmentStrategyWithResultsContract GetInvestmentStrategy(InvestmentStrategyTypes strategyType);

        /// <summary>
        /// Get the information about the unconfirmed imported position by the imported position ID.
        /// </summary>
        /// <param name="strategyType">The name of the strategy. Possible names can be found on Enumerations page.</param>
        /// <returns>The method returns contract with all results according to applied strategy.</returns>
        Task<InvestmentStrategyWithResultsContract> GetInvestmentStrategyAsync(InvestmentStrategyTypes strategyType);

        /// <summary>
        /// Find all Investment Strategies where results contain required symbolId
        /// </summary>
        /// <param name="symbolId">Symbol ID to find strategies</param>
        /// <returns>List of Investment Strategies</returns>
        List<InvestmentStrategyContract> GetStrategiesBySymbol(int symbolId);

        /// <summary>
        /// Find all Investment Strategies where results contain required symbolId
        /// </summary>
        /// <param name="symbolId">Symbol ID to find strategies</param>
        /// <returns>List of Investment Strategies</returns>
        Task<List<InvestmentStrategyContract>> GetStrategiesBySymbolAsync(int symbolId);

        Dictionary<int,List<InvestmentStrategyContract>> GetStrategiesBySymbols(List<int> symbolIds);

        Task<Dictionary<int,List<InvestmentStrategyContract>>> GetStrategiesBySymbolsAsync(List<int> symbolIds);

        /// <summary>
        /// Get list of Trending Tickers from TradeIdeas Billionaires strategy
        /// </summary>
        /// <returns>List of Trending Tickers with relevant information for each ticker</returns>
        List<TrendingTickerContract> GetTrendingTickers();

        /// <summary>
        /// Get list of Trending Tickers from TradeIdeas Billionaires strategy
        /// </summary>
        /// <returns>List of Trending Tickers with relevant information for each ticker</returns>
        Task<List<TrendingTickerContract>> GetTrendingTickersAsync();

        List<StrategyOptionResultContract> GetOptionsForStrategies(List<InvestmentStrategyTypes> investmentStrategies);

        Task<List<StrategyOptionResultContract>> GetOptionsForStrategiesAsync(List<InvestmentStrategyTypes> investmentStrategies);
    }

    public interface IInvestmentStrategiesClientByContextKeyApiMethods : IInvestmentStrategiesClientByLicenseKeyApiMethods
    {
    }

    public interface IInvestmentStrategiesClientByOrganizationApiMethods
    {
    }

    public partial interface IInvestmentStrategiesClient : IInvestmentStrategiesClientByLicenseKeyApiMethods, IClientByLicenseKey<IInvestmentStrategiesClient, IInvestmentStrategiesClientForUser, IInvestmentStrategiesClientForOrganization>
    {
    }

    public interface IInvestmentStrategiesClientForUser : IInvestmentStrategiesClientByContextKeyApiMethods, IClientByContext<IInvestmentStrategiesClientForUser, IInvestmentStrategiesClientForOrganization>
    {
    }

    public interface IInvestmentStrategiesClientForOrganization : IInvestmentStrategiesClientByOrganizationApiMethods
    {
    }

    public partial class InvestmentStrategiesClient : BaseClient<IInvestmentStrategiesClient, IInvestmentStrategiesClientForUser, IInvestmentStrategiesClientForOrganization, InvestmentStrategiesClient>, IInvestmentStrategiesClient, IInvestmentStrategiesClientForUser, IInvestmentStrategiesClientForOrganization
    {
        /// <summary>
        /// Get list of Symbols that were recently added to strategies
        /// </summary>
        /// <param name="contract">Contract to get Symbols that were recently added to strategies</param>
        /// <returns>List of Symbols that were recently added to strategies with relevant information for each symbol</returns>
        public List<StrategyCurrentResultContract> GetRecentStrategyResults(GetRecentStrategyResultsContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/strategies/recently-added",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<StrategyCurrentResultContract>>(request);
        }

        /// <summary>
        /// Get list of Symbols that were recently added to strategies
        /// </summary>
        /// <param name="contract">Contract to get Symbols that were recently added to strategies</param>
        /// <returns>List of Symbols that were recently added to strategies with relevant information for each symbol</returns>
        public async Task<List<StrategyCurrentResultContract>> GetRecentStrategyResultsAsync(GetRecentStrategyResultsContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/strategies/recently-added",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<StrategyCurrentResultContract>>(request);
        }

        /// <summary>
        /// Get the information about the unconfirmed imported position by the imported position ID.
        /// </summary>
        /// <param name="strategyType">The name of the strategy. Possible names can be found on Enumerations page.</param>
        /// <returns>The method returns contract with all results according to applied strategy.</returns>
        public InvestmentStrategyWithResultsContract GetInvestmentStrategy(InvestmentStrategyTypes strategyType)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/strategies/{strategyType}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<InvestmentStrategyWithResultsContract>(request);
        }

        /// <summary>
        /// Get the information about the unconfirmed imported position by the imported position ID.
        /// </summary>
        /// <param name="strategyType">The name of the strategy. Possible names can be found on Enumerations page.</param>
        /// <returns>The method returns contract with all results according to applied strategy.</returns>
        public async Task<InvestmentStrategyWithResultsContract> GetInvestmentStrategyAsync(InvestmentStrategyTypes strategyType)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/strategies/{strategyType}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<InvestmentStrategyWithResultsContract>(request);
        }

        /// <summary>
        /// Find all Investment Strategies where results contain required symbolId
        /// </summary>
        /// <param name="symbolId">Symbol ID to find strategies</param>
        /// <returns>List of Investment Strategies</returns>
        public List<InvestmentStrategyContract> GetStrategiesBySymbol(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/strategies/by-symbol/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<InvestmentStrategyContract>>(request);
        }

        /// <summary>
        /// Find all Investment Strategies where results contain required symbolId
        /// </summary>
        /// <param name="symbolId">Symbol ID to find strategies</param>
        /// <returns>List of Investment Strategies</returns>
        public async Task<List<InvestmentStrategyContract>> GetStrategiesBySymbolAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/strategies/by-symbol/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<InvestmentStrategyContract>>(request);
        }

        public Dictionary<int,List<InvestmentStrategyContract>> GetStrategiesBySymbols(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/strategies/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<Dictionary<int,List<InvestmentStrategyContract>>>(request);
        }

        public async Task<Dictionary<int,List<InvestmentStrategyContract>>> GetStrategiesBySymbolsAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/strategies/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<Dictionary<int,List<InvestmentStrategyContract>>>(request);
        }

        /// <summary>
        /// Get list of Trending Tickers from TradeIdeas Billionaires strategy
        /// </summary>
        /// <returns>List of Trending Tickers with relevant information for each ticker</returns>
        public List<TrendingTickerContract> GetTrendingTickers()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/trending-tickers",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<TrendingTickerContract>>(request);
        }

        /// <summary>
        /// Get list of Trending Tickers from TradeIdeas Billionaires strategy
        /// </summary>
        /// <returns>List of Trending Tickers with relevant information for each ticker</returns>
        public async Task<List<TrendingTickerContract>> GetTrendingTickersAsync()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/trending-tickers",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<TrendingTickerContract>>(request);
        }

        public List<StrategyOptionResultContract> GetOptionsForStrategies(List<InvestmentStrategyTypes> investmentStrategies)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/strategies/options",
                Method = HttpMethod.Post,
            };

            request.SetBody(investmentStrategies);

            return PerformRequest<List<StrategyOptionResultContract>>(request);
        }

        public async Task<List<StrategyOptionResultContract>> GetOptionsForStrategiesAsync(List<InvestmentStrategyTypes> investmentStrategies)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/strategies/options",
                Method = HttpMethod.Post,
            };

            request.SetBody(investmentStrategies);

            return await PerformRequestAsync<List<StrategyOptionResultContract>>(request);
        }
    }

    public interface ILikeFolioClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get LikeFolio values history for the symbol in the specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <param name="fromDate">Start date (example: /2017-11-01 ).</param>
        /// <param name="toDate">Finish date (example: /2017-11-01 ).</param>
        /// <returns>The method returns LikeFolio values for requested SymbolId in specified time range.</returns>
        List<LikeFolioValueContract> GetLikeFolioValues(int symbolId, DateTime fromDate, DateTime toDate);

        /// <summary>
        /// Get LikeFolio values history for the symbol in the specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <param name="fromDate">Start date (example: /2017-11-01 ).</param>
        /// <param name="toDate">Finish date (example: /2017-11-01 ).</param>
        /// <returns>The method returns LikeFolio values for requested SymbolId in specified time range.</returns>
        Task<List<LikeFolioValueContract>> GetLikeFolioValuesAsync(int symbolId, DateTime fromDate, DateTime toDate);

        /// <summary>
        /// Get LikeFolio value for the symbol on a specific trade date.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <param name="tradeDate">Trade date (example: /2017-11-11)</param>
        /// <returns>The method returns LikeFolio value for requested SymbolId on specified date.</returns>
        LikeFolioValueContract GetLatestLikeFolioValue(int symbolId, DateTime tradeDate);

        /// <summary>
        /// Get LikeFolio value for the symbol on a specific trade date.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <param name="tradeDate">Trade date (example: /2017-11-11)</param>
        /// <returns>The method returns LikeFolio value for requested SymbolId on specified date.</returns>
        Task<LikeFolioValueContract> GetLatestLikeFolioValueAsync(int symbolId, DateTime tradeDate);
    }

    public interface ILikeFolioClientByContextKeyApiMethods : ILikeFolioClientByLicenseKeyApiMethods
    {
    }

    public interface ILikeFolioClientByOrganizationApiMethods
    {
    }

    public partial interface ILikeFolioClient : ILikeFolioClientByLicenseKeyApiMethods, IClientByLicenseKey<ILikeFolioClient, ILikeFolioClientForUser, ILikeFolioClientForOrganization>
    {
    }

    public interface ILikeFolioClientForUser : ILikeFolioClientByContextKeyApiMethods, IClientByContext<ILikeFolioClientForUser, ILikeFolioClientForOrganization>
    {
    }

    public interface ILikeFolioClientForOrganization : ILikeFolioClientByOrganizationApiMethods
    {
    }

    public partial class LikeFolioClient : BaseClient<ILikeFolioClient, ILikeFolioClientForUser, ILikeFolioClientForOrganization, LikeFolioClient>, ILikeFolioClient, ILikeFolioClientForUser, ILikeFolioClientForOrganization
    {
        /// <summary>
        /// Get LikeFolio values history for the symbol in the specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <param name="fromDate">Start date (example: /2017-11-01 ).</param>
        /// <param name="toDate">Finish date (example: /2017-11-01 ).</param>
        /// <returns>The method returns LikeFolio values for requested SymbolId in specified time range.</returns>
        public List<LikeFolioValueContract> GetLikeFolioValues(int symbolId, DateTime fromDate, DateTime toDate)
        {
            var request = new RequestData
            {
                Url = $"likefolio/{symbolId}/{fromDate:yyyy-MM-dd}/{toDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<LikeFolioValueContract>>(request);
        }

        /// <summary>
        /// Get LikeFolio values history for the symbol in the specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <param name="fromDate">Start date (example: /2017-11-01 ).</param>
        /// <param name="toDate">Finish date (example: /2017-11-01 ).</param>
        /// <returns>The method returns LikeFolio values for requested SymbolId in specified time range.</returns>
        public async Task<List<LikeFolioValueContract>> GetLikeFolioValuesAsync(int symbolId, DateTime fromDate, DateTime toDate)
        {
            var request = new RequestData
            {
                Url = $"likefolio/{symbolId}/{fromDate:yyyy-MM-dd}/{toDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<LikeFolioValueContract>>(request);
        }

        /// <summary>
        /// Get LikeFolio value for the symbol on a specific trade date.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <param name="tradeDate">Trade date (example: /2017-11-11)</param>
        /// <returns>The method returns LikeFolio value for requested SymbolId on specified date.</returns>
        public LikeFolioValueContract GetLatestLikeFolioValue(int symbolId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"likefolio/latest/{symbolId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<LikeFolioValueContract>(request);
        }

        /// <summary>
        /// Get LikeFolio value for the symbol on a specific trade date.
        /// </summary>
        /// <param name="symbolId">Symbol Id.</param>
        /// <param name="tradeDate">Trade date (example: /2017-11-11)</param>
        /// <returns>The method returns LikeFolio value for requested SymbolId on specified date.</returns>
        public async Task<LikeFolioValueContract> GetLatestLikeFolioValueAsync(int symbolId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"likefolio/latest/{symbolId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<LikeFolioValueContract>(request);
        }
    }

    public interface ILoginClientByLicenseKeyApiMethods
    {
        LoginResultContract Login(LoginWithCredentialsContract loginInfo);

        Task<LoginResultContract> LoginAsync(LoginWithCredentialsContract loginInfo);
    }

    public interface ILoginClientByContextKeyApiMethods : ILoginClientByLicenseKeyApiMethods
    {
    }

    public interface ILoginClientByOrganizationApiMethods
    {
    }

    public partial interface ILoginClient : ILoginClientByLicenseKeyApiMethods, IClientByLicenseKey<ILoginClient, ILoginClientForUser, ILoginClientForOrganization>
    {
    }

    public interface ILoginClientForUser : ILoginClientByContextKeyApiMethods, IClientByContext<ILoginClientForUser, ILoginClientForOrganization>
    {
    }

    public interface ILoginClientForOrganization : ILoginClientByOrganizationApiMethods
    {
    }

    public partial class LoginClient : BaseClient<ILoginClient, ILoginClientForUser, ILoginClientForOrganization, LoginClient>, ILoginClient, ILoginClientForUser, ILoginClientForOrganization
    {
        public LoginResultContract Login(LoginWithCredentialsContract loginInfo)
        {
            var request = new RequestData
            {
                Url = $"login",
                Method = HttpMethod.Post,
            };

            request.SetBody(loginInfo);

            return PerformRequest<LoginResultContract>(request);
        }

        public async Task<LoginResultContract> LoginAsync(LoginWithCredentialsContract loginInfo)
        {
            var request = new RequestData
            {
                Url = $"login",
                Method = HttpMethod.Post,
            };

            request.SetBody(loginInfo);

            return await PerformRequestAsync<LoginResultContract>(request);
        }
    }

    public interface ILoginTrackingClientByLicenseKeyApiMethods
    {
    }

    public interface ILoginTrackingClientByContextKeyApiMethods : ILoginTrackingClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get information about last successful login attempts into all products.
        /// If there were no successful login attempts into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <returns>List of successful login attempts into all products.</returns>
        List<LoginDateByProductContract> GetAllSuccessfulLoginAttempts();

        /// <summary>
        /// Get information about last successful login attempts into all products.
        /// If there were no successful login attempts into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <returns>List of successful login attempts into all products.</returns>
        Task<List<LoginDateByProductContract>> GetAllSuccessfulLoginAttemptsAsync();

        /// <summary>
        /// Get information about last successful login attempts into any existing product.
        /// If there were no successful login attempts then null will be returned.
        /// </summary>
        /// <returns>Login date with the corresponding product.</returns>
        LoginDateByProductContract GetLastLoginDate();

        /// <summary>
        /// Get information about last successful login attempts into any existing product.
        /// If there were no successful login attempts then null will be returned.
        /// </summary>
        /// <returns>Login date with the corresponding product.</returns>
        Task<LoginDateByProductContract> GetLastLoginDateAsync();

        void TrackUserVisit(UserVisitContract contract);

        Task TrackUserVisitAsync(UserVisitContract contract);

        /// <summary>
        /// Get information about last user visits into all products.
        /// If there were no user visit into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <returns>List of user visits into all products.</returns>
        List<VisitDateByProductContract> GetAllLastUserVisits();

        /// <summary>
        /// Get information about last user visits into all products.
        /// If there were no user visit into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <returns>List of user visits into all products.</returns>
        Task<List<VisitDateByProductContract>> GetAllLastUserVisitsAsync();
    }

    public interface ILoginTrackingClientByOrganizationApiMethods
    {
    }

    public partial interface ILoginTrackingClient : ILoginTrackingClientByLicenseKeyApiMethods, IClientByLicenseKey<ILoginTrackingClient, ILoginTrackingClientForUser, ILoginTrackingClientForOrganization>
    {
    }

    public interface ILoginTrackingClientForUser : ILoginTrackingClientByContextKeyApiMethods, IClientByContext<ILoginTrackingClientForUser, ILoginTrackingClientForOrganization>
    {
    }

    public interface ILoginTrackingClientForOrganization : ILoginTrackingClientByOrganizationApiMethods
    {
    }

    public partial class LoginTrackingClient : BaseClient<ILoginTrackingClient, ILoginTrackingClientForUser, ILoginTrackingClientForOrganization, LoginTrackingClient>, ILoginTrackingClient, ILoginTrackingClientForUser, ILoginTrackingClientForOrganization
    {
        /// <summary>
        /// Get information about last successful login attempts into all products.
        /// If there were no successful login attempts into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <returns>List of successful login attempts into all products.</returns>
        public List<LoginDateByProductContract> GetAllSuccessfulLoginAttempts()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/login-attempts/all-successful-last",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<LoginDateByProductContract>>(request);
        }

        /// <summary>
        /// Get information about last successful login attempts into all products.
        /// If there were no successful login attempts into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <returns>List of successful login attempts into all products.</returns>
        public async Task<List<LoginDateByProductContract>> GetAllSuccessfulLoginAttemptsAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/login-attempts/all-successful-last",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<LoginDateByProductContract>>(request);
        }

        /// <summary>
        /// Get information about last successful login attempts into any existing product.
        /// If there were no successful login attempts then null will be returned.
        /// </summary>
        /// <returns>Login date with the corresponding product.</returns>
        public LoginDateByProductContract GetLastLoginDate()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/last-login-date/any-product",
                Method = HttpMethod.Get,
            };

            return PerformRequest<LoginDateByProductContract>(request);
        }

        /// <summary>
        /// Get information about last successful login attempts into any existing product.
        /// If there were no successful login attempts then null will be returned.
        /// </summary>
        /// <returns>Login date with the corresponding product.</returns>
        public async Task<LoginDateByProductContract> GetLastLoginDateAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/last-login-date/any-product",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<LoginDateByProductContract>(request);
        }

        public void TrackUserVisit(UserVisitContract contract)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/track-visit",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task TrackUserVisitAsync(UserVisitContract contract)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/track-visit",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get information about last user visits into all products.
        /// If there were no user visit into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <returns>List of user visits into all products.</returns>
        public List<VisitDateByProductContract> GetAllLastUserVisits()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/track-visit/all-last-user-visits",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<VisitDateByProductContract>>(request);
        }

        /// <summary>
        /// Get information about last user visits into all products.
        /// If there were no user visit into the product, then corresponding product will be missing in the result list.
        /// </summary>
        /// <returns>List of user visits into all products.</returns>
        public async Task<List<VisitDateByProductContract>> GetAllLastUserVisitsAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/track-visit/all-last-user-visits",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<VisitDateByProductContract>>(request);
        }
    }

    public interface IMarketOutlooksClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the information about Market Outlooks by Market Outlook Group ID.
        /// </summary>
        /// <param name="groupId">ID of the market outlook group</param>
        /// <returns>The method returns a list of market outlook data.</returns>
        List<MarketOutlookContract> GetMarketOutlooks(MarketOutlookGroupIds groupId);

        /// <summary>
        /// Get the information about Market Outlooks by Market Outlook Group ID.
        /// </summary>
        /// <param name="groupId">ID of the market outlook group</param>
        /// <returns>The method returns a list of market outlook data.</returns>
        Task<List<MarketOutlookContract>> GetMarketOutlooksAsync(MarketOutlookGroupIds groupId);

        List<MarketOutlookResultContract> GetMarketOutlooks(List<MarketOutlookTypes> marketOutlookTypes);

        Task<List<MarketOutlookResultContract>> GetMarketOutlooksAsync(List<MarketOutlookTypes> marketOutlookTypes);

        /// <summary>
        /// Get the information about Market Outlooks by Market Outlook Group ID.
        /// </summary>
        /// <param name="groupId">ID of the market outlook group</param>
        /// <returns>The method returns the list of contracts with relevant data according to requested market outlook group.</returns>
        List<MarketOutlookResultContract> GetMarketOutlooksByGroup(MarketOutlookGroupIds groupId);

        /// <summary>
        /// Get the information about Market Outlooks by Market Outlook Group ID.
        /// </summary>
        /// <param name="groupId">ID of the market outlook group</param>
        /// <returns>The method returns the list of contracts with relevant data according to requested market outlook group.</returns>
        Task<List<MarketOutlookResultContract>> GetMarketOutlooksByGroupAsync(MarketOutlookGroupIds groupId);

        /// <summary>
        /// Get the information about Market Outlooks state on a specific date.
        /// </summary>
        /// <param name="contract">Parameters to get historical Market Outlook state</param>
        /// <returns>The method returns the list of contracts with relevant data according to requested market outlook group.</returns>
        List<HistoricalMarketOutlookResultContract> GetHistoricalMarketOutlooks(GetHistoricalMarketOutlooksContract contract);

        /// <summary>
        /// Get the information about Market Outlooks state on a specific date.
        /// </summary>
        /// <param name="contract">Parameters to get historical Market Outlook state</param>
        /// <returns>The method returns the list of contracts with relevant data according to requested market outlook group.</returns>
        Task<List<HistoricalMarketOutlookResultContract>> GetHistoricalMarketOutlooksAsync(GetHistoricalMarketOutlooksContract contract);

        /// <summary>
        /// Get the information about all market outlooks.
        /// </summary>
        /// <returns>The method returns the list of contracts with relevant data for all market outlook types.</returns>
        List<MarketOutlookResultContract> GetAllMarketOutlooks();

        /// <summary>
        /// Get the information about all market outlooks.
        /// </summary>
        /// <returns>The method returns the list of contracts with relevant data for all market outlook types.</returns>
        Task<List<MarketOutlookResultContract>> GetAllMarketOutlooksAsync();

        /// <summary>
        /// Get weighted moving average for the pure quant indicator.
        /// </summary>
        /// <param name="contract">Contract to get WMA for the pure quant indicator.</param>
        /// <returns>The method returns weighted moving average for the requested pure quant indicator.</returns>
        decimal GetWmaPureQuantPercent(GetWmaPureQuantPercentContract contract);

        /// <summary>
        /// Get weighted moving average for the pure quant indicator.
        /// </summary>
        /// <param name="contract">Contract to get WMA for the pure quant indicator.</param>
        /// <returns>The method returns weighted moving average for the requested pure quant indicator.</returns>
        Task<decimal> GetWmaPureQuantPercentAsync(GetWmaPureQuantPercentContract contract);

        /// <summary>
        /// Get availability of market outlook for a symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return availability of market outlook for a symbol.</returns>
        bool IsMarketOutlookAvailable(int symbolId);

        /// <summary>
        /// Get availability of market outlook for a symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return availability of market outlook for a symbol.</returns>
        Task<bool> IsMarketOutlookAvailableAsync(int symbolId);
    }

    public interface IMarketOutlooksClientByContextKeyApiMethods : IMarketOutlooksClientByLicenseKeyApiMethods
    {
    }

    public interface IMarketOutlooksClientByOrganizationApiMethods
    {
    }

    public partial interface IMarketOutlooksClient : IMarketOutlooksClientByLicenseKeyApiMethods, IClientByLicenseKey<IMarketOutlooksClient, IMarketOutlooksClientForUser, IMarketOutlooksClientForOrganization>
    {
    }

    public interface IMarketOutlooksClientForUser : IMarketOutlooksClientByContextKeyApiMethods, IClientByContext<IMarketOutlooksClientForUser, IMarketOutlooksClientForOrganization>
    {
    }

    public interface IMarketOutlooksClientForOrganization : IMarketOutlooksClientByOrganizationApiMethods
    {
    }

    public partial class MarketOutlooksClient : BaseClient<IMarketOutlooksClient, IMarketOutlooksClientForUser, IMarketOutlooksClientForOrganization, MarketOutlooksClient>, IMarketOutlooksClient, IMarketOutlooksClientForUser, IMarketOutlooksClientForOrganization
    {
        /// <summary>
        /// Get the information about Market Outlooks by Market Outlook Group ID.
        /// </summary>
        /// <param name="groupId">ID of the market outlook group</param>
        /// <returns>The method returns a list of market outlook data.</returns>
        public List<MarketOutlookContract> GetMarketOutlooks(MarketOutlookGroupIds groupId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/{groupId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<MarketOutlookContract>>(request);
        }

        /// <summary>
        /// Get the information about Market Outlooks by Market Outlook Group ID.
        /// </summary>
        /// <param name="groupId">ID of the market outlook group</param>
        /// <returns>The method returns a list of market outlook data.</returns>
        public async Task<List<MarketOutlookContract>> GetMarketOutlooksAsync(MarketOutlookGroupIds groupId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/{groupId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<MarketOutlookContract>>(request);
        }

        public List<MarketOutlookResultContract> GetMarketOutlooks(List<MarketOutlookTypes> marketOutlookTypes)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/get-by-types",
                Method = HttpMethod.Post,
            };

            request.SetBody(marketOutlookTypes);

            return PerformRequest<List<MarketOutlookResultContract>>(request);
        }

        public async Task<List<MarketOutlookResultContract>> GetMarketOutlooksAsync(List<MarketOutlookTypes> marketOutlookTypes)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/get-by-types",
                Method = HttpMethod.Post,
            };

            request.SetBody(marketOutlookTypes);

            return await PerformRequestAsync<List<MarketOutlookResultContract>>(request);
        }

        /// <summary>
        /// Get the information about Market Outlooks by Market Outlook Group ID.
        /// </summary>
        /// <param name="groupId">ID of the market outlook group</param>
        /// <returns>The method returns the list of contracts with relevant data according to requested market outlook group.</returns>
        public List<MarketOutlookResultContract> GetMarketOutlooksByGroup(MarketOutlookGroupIds groupId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/by-group/{groupId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<MarketOutlookResultContract>>(request);
        }

        /// <summary>
        /// Get the information about Market Outlooks by Market Outlook Group ID.
        /// </summary>
        /// <param name="groupId">ID of the market outlook group</param>
        /// <returns>The method returns the list of contracts with relevant data according to requested market outlook group.</returns>
        public async Task<List<MarketOutlookResultContract>> GetMarketOutlooksByGroupAsync(MarketOutlookGroupIds groupId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/by-group/{groupId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<MarketOutlookResultContract>>(request);
        }

        /// <summary>
        /// Get the information about Market Outlooks state on a specific date.
        /// </summary>
        /// <param name="contract">Parameters to get historical Market Outlook state</param>
        /// <returns>The method returns the list of contracts with relevant data according to requested market outlook group.</returns>
        public List<HistoricalMarketOutlookResultContract> GetHistoricalMarketOutlooks(GetHistoricalMarketOutlooksContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/historical-market-outlooks/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<HistoricalMarketOutlookResultContract>>(request);
        }

        /// <summary>
        /// Get the information about Market Outlooks state on a specific date.
        /// </summary>
        /// <param name="contract">Parameters to get historical Market Outlook state</param>
        /// <returns>The method returns the list of contracts with relevant data according to requested market outlook group.</returns>
        public async Task<List<HistoricalMarketOutlookResultContract>> GetHistoricalMarketOutlooksAsync(GetHistoricalMarketOutlooksContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/historical-market-outlooks/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<HistoricalMarketOutlookResultContract>>(request);
        }

        /// <summary>
        /// Get the information about all market outlooks.
        /// </summary>
        /// <returns>The method returns the list of contracts with relevant data for all market outlook types.</returns>
        public List<MarketOutlookResultContract> GetAllMarketOutlooks()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/get-all",
                Method = HttpMethod.Post,
            };

            return PerformRequest<List<MarketOutlookResultContract>>(request);
        }

        /// <summary>
        /// Get the information about all market outlooks.
        /// </summary>
        /// <returns>The method returns the list of contracts with relevant data for all market outlook types.</returns>
        public async Task<List<MarketOutlookResultContract>> GetAllMarketOutlooksAsync()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/get-all",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<List<MarketOutlookResultContract>>(request);
        }

        /// <summary>
        /// Get weighted moving average for the pure quant indicator.
        /// </summary>
        /// <param name="contract">Contract to get WMA for the pure quant indicator.</param>
        /// <returns>The method returns weighted moving average for the requested pure quant indicator.</returns>
        public decimal GetWmaPureQuantPercent(GetWmaPureQuantPercentContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/get-wma-pure-quant-percent",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<decimal>(request);
        }

        /// <summary>
        /// Get weighted moving average for the pure quant indicator.
        /// </summary>
        /// <param name="contract">Contract to get WMA for the pure quant indicator.</param>
        /// <returns>The method returns weighted moving average for the requested pure quant indicator.</returns>
        public async Task<decimal> GetWmaPureQuantPercentAsync(GetWmaPureQuantPercentContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/get-wma-pure-quant-percent",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<decimal>(request);
        }

        /// <summary>
        /// Get availability of market outlook for a symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return availability of market outlook for a symbol.</returns>
        public bool IsMarketOutlookAvailable(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/is-available/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<bool>(request);
        }

        /// <summary>
        /// Get availability of market outlook for a symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return availability of market outlook for a symbol.</returns>
        public async Task<bool> IsMarketOutlookAvailableAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/market-outlooks/is-available/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<bool>(request);
        }
    }

    public interface IMobileDevicesClientByLicenseKeyApiMethods
    {
    }

    public interface IMobileDevicesClientByContextKeyApiMethods : IMobileDevicesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Assign device identifier to current user.
        /// Device ID should exist in the database at the moment when we try to assign it to user.
        /// It is saved to the database when we create UserContext by DeviceId.
        /// Device can be assigned only to a single user, so if multiple users are using the same device, then we will store information only about last usage
        /// </summary>
        /// <param name="contract">Identifier of mobile device</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        void AssignDeviceId(RemoteDeviceIdContract contract);

        /// <summary>
        /// Assign device identifier to current user.
        /// Device ID should exist in the database at the moment when we try to assign it to user.
        /// It is saved to the database when we create UserContext by DeviceId.
        /// Device can be assigned only to a single user, so if multiple users are using the same device, then we will store information only about last usage
        /// </summary>
        /// <param name="contract">Identifier of mobile device</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        Task AssignDeviceIdAsync(RemoteDeviceIdContract contract);

        /// <summary>
        /// Update Token to receive push notifications.
        /// Device ID must already exist in our DB before Token can be assigned.
        /// </summary>
        /// <param name="contract">Contract to update Token that will be used for push notifications</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        void UpdateToken(UpdatePushNotificationTokenContract contract);

        /// <summary>
        /// Update Token to receive push notifications.
        /// Device ID must already exist in our DB before Token can be assigned.
        /// </summary>
        /// <param name="contract">Contract to update Token that will be used for push notifications</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        Task UpdateTokenAsync(UpdatePushNotificationTokenContract contract);

        /// <summary>
        /// Remove push notifications token assosiated with Device ID.
        /// Device ID must already exist in our DB.
        /// </summary>
        /// <param name="contract">Identifier of mobile device</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        void ClearToken(RemoteDeviceIdContract contract);

        /// <summary>
        /// Remove push notifications token assosiated with Device ID.
        /// Device ID must already exist in our DB.
        /// </summary>
        /// <param name="contract">Identifier of mobile device</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        Task ClearTokenAsync(RemoteDeviceIdContract contract);
    }

    public interface IMobileDevicesClientByOrganizationApiMethods
    {
    }

    public partial interface IMobileDevicesClient : IMobileDevicesClientByLicenseKeyApiMethods, IClientByLicenseKey<IMobileDevicesClient, IMobileDevicesClientForUser, IMobileDevicesClientForOrganization>
    {
    }

    public interface IMobileDevicesClientForUser : IMobileDevicesClientByContextKeyApiMethods, IClientByContext<IMobileDevicesClientForUser, IMobileDevicesClientForOrganization>
    {
    }

    public interface IMobileDevicesClientForOrganization : IMobileDevicesClientByOrganizationApiMethods
    {
    }

    public partial class MobileDevicesClient : BaseClient<IMobileDevicesClient, IMobileDevicesClientForUser, IMobileDevicesClientForOrganization, MobileDevicesClient>, IMobileDevicesClient, IMobileDevicesClientForUser, IMobileDevicesClientForOrganization
    {
        /// <summary>
        /// Assign device identifier to current user.
        /// Device ID should exist in the database at the moment when we try to assign it to user.
        /// It is saved to the database when we create UserContext by DeviceId.
        /// Device can be assigned only to a single user, so if multiple users are using the same device, then we will store information only about last usage
        /// </summary>
        /// <param name="contract">Identifier of mobile device</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        public void AssignDeviceId(RemoteDeviceIdContract contract)
        {
            var request = new RequestData
            {
                Url = $"mobile-devices/assign",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Assign device identifier to current user.
        /// Device ID should exist in the database at the moment when we try to assign it to user.
        /// It is saved to the database when we create UserContext by DeviceId.
        /// Device can be assigned only to a single user, so if multiple users are using the same device, then we will store information only about last usage
        /// </summary>
        /// <param name="contract">Identifier of mobile device</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        public async Task AssignDeviceIdAsync(RemoteDeviceIdContract contract)
        {
            var request = new RequestData
            {
                Url = $"mobile-devices/assign",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Update Token to receive push notifications.
        /// Device ID must already exist in our DB before Token can be assigned.
        /// </summary>
        /// <param name="contract">Contract to update Token that will be used for push notifications</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        public void UpdateToken(UpdatePushNotificationTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"mobile-devices/update-token",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Update Token to receive push notifications.
        /// Device ID must already exist in our DB before Token can be assigned.
        /// </summary>
        /// <param name="contract">Contract to update Token that will be used for push notifications</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        public async Task UpdateTokenAsync(UpdatePushNotificationTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"mobile-devices/update-token",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Remove push notifications token assosiated with Device ID.
        /// Device ID must already exist in our DB.
        /// </summary>
        /// <param name="contract">Identifier of mobile device</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        public void ClearToken(RemoteDeviceIdContract contract)
        {
            var request = new RequestData
            {
                Url = $"mobile-devices/clear-token",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Remove push notifications token assosiated with Device ID.
        /// Device ID must already exist in our DB.
        /// </summary>
        /// <param name="contract">Identifier of mobile device</param>
        /// <returns>The method returns HTTP status 200 (OK) in case of success</returns>
        public async Task ClearTokenAsync(RemoteDeviceIdContract contract)
        {
            var request = new RequestData
            {
                Url = $"mobile-devices/clear-token",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }
    }

    public interface IMobileOperatorsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the information about the requested mobile operator.
        /// </summary>
        /// <param name="mobileOperatorId">Mobile operator ID.</param>
        /// <returns>The method returns the information about the requested mobile operator.</returns>
        MobileOperatorContract Get(int mobileOperatorId);

        /// <summary>
        /// Get the information about the requested mobile operator.
        /// </summary>
        /// <param name="mobileOperatorId">Mobile operator ID.</param>
        /// <returns>The method returns the information about the requested mobile operator.</returns>
        Task<MobileOperatorContract> GetAsync(int mobileOperatorId);

        /// <summary>
        /// Get the information about all mobile operators supported by the system.
        /// </summary>
        /// <returns>The method returns the list containing the information about all mobile operators supported by the system.</returns>
        List<MobileOperatorContract> GetAll();

        /// <summary>
        /// Get the information about all mobile operators supported by the system.
        /// </summary>
        /// <returns>The method returns the list containing the information about all mobile operators supported by the system.</returns>
        Task<List<MobileOperatorContract>> GetAllAsync();
    }

    public interface IMobileOperatorsClientByContextKeyApiMethods : IMobileOperatorsClientByLicenseKeyApiMethods
    {
    }

    public interface IMobileOperatorsClientByOrganizationApiMethods
    {
    }

    public partial interface IMobileOperatorsClient : IMobileOperatorsClientByLicenseKeyApiMethods, IClientByLicenseKey<IMobileOperatorsClient, IMobileOperatorsClientForUser, IMobileOperatorsClientForOrganization>
    {
    }

    public interface IMobileOperatorsClientForUser : IMobileOperatorsClientByContextKeyApiMethods, IClientByContext<IMobileOperatorsClientForUser, IMobileOperatorsClientForOrganization>
    {
    }

    public interface IMobileOperatorsClientForOrganization : IMobileOperatorsClientByOrganizationApiMethods
    {
    }

    public partial class MobileOperatorsClient : BaseClient<IMobileOperatorsClient, IMobileOperatorsClientForUser, IMobileOperatorsClientForOrganization, MobileOperatorsClient>, IMobileOperatorsClient, IMobileOperatorsClientForUser, IMobileOperatorsClientForOrganization
    {
        /// <summary>
        /// Get the information about the requested mobile operator.
        /// </summary>
        /// <param name="mobileOperatorId">Mobile operator ID.</param>
        /// <returns>The method returns the information about the requested mobile operator.</returns>
        public MobileOperatorContract Get(int mobileOperatorId)
        {
            var request = new RequestData
            {
                Url = $"mobileoperators/{mobileOperatorId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<MobileOperatorContract>(request);
        }

        /// <summary>
        /// Get the information about the requested mobile operator.
        /// </summary>
        /// <param name="mobileOperatorId">Mobile operator ID.</param>
        /// <returns>The method returns the information about the requested mobile operator.</returns>
        public async Task<MobileOperatorContract> GetAsync(int mobileOperatorId)
        {
            var request = new RequestData
            {
                Url = $"mobileoperators/{mobileOperatorId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<MobileOperatorContract>(request);
        }

        /// <summary>
        /// Get the information about all mobile operators supported by the system.
        /// </summary>
        /// <returns>The method returns the list containing the information about all mobile operators supported by the system.</returns>
        public List<MobileOperatorContract> GetAll()
        {
            var request = new RequestData
            {
                Url = $"mobileoperators",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<MobileOperatorContract>>(request);
        }

        /// <summary>
        /// Get the information about all mobile operators supported by the system.
        /// </summary>
        /// <returns>The method returns the list containing the information about all mobile operators supported by the system.</returns>
        public async Task<List<MobileOperatorContract>> GetAllAsync()
        {
            var request = new RequestData
            {
                Url = $"mobileoperators",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<MobileOperatorContract>>(request);
        }
    }

    public interface INewsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get news metadata (preview information) by ID of the news.
        /// </summary>
        /// <param name="newsId">ID of the news.</param>
        /// <returns>Preview information for requested ID of the news.</returns>
        NewsMetadataContract GetNewsMetadataByNewsId(int newsId);

        /// <summary>
        /// Get news metadata (preview information) by ID of the news.
        /// </summary>
        /// <param name="newsId">ID of the news.</param>
        /// <returns>Preview information for requested ID of the news.</returns>
        Task<NewsMetadataContract> GetNewsMetadataByNewsIdAsync(int newsId);

        /// <summary>
        /// Get the list of object with preview information for news.
        /// Each resulting object contains the data like title, publication date, etc.
        /// It doesn't contain the article content.
        /// </summary>
        /// <param name="contract">Parameters to get news metadata (preview info)</param>
        /// <returns>List of objects with preview information for news.</returns>
        List<NewsMetadataContract> GetNewsMetadata(GetNewsMetadataContract contract);

        /// <summary>
        /// Get the list of object with preview information for news.
        /// Each resulting object contains the data like title, publication date, etc.
        /// It doesn't contain the article content.
        /// </summary>
        /// <param name="contract">Parameters to get news metadata (preview info)</param>
        /// <returns>List of objects with preview information for news.</returns>
        Task<List<NewsMetadataContract>> GetNewsMetadataAsync(GetNewsMetadataContract contract);

        NewsMetadataContract EditNewsMetadata(EditNewsMetadataContract contract);

        Task<NewsMetadataContract> EditNewsMetadataAsync(EditNewsMetadataContract contract);

        /// <summary>
        /// Get the content (full article) of the news.
        /// </summary>
        /// <param name="newsId">ID of the news.</param>
        /// <returns>News content (full article)</returns>
        NewsContentContract GetNewsContent(int newsId);

        /// <summary>
        /// Get the content (full article) of the news.
        /// </summary>
        /// <param name="newsId">ID of the news.</param>
        /// <returns>News content (full article)</returns>
        Task<NewsContentContract> GetNewsContentAsync(int newsId);

        /// <summary>
        /// Get the list of all available News sources.
        /// </summary>
        /// <returns>The list of all available News sources</returns>
        List<NewsSourceContract> GetAllNewsSources();

        /// <summary>
        /// Get the list of all available News sources.
        /// </summary>
        /// <returns>The list of all available News sources</returns>
        Task<List<NewsSourceContract>> GetAllNewsSourcesAsync();
    }

    public interface INewsClientByContextKeyApiMethods : INewsClientByLicenseKeyApiMethods
    {
    }

    public interface INewsClientByOrganizationApiMethods
    {
    }

    public partial interface INewsClient : INewsClientByLicenseKeyApiMethods, IClientByLicenseKey<INewsClient, INewsClientForUser, INewsClientForOrganization>
    {
    }

    public interface INewsClientForUser : INewsClientByContextKeyApiMethods, IClientByContext<INewsClientForUser, INewsClientForOrganization>
    {
    }

    public interface INewsClientForOrganization : INewsClientByOrganizationApiMethods
    {
    }

    public partial class NewsClient : BaseClient<INewsClient, INewsClientForUser, INewsClientForOrganization, NewsClient>, INewsClient, INewsClientForUser, INewsClientForOrganization
    {
        /// <summary>
        /// Get news metadata (preview information) by ID of the news.
        /// </summary>
        /// <param name="newsId">ID of the news.</param>
        /// <returns>Preview information for requested ID of the news.</returns>
        public NewsMetadataContract GetNewsMetadataByNewsId(int newsId)
        {
            var request = new RequestData
            {
                Url = $"news/get-metadata-by-newsId/{newsId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<NewsMetadataContract>(request);
        }

        /// <summary>
        /// Get news metadata (preview information) by ID of the news.
        /// </summary>
        /// <param name="newsId">ID of the news.</param>
        /// <returns>Preview information for requested ID of the news.</returns>
        public async Task<NewsMetadataContract> GetNewsMetadataByNewsIdAsync(int newsId)
        {
            var request = new RequestData
            {
                Url = $"news/get-metadata-by-newsId/{newsId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<NewsMetadataContract>(request);
        }

        /// <summary>
        /// Get the list of object with preview information for news.
        /// Each resulting object contains the data like title, publication date, etc.
        /// It doesn't contain the article content.
        /// </summary>
        /// <param name="contract">Parameters to get news metadata (preview info)</param>
        /// <returns>List of objects with preview information for news.</returns>
        public List<NewsMetadataContract> GetNewsMetadata(GetNewsMetadataContract contract)
        {
            var request = new RequestData
            {
                Url = $"news/get-metadata",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<NewsMetadataContract>>(request);
        }

        /// <summary>
        /// Get the list of object with preview information for news.
        /// Each resulting object contains the data like title, publication date, etc.
        /// It doesn't contain the article content.
        /// </summary>
        /// <param name="contract">Parameters to get news metadata (preview info)</param>
        /// <returns>List of objects with preview information for news.</returns>
        public async Task<List<NewsMetadataContract>> GetNewsMetadataAsync(GetNewsMetadataContract contract)
        {
            var request = new RequestData
            {
                Url = $"news/get-metadata",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<NewsMetadataContract>>(request);
        }

        public NewsMetadataContract EditNewsMetadata(EditNewsMetadataContract contract)
        {
            var request = new RequestData
            {
                Url = $"news/edit-metadata",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<NewsMetadataContract>(request);
        }

        public async Task<NewsMetadataContract> EditNewsMetadataAsync(EditNewsMetadataContract contract)
        {
            var request = new RequestData
            {
                Url = $"news/edit-metadata",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<NewsMetadataContract>(request);
        }

        /// <summary>
        /// Get the content (full article) of the news.
        /// </summary>
        /// <param name="newsId">ID of the news.</param>
        /// <returns>News content (full article)</returns>
        public NewsContentContract GetNewsContent(int newsId)
        {
            var request = new RequestData
            {
                Url = $"news/{newsId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<NewsContentContract>(request);
        }

        /// <summary>
        /// Get the content (full article) of the news.
        /// </summary>
        /// <param name="newsId">ID of the news.</param>
        /// <returns>News content (full article)</returns>
        public async Task<NewsContentContract> GetNewsContentAsync(int newsId)
        {
            var request = new RequestData
            {
                Url = $"news/{newsId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<NewsContentContract>(request);
        }

        /// <summary>
        /// Get the list of all available News sources.
        /// </summary>
        /// <returns>The list of all available News sources</returns>
        public List<NewsSourceContract> GetAllNewsSources()
        {
            var request = new RequestData
            {
                Url = $"news/get-all-sources",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NewsSourceContract>>(request);
        }

        /// <summary>
        /// Get the list of all available News sources.
        /// </summary>
        /// <returns>The list of all available News sources</returns>
        public async Task<List<NewsSourceContract>> GetAllNewsSourcesAsync()
        {
            var request = new RequestData
            {
                Url = $"news/get-all-sources",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NewsSourceContract>>(request);
        }
    }

    public interface INewslettersClientByLicenseKeyApiMethods
    {
        List<NewslettersPortfolioWithSymbolRefDateContract> GetAllNewsletterPortfoliosBySymbol(int symbolId);

        Task<List<NewslettersPortfolioWithSymbolRefDateContract>> GetAllNewsletterPortfoliosBySymbolAsync(int symbolId);

        Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>> GetAllNewsletterPortfoliosBySymbols(List<int> symbolIds);

        Task<Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>>> GetAllNewsletterPortfoliosBySymbolsAsync(List<int> symbolIds);

        List<NewsletterPortfolioContract> GetAllNewsletterPortfolios();

        Task<List<NewsletterPortfolioContract>> GetAllNewsletterPortfoliosAsync();

        List<NewsletterPortfolioContract> GetPublisherNewsletterPortfolios(PublisherTypes publisherType);

        Task<List<NewsletterPortfolioContract>> GetPublisherNewsletterPortfoliosAsync(PublisherTypes publisherType);

        List<NewsletterPositionContract> GetNewsletterPortfolioClosedPositions(PublisherTypes publisherType, int portfolioId);

        Task<List<NewsletterPositionContract>> GetNewsletterPortfolioClosedPositionsAsync(PublisherTypes publisherType, int portfolioId);

        List<NewsletterPositionContract> GetNewsletterPortfolioPositions(PublisherTypes publisherType, int portfolioId);

        Task<List<NewsletterPositionContract>> GetNewsletterPortfolioPositionsAsync(PublisherTypes publisherType, int portfolioId);

        List<NewslettersPositionWithoutExtraFieldsContract> GetOpenPositionsWithoutExtraFieldsByPortfolios(List<NewslettersPortfolioKey> portfolioKeys);

        Task<List<NewslettersPositionWithoutExtraFieldsContract>> GetOpenPositionsWithoutExtraFieldsByPortfoliosAsync(List<NewslettersPortfolioKey> portfolioKeys);

        List<NewslettersPositionWithoutExtraFieldsContract> GetClosedPositionsWithoutExtraFieldsByPortfolios(List<NewslettersPortfolioKey> portfolioKeys);

        Task<List<NewslettersPositionWithoutExtraFieldsContract>> GetClosedPositionsWithoutExtraFieldsByPortfoliosAsync(List<NewslettersPortfolioKey> portfolioKeys);
    }

    public interface INewslettersClientByContextKeyApiMethods : INewslettersClientByLicenseKeyApiMethods
    {
        List<NewsletterSubscriptionContract> GetAllNewsletterSubscriptions();

        Task<List<NewsletterSubscriptionContract>> GetAllNewsletterSubscriptionsAsync();

        NewsletterSubscriptionContract GetPublisherNewsletterSubscriptions(PublisherTypes publisherType);

        Task<NewsletterSubscriptionContract> GetPublisherNewsletterSubscriptionsAsync(PublisherTypes publisherType);

        List<NewslettersPortfolioWithSymbolRefDateContract> GetNewsletterPortfoliosBySymbol(int symbolId);

        Task<List<NewslettersPortfolioWithSymbolRefDateContract>> GetNewsletterPortfoliosBySymbolAsync(int symbolId);

        Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>> GetNewsletterPortfoliosBySymbols(List<int> symbolIds);

        Task<Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>>> GetNewsletterPortfoliosBySymbolsAsync(List<int> symbolIds);

        /// <summary>
        /// Get list of Newsletter Positions that were recently added to all Newsletters that user is subscribed to.
        /// Method returns Newsletter Positions only from Portfolio Tracker + TradeStops Billionaires.
        /// </summary>
        /// <param name="contract">Parameters to get recently added Newsletter Positions</param>
        /// <returns>List of Newsletter Positions that were recently added to all Newsletter Portfolios that user is subscribed to</returns>
        List<RecentlyAddedNewsletterPositionContract> GetRecentlyAddedNewsletterPositions(GetRecentlyAddedNewsletterPositionsContract contract);

        /// <summary>
        /// Get list of Newsletter Positions that were recently added to all Newsletters that user is subscribed to.
        /// Method returns Newsletter Positions only from Portfolio Tracker + TradeStops Billionaires.
        /// </summary>
        /// <param name="contract">Parameters to get recently added Newsletter Positions</param>
        /// <returns>List of Newsletter Positions that were recently added to all Newsletter Portfolios that user is subscribed to</returns>
        Task<List<RecentlyAddedNewsletterPositionContract>> GetRecentlyAddedNewsletterPositionsAsync(GetRecentlyAddedNewsletterPositionsContract contract);

        CheckNewslettersCredentialsResultContract CheckCredentials(CheckNewslettersCredentialsContract contract);

        Task<CheckNewslettersCredentialsResultContract> CheckCredentialsAsync(CheckNewslettersCredentialsContract contract);

        /// <summary>
        /// Get list of newsletter portfolios statistic values
        /// </summary>
        /// <param name="input">Parameters to get newsletter portfolios statistics</param>
        /// <returns>List of newsletter portfolios statistic values</returns>
        List<NewsletterPortfolioStatsContract> GetNewsletterPortfoliosStats(GetNewsletterPortfolioStatsContract input);

        /// <summary>
        /// Get list of newsletter portfolios statistic values
        /// </summary>
        /// <param name="input">Parameters to get newsletter portfolios statistics</param>
        /// <returns>List of newsletter portfolios statistic values</returns>
        Task<List<NewsletterPortfolioStatsContract>> GetNewsletterPortfoliosStatsAsync(GetNewsletterPortfolioStatsContract input);

        SsiDistributionContract GetSsiDistributionByPortfolioIds(List<NewslettersPortfolioKey> portfolioIds);

        Task<SsiDistributionContract> GetSsiDistributionByPortfolioIdsAsync(List<NewslettersPortfolioKey> portfolioIds);

        /// <summary>
        /// Get global rank allocation for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">>List of portfolio Ids.</param>
        /// <returns>The method returns the list of global rank allocation for all active positions from the requested portfolios.</returns>
        List<GlobalRankAllocationContract> GetGlobalRankAllocation(GetNewsletterPortfoliosGlobalRankAllocationContract contract);

        /// <summary>
        /// Get global rank allocation for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">>List of portfolio Ids.</param>
        /// <returns>The method returns the list of global rank allocation for all active positions from the requested portfolios.</returns>
        Task<List<GlobalRankAllocationContract>> GetGlobalRankAllocationAsync(GetNewsletterPortfoliosGlobalRankAllocationContract contract);

        /// <summary>
        /// Get VQ allocation for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        VqAllocationContract GetVqAllocation(GetNewsletterPortfoliosVqAllocationContract contract);

        /// <summary>
        /// Get VQ allocation for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        Task<VqAllocationContract> GetVqAllocationAsync(GetNewsletterPortfoliosVqAllocationContract contract);

        /// <summary>
        /// Get asset allocations by sectors and industries for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the array of allocations by sectors or industries for all active positions from the requested portfolios.</returns>
        NewslettersAssetAllocationContract GetAssetAllocation(GetNewsletterPortfoliosAssetAllocationContract contract);

        /// <summary>
        /// Get asset allocations by sectors and industries for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the array of allocations by sectors or industries for all active positions from the requested portfolios.</returns>
        Task<NewslettersAssetAllocationContract> GetAssetAllocationAsync(GetNewsletterPortfoliosAssetAllocationContract contract);

        /// <summary>
        /// Get how positions in selected newsletter portfolios are allocated by specified markets.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the array of allocations by markets for all active positions from the requested portfolios.</returns>
        NewsletterMarketAllocationContract GetMarketAllocation(GetNewsletterPortfoliosMarketAllocationContract contract);

        /// <summary>
        /// Get how positions in selected newsletter portfolios are allocated by specified markets.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the array of allocations by markets for all active positions from the requested portfolios.</returns>
        Task<NewsletterMarketAllocationContract> GetMarketAllocationAsync(GetNewsletterPortfoliosMarketAllocationContract contract);

        /// <summary>
        /// Get top newsletter positions from selected portfolios sorted by designated field.
        /// </summary>
        /// <param name="contract">Parameters to find top positions</param>
        /// <returns>List of top newsletter positions.</returns>
        List<TopNewsletterPositionContract> GetTopNewsletterPositions(GetTopNewsletterPositionsContract contract);

        /// <summary>
        /// Get top newsletter positions from selected portfolios sorted by designated field.
        /// </summary>
        /// <param name="contract">Parameters to find top positions</param>
        /// <returns>List of top newsletter positions.</returns>
        Task<List<TopNewsletterPositionContract>> GetTopNewsletterPositionsAsync(GetTopNewsletterPositionsContract contract);

        /// <summary>
        /// Get the View with the set of View Columns necessary to display Newsletters Portfolio in the grid.
        /// </summary>
        /// <param name="publisherType">Identifier of the Publisher.</param>
        /// <param name="portfolioId">Identifier of the Portfolio.</param>
        /// <returns>Portfolio View with the columns.</returns>
        PtPortfolioViewContract GetPortfolioView(PublisherTypes publisherType, int portfolioId);

        /// <summary>
        /// Get the View with the set of View Columns necessary to display Newsletters Portfolio in the grid.
        /// </summary>
        /// <param name="publisherType">Identifier of the Publisher.</param>
        /// <param name="portfolioId">Identifier of the Portfolio.</param>
        /// <returns>Portfolio View with the columns.</returns>
        Task<PtPortfolioViewContract> GetPortfolioViewAsync(PublisherTypes publisherType, int portfolioId);
    }

    public interface INewslettersClientByOrganizationApiMethods
    {
    }

    public partial interface INewslettersClient : INewslettersClientByLicenseKeyApiMethods, IClientByLicenseKey<INewslettersClient, INewslettersClientForUser, INewslettersClientForOrganization>
    {
    }

    public interface INewslettersClientForUser : INewslettersClientByContextKeyApiMethods, IClientByContext<INewslettersClientForUser, INewslettersClientForOrganization>
    {
    }

    public interface INewslettersClientForOrganization : INewslettersClientByOrganizationApiMethods
    {
    }

    public partial class NewslettersClient : BaseClient<INewslettersClient, INewslettersClientForUser, INewslettersClientForOrganization, NewslettersClient>, INewslettersClient, INewslettersClientForUser, INewslettersClientForOrganization
    {
        public List<NewsletterSubscriptionContract> GetAllNewsletterSubscriptions()
        {
            var request = new RequestData
            {
                Url = $"newsletter/user/subscriptions/all",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NewsletterSubscriptionContract>>(request);
        }

        public async Task<List<NewsletterSubscriptionContract>> GetAllNewsletterSubscriptionsAsync()
        {
            var request = new RequestData
            {
                Url = $"newsletter/user/subscriptions/all",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NewsletterSubscriptionContract>>(request);
        }

        public NewsletterSubscriptionContract GetPublisherNewsletterSubscriptions(PublisherTypes publisherType)
        {
            var request = new RequestData
            {
                Url = $"newsletter/user/subscriptions/publisher/{publisherType}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<NewsletterSubscriptionContract>(request);
        }

        public async Task<NewsletterSubscriptionContract> GetPublisherNewsletterSubscriptionsAsync(PublisherTypes publisherType)
        {
            var request = new RequestData
            {
                Url = $"newsletter/user/subscriptions/publisher/{publisherType}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<NewsletterSubscriptionContract>(request);
        }

        public List<NewslettersPortfolioWithSymbolRefDateContract> GetNewsletterPortfoliosBySymbol(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/by-symbol/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NewslettersPortfolioWithSymbolRefDateContract>>(request);
        }

        public async Task<List<NewslettersPortfolioWithSymbolRefDateContract>> GetNewsletterPortfoliosBySymbolAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/by-symbol/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NewslettersPortfolioWithSymbolRefDateContract>>(request);
        }

        public Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>> GetNewsletterPortfoliosBySymbols(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>>>(request);
        }

        public async Task<Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>>> GetNewsletterPortfoliosBySymbolsAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>>>(request);
        }

        public List<NewslettersPortfolioWithSymbolRefDateContract> GetAllNewsletterPortfoliosBySymbol(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/all-by-symbol/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NewslettersPortfolioWithSymbolRefDateContract>>(request);
        }

        public async Task<List<NewslettersPortfolioWithSymbolRefDateContract>> GetAllNewsletterPortfoliosBySymbolAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/all-by-symbol/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NewslettersPortfolioWithSymbolRefDateContract>>(request);
        }

        public Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>> GetAllNewsletterPortfoliosBySymbols(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/all-by-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>>>(request);
        }

        public async Task<Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>>> GetAllNewsletterPortfoliosBySymbolsAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/all-by-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<Dictionary<int,List<NewslettersPortfolioWithSymbolRefDateContract>>>(request);
        }

        public List<NewsletterPortfolioContract> GetAllNewsletterPortfolios()
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/all",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NewsletterPortfolioContract>>(request);
        }

        public async Task<List<NewsletterPortfolioContract>> GetAllNewsletterPortfoliosAsync()
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/all",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NewsletterPortfolioContract>>(request);
        }

        public List<NewsletterPortfolioContract> GetPublisherNewsletterPortfolios(PublisherTypes publisherType)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/publisher/{publisherType}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NewsletterPortfolioContract>>(request);
        }

        public async Task<List<NewsletterPortfolioContract>> GetPublisherNewsletterPortfoliosAsync(PublisherTypes publisherType)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/publisher/{publisherType}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NewsletterPortfolioContract>>(request);
        }

        public List<NewsletterPositionContract> GetNewsletterPortfolioClosedPositions(PublisherTypes publisherType, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/closed/publisher/{publisherType}/portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NewsletterPositionContract>>(request);
        }

        public async Task<List<NewsletterPositionContract>> GetNewsletterPortfolioClosedPositionsAsync(PublisherTypes publisherType, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/closed/publisher/{publisherType}/portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NewsletterPositionContract>>(request);
        }

        public List<NewsletterPositionContract> GetNewsletterPortfolioPositions(PublisherTypes publisherType, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/publisher/{publisherType}/portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NewsletterPositionContract>>(request);
        }

        public async Task<List<NewsletterPositionContract>> GetNewsletterPortfolioPositionsAsync(PublisherTypes publisherType, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/publisher/{publisherType}/portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NewsletterPositionContract>>(request);
        }

        public List<NewslettersPositionWithoutExtraFieldsContract> GetOpenPositionsWithoutExtraFieldsByPortfolios(List<NewslettersPortfolioKey> portfolioKeys)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/open/get-by-portfolio-keys",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioKeys);

            return PerformRequest<List<NewslettersPositionWithoutExtraFieldsContract>>(request);
        }

        public async Task<List<NewslettersPositionWithoutExtraFieldsContract>> GetOpenPositionsWithoutExtraFieldsByPortfoliosAsync(List<NewslettersPortfolioKey> portfolioKeys)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/open/get-by-portfolio-keys",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioKeys);

            return await PerformRequestAsync<List<NewslettersPositionWithoutExtraFieldsContract>>(request);
        }

        public List<NewslettersPositionWithoutExtraFieldsContract> GetClosedPositionsWithoutExtraFieldsByPortfolios(List<NewslettersPortfolioKey> portfolioKeys)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/closed/get-by-portfolio-keys",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioKeys);

            return PerformRequest<List<NewslettersPositionWithoutExtraFieldsContract>>(request);
        }

        public async Task<List<NewslettersPositionWithoutExtraFieldsContract>> GetClosedPositionsWithoutExtraFieldsByPortfoliosAsync(List<NewslettersPortfolioKey> portfolioKeys)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/closed/get-by-portfolio-keys",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioKeys);

            return await PerformRequestAsync<List<NewslettersPositionWithoutExtraFieldsContract>>(request);
        }

        /// <summary>
        /// Get list of Newsletter Positions that were recently added to all Newsletters that user is subscribed to.
        /// Method returns Newsletter Positions only from Portfolio Tracker + TradeStops Billionaires.
        /// </summary>
        /// <param name="contract">Parameters to get recently added Newsletter Positions</param>
        /// <returns>List of Newsletter Positions that were recently added to all Newsletter Portfolios that user is subscribed to</returns>
        public List<RecentlyAddedNewsletterPositionContract> GetRecentlyAddedNewsletterPositions(GetRecentlyAddedNewsletterPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/get-recently-added",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<RecentlyAddedNewsletterPositionContract>>(request);
        }

        /// <summary>
        /// Get list of Newsletter Positions that were recently added to all Newsletters that user is subscribed to.
        /// Method returns Newsletter Positions only from Portfolio Tracker + TradeStops Billionaires.
        /// </summary>
        /// <param name="contract">Parameters to get recently added Newsletter Positions</param>
        /// <returns>List of Newsletter Positions that were recently added to all Newsletter Portfolios that user is subscribed to</returns>
        public async Task<List<RecentlyAddedNewsletterPositionContract>> GetRecentlyAddedNewsletterPositionsAsync(GetRecentlyAddedNewsletterPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/get-recently-added",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<RecentlyAddedNewsletterPositionContract>>(request);
        }

        public CheckNewslettersCredentialsResultContract CheckCredentials(CheckNewslettersCredentialsContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletters/check-credentials",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<CheckNewslettersCredentialsResultContract>(request);
        }

        public async Task<CheckNewslettersCredentialsResultContract> CheckCredentialsAsync(CheckNewslettersCredentialsContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletters/check-credentials",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<CheckNewslettersCredentialsResultContract>(request);
        }

        /// <summary>
        /// Get list of newsletter portfolios statistic values
        /// </summary>
        /// <param name="input">Parameters to get newsletter portfolios statistics</param>
        /// <returns>List of newsletter portfolios statistic values</returns>
        public List<NewsletterPortfolioStatsContract> GetNewsletterPortfoliosStats(GetNewsletterPortfolioStatsContract input)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/portfoliostats/get-by-ids/by-currency",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<List<NewsletterPortfolioStatsContract>>(request);
        }

        /// <summary>
        /// Get list of newsletter portfolios statistic values
        /// </summary>
        /// <param name="input">Parameters to get newsletter portfolios statistics</param>
        /// <returns>List of newsletter portfolios statistic values</returns>
        public async Task<List<NewsletterPortfolioStatsContract>> GetNewsletterPortfoliosStatsAsync(GetNewsletterPortfolioStatsContract input)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/portfoliostats/get-by-ids/by-currency",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<List<NewsletterPortfolioStatsContract>>(request);
        }

        public SsiDistributionContract GetSsiDistributionByPortfolioIds(List<NewslettersPortfolioKey> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/ssi-distribution/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<SsiDistributionContract>(request);
        }

        public async Task<SsiDistributionContract> GetSsiDistributionByPortfolioIdsAsync(List<NewslettersPortfolioKey> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/ssi-distribution/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<SsiDistributionContract>(request);
        }

        /// <summary>
        /// Get global rank allocation for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">>List of portfolio Ids.</param>
        /// <returns>The method returns the list of global rank allocation for all active positions from the requested portfolios.</returns>
        public List<GlobalRankAllocationContract> GetGlobalRankAllocation(GetNewsletterPortfoliosGlobalRankAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/global-rank-allocation/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<GlobalRankAllocationContract>>(request);
        }

        /// <summary>
        /// Get global rank allocation for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">>List of portfolio Ids.</param>
        /// <returns>The method returns the list of global rank allocation for all active positions from the requested portfolios.</returns>
        public async Task<List<GlobalRankAllocationContract>> GetGlobalRankAllocationAsync(GetNewsletterPortfoliosGlobalRankAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/global-rank-allocation/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<GlobalRankAllocationContract>>(request);
        }

        /// <summary>
        /// Get VQ allocation for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        public VqAllocationContract GetVqAllocation(GetNewsletterPortfoliosVqAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/vq-allocation/get-by-ids/by-currency",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<VqAllocationContract>(request);
        }

        /// <summary>
        /// Get VQ allocation for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        public async Task<VqAllocationContract> GetVqAllocationAsync(GetNewsletterPortfoliosVqAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/vq-allocation/get-by-ids/by-currency",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<VqAllocationContract>(request);
        }

        /// <summary>
        /// Get asset allocations by sectors and industries for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the array of allocations by sectors or industries for all active positions from the requested portfolios.</returns>
        public NewslettersAssetAllocationContract GetAssetAllocation(GetNewsletterPortfoliosAssetAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/asset-allocation/get-by-ids/by-number-of-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<NewslettersAssetAllocationContract>(request);
        }

        /// <summary>
        /// Get asset allocations by sectors and industries for requested newsletter portfolios.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the array of allocations by sectors or industries for all active positions from the requested portfolios.</returns>
        public async Task<NewslettersAssetAllocationContract> GetAssetAllocationAsync(GetNewsletterPortfoliosAssetAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/asset-allocation/get-by-ids/by-number-of-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<NewslettersAssetAllocationContract>(request);
        }

        /// <summary>
        /// Get how positions in selected newsletter portfolios are allocated by specified markets.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the array of allocations by markets for all active positions from the requested portfolios.</returns>
        public NewsletterMarketAllocationContract GetMarketAllocation(GetNewsletterPortfoliosMarketAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/market-allocation/get-by-ids/by-number-of-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<NewsletterMarketAllocationContract>(request);
        }

        /// <summary>
        /// Get how positions in selected newsletter portfolios are allocated by specified markets.
        /// </summary>
        /// <param name="contract">List of portfolio Ids</param>
        /// <returns>The method returns the array of allocations by markets for all active positions from the requested portfolios.</returns>
        public async Task<NewsletterMarketAllocationContract> GetMarketAllocationAsync(GetNewsletterPortfoliosMarketAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-portfolios/market-allocation/get-by-ids/by-number-of-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<NewsletterMarketAllocationContract>(request);
        }

        /// <summary>
        /// Get top newsletter positions from selected portfolios sorted by designated field.
        /// </summary>
        /// <param name="contract">Parameters to find top positions</param>
        /// <returns>List of top newsletter positions.</returns>
        public List<TopNewsletterPositionContract> GetTopNewsletterPositions(GetTopNewsletterPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/get-top-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<TopNewsletterPositionContract>>(request);
        }

        /// <summary>
        /// Get top newsletter positions from selected portfolios sorted by designated field.
        /// </summary>
        /// <param name="contract">Parameters to find top positions</param>
        /// <returns>List of top newsletter positions.</returns>
        public async Task<List<TopNewsletterPositionContract>> GetTopNewsletterPositionsAsync(GetTopNewsletterPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"newsletter-positions/get-top-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<TopNewsletterPositionContract>>(request);
        }

        /// <summary>
        /// Get the View with the set of View Columns necessary to display Newsletters Portfolio in the grid.
        /// </summary>
        /// <param name="publisherType">Identifier of the Publisher.</param>
        /// <param name="portfolioId">Identifier of the Portfolio.</param>
        /// <returns>Portfolio View with the columns.</returns>
        public PtPortfolioViewContract GetPortfolioView(PublisherTypes publisherType, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"newsletter-views/publisher/{publisherType}/portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PtPortfolioViewContract>(request);
        }

        /// <summary>
        /// Get the View with the set of View Columns necessary to display Newsletters Portfolio in the grid.
        /// </summary>
        /// <param name="publisherType">Identifier of the Publisher.</param>
        /// <param name="portfolioId">Identifier of the Portfolio.</param>
        /// <returns>Portfolio View with the columns.</returns>
        public async Task<PtPortfolioViewContract> GetPortfolioViewAsync(PublisherTypes publisherType, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"newsletter-views/publisher/{publisherType}/portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PtPortfolioViewContract>(request);
        }
    }

    public interface INotificationAddressesClientByLicenseKeyApiMethods
    {
    }

    public interface INotificationAddressesClientByContextKeyApiMethods : INotificationAddressesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the information about the notification address for the current user.
        /// </summary>
        /// <returns>The method returns the information about the notification address for the current user.</returns>
        List<NotificationAddressContract> GetUserNotificationAddresses();

        /// <summary>
        /// Get the information about the notification address for the current user.
        /// </summary>
        /// <returns>The method returns the information about the notification address for the current user.</returns>
        Task<List<NotificationAddressContract>> GetUserNotificationAddressesAsync();

        List<NotificationAddressContract> ReplaceNotificationAddresses(List<CreateNotificationAddressContract> contracts);

        Task<List<NotificationAddressContract>> ReplaceNotificationAddressesAsync(List<CreateNotificationAddressContract> contracts);
    }

    public interface INotificationAddressesClientByOrganizationApiMethods
    {
    }

    public partial interface INotificationAddressesClient : INotificationAddressesClientByLicenseKeyApiMethods, IClientByLicenseKey<INotificationAddressesClient, INotificationAddressesClientForUser, INotificationAddressesClientForOrganization>
    {
    }

    public interface INotificationAddressesClientForUser : INotificationAddressesClientByContextKeyApiMethods, IClientByContext<INotificationAddressesClientForUser, INotificationAddressesClientForOrganization>
    {
    }

    public interface INotificationAddressesClientForOrganization : INotificationAddressesClientByOrganizationApiMethods
    {
    }

    public partial class NotificationAddressesClient : BaseClient<INotificationAddressesClient, INotificationAddressesClientForUser, INotificationAddressesClientForOrganization, NotificationAddressesClient>, INotificationAddressesClient, INotificationAddressesClientForUser, INotificationAddressesClientForOrganization
    {
        /// <summary>
        /// Get the information about the notification address for the current user.
        /// </summary>
        /// <returns>The method returns the information about the notification address for the current user.</returns>
        public List<NotificationAddressContract> GetUserNotificationAddresses()
        {
            var request = new RequestData
            {
                Url = $"notification-adresses",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NotificationAddressContract>>(request);
        }

        /// <summary>
        /// Get the information about the notification address for the current user.
        /// </summary>
        /// <returns>The method returns the information about the notification address for the current user.</returns>
        public async Task<List<NotificationAddressContract>> GetUserNotificationAddressesAsync()
        {
            var request = new RequestData
            {
                Url = $"notification-adresses",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NotificationAddressContract>>(request);
        }

        public List<NotificationAddressContract> ReplaceNotificationAddresses(List<CreateNotificationAddressContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"notification-adresses/replace",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return PerformRequest<List<NotificationAddressContract>>(request);
        }

        public async Task<List<NotificationAddressContract>> ReplaceNotificationAddressesAsync(List<CreateNotificationAddressContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"notification-adresses/replace",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return await PerformRequestAsync<List<NotificationAddressContract>>(request);
        }
    }

    public interface INotificationEventsClientByLicenseKeyApiMethods
    {
    }

    public interface INotificationEventsClientByContextKeyApiMethods : INotificationEventsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create notification event.
        /// </summary>
        /// <param name="createContract">Contract with parameters to create notification event.</param>
        /// <returns>Created notification event.</returns>
        NotificationEventContract CreateNotificationEvent(CreateNotificationEventContract createContract);

        /// <summary>
        /// Create notification event.
        /// </summary>
        /// <param name="createContract">Contract with parameters to create notification event.</param>
        /// <returns>Created notification event.</returns>
        Task<NotificationEventContract> CreateNotificationEventAsync(CreateNotificationEventContract createContract);

        /// <summary>
        /// Get notification events.
        /// </summary>
        /// <param name="includeUserInformed">Defines if include already viewed by user events.</param>
        /// <returns>List of notification events.</returns>
        List<NotificationEventContract> GetNotificationEvents(bool includeUserInformed);

        /// <summary>
        /// Get notification events.
        /// </summary>
        /// <param name="includeUserInformed">Defines if include already viewed by user events.</param>
        /// <returns>List of notification events.</returns>
        Task<List<NotificationEventContract>> GetNotificationEventsAsync(bool includeUserInformed);

        /// <summary>
        /// Get notification events by its entity ID parameter (represents related notification result ID).
        /// </summary>
        /// <param name="notificationEventEntityId">Notification event entity ID parameter.</param>
        /// <returns>List of notification events.</returns>
        List<NotificationEventContract> GetNotificationEvents(int notificationEventEntityId);

        /// <summary>
        /// Get notification events by its entity ID parameter (represents related notification result ID).
        /// </summary>
        /// <param name="notificationEventEntityId">Notification event entity ID parameter.</param>
        /// <returns>List of notification events.</returns>
        Task<List<NotificationEventContract>> GetNotificationEventsAsync(int notificationEventEntityId);

        /// <summary>
        /// Edit single notification event.
        /// </summary>
        /// <param name="editContract">Parameters to edit notification event.</param>
        /// <returns>Edited notification event.</returns>
        NotificationEventContract EditNotificationEvent(EditNotificationEventContract editContract);

        /// <summary>
        /// Edit single notification event.
        /// </summary>
        /// <param name="editContract">Parameters to edit notification event.</param>
        /// <returns>Edited notification event.</returns>
        Task<NotificationEventContract> EditNotificationEventAsync(EditNotificationEventContract editContract);

        List<NotificationEventContract> EditNotificationEvents(List<EditNotificationEventContract> editContracts);

        Task<List<NotificationEventContract>> EditNotificationEventsAsync(List<EditNotificationEventContract> editContracts);
    }

    public interface INotificationEventsClientByOrganizationApiMethods
    {
    }

    public partial interface INotificationEventsClient : INotificationEventsClientByLicenseKeyApiMethods, IClientByLicenseKey<INotificationEventsClient, INotificationEventsClientForUser, INotificationEventsClientForOrganization>
    {
    }

    public interface INotificationEventsClientForUser : INotificationEventsClientByContextKeyApiMethods, IClientByContext<INotificationEventsClientForUser, INotificationEventsClientForOrganization>
    {
    }

    public interface INotificationEventsClientForOrganization : INotificationEventsClientByOrganizationApiMethods
    {
    }

    public partial class NotificationEventsClient : BaseClient<INotificationEventsClient, INotificationEventsClientForUser, INotificationEventsClientForOrganization, NotificationEventsClient>, INotificationEventsClient, INotificationEventsClientForUser, INotificationEventsClientForOrganization
    {
        /// <summary>
        /// Create notification event.
        /// </summary>
        /// <param name="createContract">Contract with parameters to create notification event.</param>
        /// <returns>Created notification event.</returns>
        public NotificationEventContract CreateNotificationEvent(CreateNotificationEventContract createContract)
        {
            var request = new RequestData
            {
                Url = $"notification-events",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return PerformRequest<NotificationEventContract>(request);
        }

        /// <summary>
        /// Create notification event.
        /// </summary>
        /// <param name="createContract">Contract with parameters to create notification event.</param>
        /// <returns>Created notification event.</returns>
        public async Task<NotificationEventContract> CreateNotificationEventAsync(CreateNotificationEventContract createContract)
        {
            var request = new RequestData
            {
                Url = $"notification-events",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return await PerformRequestAsync<NotificationEventContract>(request);
        }

        /// <summary>
        /// Get notification events.
        /// </summary>
        /// <param name="includeUserInformed">Defines if include already viewed by user events.</param>
        /// <returns>List of notification events.</returns>
        public List<NotificationEventContract> GetNotificationEvents(bool includeUserInformed)
        {
            var request = new RequestData
            {
                Url = $"notification-events/{includeUserInformed}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NotificationEventContract>>(request);
        }

        /// <summary>
        /// Get notification events.
        /// </summary>
        /// <param name="includeUserInformed">Defines if include already viewed by user events.</param>
        /// <returns>List of notification events.</returns>
        public async Task<List<NotificationEventContract>> GetNotificationEventsAsync(bool includeUserInformed)
        {
            var request = new RequestData
            {
                Url = $"notification-events/{includeUserInformed}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NotificationEventContract>>(request);
        }

        /// <summary>
        /// Get notification events by its entity ID parameter (represents related notification result ID).
        /// </summary>
        /// <param name="notificationEventEntityId">Notification event entity ID parameter.</param>
        /// <returns>List of notification events.</returns>
        public List<NotificationEventContract> GetNotificationEvents(int notificationEventEntityId)
        {
            var request = new RequestData
            {
                Url = $"notification-events/{notificationEventEntityId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<NotificationEventContract>>(request);
        }

        /// <summary>
        /// Get notification events by its entity ID parameter (represents related notification result ID).
        /// </summary>
        /// <param name="notificationEventEntityId">Notification event entity ID parameter.</param>
        /// <returns>List of notification events.</returns>
        public async Task<List<NotificationEventContract>> GetNotificationEventsAsync(int notificationEventEntityId)
        {
            var request = new RequestData
            {
                Url = $"notification-events/{notificationEventEntityId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<NotificationEventContract>>(request);
        }

        /// <summary>
        /// Edit single notification event.
        /// </summary>
        /// <param name="editContract">Parameters to edit notification event.</param>
        /// <returns>Edited notification event.</returns>
        public NotificationEventContract EditNotificationEvent(EditNotificationEventContract editContract)
        {
            var request = new RequestData
            {
                Url = $"notification-events",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContract);

            return PerformRequest<NotificationEventContract>(request);
        }

        /// <summary>
        /// Edit single notification event.
        /// </summary>
        /// <param name="editContract">Parameters to edit notification event.</param>
        /// <returns>Edited notification event.</returns>
        public async Task<NotificationEventContract> EditNotificationEventAsync(EditNotificationEventContract editContract)
        {
            var request = new RequestData
            {
                Url = $"notification-events",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContract);

            return await PerformRequestAsync<NotificationEventContract>(request);
        }

        public List<NotificationEventContract> EditNotificationEvents(List<EditNotificationEventContract> editContracts)
        {
            var request = new RequestData
            {
                Url = $"notification-events/bulk-edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContracts);

            return PerformRequest<List<NotificationEventContract>>(request);
        }

        public async Task<List<NotificationEventContract>> EditNotificationEventsAsync(List<EditNotificationEventContract> editContracts)
        {
            var request = new RequestData
            {
                Url = $"notification-events/bulk-edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContracts);

            return await PerformRequestAsync<List<NotificationEventContract>>(request);
        }
    }

    public interface IOptionScreenerClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get option screener.
        /// </summary>
        /// <param name="optionScreenerId">Option screener ID.</param>
        /// <returns>The method returns option screener.</returns>
        StockFinderSearchCommonContract GetOptionScreener(int optionScreenerId);

        /// <summary>
        /// Get option screener.
        /// </summary>
        /// <param name="optionScreenerId">Option screener ID.</param>
        /// <returns>The method returns option screener.</returns>
        Task<StockFinderSearchCommonContract> GetOptionScreenerAsync(int optionScreenerId);

        /// <summary>
        /// Get options screener data.
        /// </summary>
        /// <param name="contract">Parameters to get options screener data.</param>
        /// <returns>The method returns the list of options screener data.</returns>
        List<OptionScreenerDataContract> GetOptionsScreenerData(GetOptionScreenerDataContract contract);

        /// <summary>
        /// Get options screener data.
        /// </summary>
        /// <param name="contract">Parameters to get options screener data.</param>
        /// <returns>The method returns the list of options screener data.</returns>
        Task<List<OptionScreenerDataContract>> GetOptionsScreenerDataAsync(GetOptionScreenerDataContract contract);
    }

    public interface IOptionScreenerClientByContextKeyApiMethods : IOptionScreenerClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Find options matching provided criterias. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Options screener parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        List<OptionsScreenerResultContract> GetOptionsScreenerResults(OptionsScreenerInputContract contract);

        /// <summary>
        /// Find options matching provided criterias. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Options screener parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        Task<List<OptionsScreenerResultContract>> GetOptionsScreenerResultsAsync(OptionsScreenerInputContract contract);

        /// <summary>
        /// Create option screener.
        /// </summary>
        /// <param name="contract">Parameters to create option screener.</param>
        /// <returns>The method returns created option screener.</returns>
        StockFinderSearchContract CreateOptionScreener(CreateStockFinderSearchContract contract);

        /// <summary>
        /// Create option screener.
        /// </summary>
        /// <param name="contract">Parameters to create option screener.</param>
        /// <returns>The method returns created option screener.</returns>
        Task<StockFinderSearchContract> CreateOptionScreenerAsync(CreateStockFinderSearchContract contract);

        /// <summary>
        /// Get list of current user's option screeners.
        /// </summary>
        /// <returns>The method returns list of current user's option screeners.</returns>
        List<StockFinderSearchContract> GetUserOptionScreeners();

        /// <summary>
        /// Get list of current user's option screeners.
        /// </summary>
        /// <returns>The method returns list of current user's option screeners.</returns>
        Task<List<StockFinderSearchContract>> GetUserOptionScreenersAsync();

        /// <summary>
        /// Delete option screener.
        /// </summary>
        /// <param name="optionScreenerId">Option screener ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the filter.</returns>
        void DeleteOptionScreener(int optionScreenerId);

        /// <summary>
        /// Delete option screener.
        /// </summary>
        /// <param name="optionScreenerId">Option screener ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the filter.</returns>
        Task DeleteOptionScreenerAsync(int optionScreenerId);
    }

    public interface IOptionScreenerClientByOrganizationApiMethods
    {
    }

    public partial interface IOptionScreenerClient : IOptionScreenerClientByLicenseKeyApiMethods, IClientByLicenseKey<IOptionScreenerClient, IOptionScreenerClientForUser, IOptionScreenerClientForOrganization>
    {
    }

    public interface IOptionScreenerClientForUser : IOptionScreenerClientByContextKeyApiMethods, IClientByContext<IOptionScreenerClientForUser, IOptionScreenerClientForOrganization>
    {
    }

    public interface IOptionScreenerClientForOrganization : IOptionScreenerClientByOrganizationApiMethods
    {
    }

    public partial class OptionScreenerClient : BaseClient<IOptionScreenerClient, IOptionScreenerClientForUser, IOptionScreenerClientForOrganization, OptionScreenerClient>, IOptionScreenerClient, IOptionScreenerClientForUser, IOptionScreenerClientForOrganization
    {
        /// <summary>
        /// Find options matching provided criterias. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Options screener parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        public List<OptionsScreenerResultContract> GetOptionsScreenerResults(OptionsScreenerInputContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<OptionsScreenerResultContract>>(request);
        }

        /// <summary>
        /// Find options matching provided criterias. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Options screener parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        public async Task<List<OptionsScreenerResultContract>> GetOptionsScreenerResultsAsync(OptionsScreenerInputContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<OptionsScreenerResultContract>>(request);
        }

        /// <summary>
        /// Create option screener.
        /// </summary>
        /// <param name="contract">Parameters to create option screener.</param>
        /// <returns>The method returns created option screener.</returns>
        public StockFinderSearchContract CreateOptionScreener(CreateStockFinderSearchContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener/create-user-search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<StockFinderSearchContract>(request);
        }

        /// <summary>
        /// Create option screener.
        /// </summary>
        /// <param name="contract">Parameters to create option screener.</param>
        /// <returns>The method returns created option screener.</returns>
        public async Task<StockFinderSearchContract> CreateOptionScreenerAsync(CreateStockFinderSearchContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener/create-user-search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<StockFinderSearchContract>(request);
        }

        /// <summary>
        /// Get list of current user's option screeners.
        /// </summary>
        /// <returns>The method returns list of current user's option screeners.</returns>
        public List<StockFinderSearchContract> GetUserOptionScreeners()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener/get-user-searches",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<StockFinderSearchContract>>(request);
        }

        /// <summary>
        /// Get list of current user's option screeners.
        /// </summary>
        /// <returns>The method returns list of current user's option screeners.</returns>
        public async Task<List<StockFinderSearchContract>> GetUserOptionScreenersAsync()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener/get-user-searches",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<StockFinderSearchContract>>(request);
        }

        /// <summary>
        /// Delete option screener.
        /// </summary>
        /// <param name="optionScreenerId">Option screener ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the filter.</returns>
        public void DeleteOptionScreener(int optionScreenerId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener/delete-user-search/{optionScreenerId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete option screener.
        /// </summary>
        /// <param name="optionScreenerId">Option screener ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the filter.</returns>
        public async Task DeleteOptionScreenerAsync(int optionScreenerId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener/delete-user-search/{optionScreenerId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get option screener.
        /// </summary>
        /// <param name="optionScreenerId">Option screener ID.</param>
        /// <returns>The method returns option screener.</returns>
        public StockFinderSearchCommonContract GetOptionScreener(int optionScreenerId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener/get-search/{optionScreenerId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<StockFinderSearchCommonContract>(request);
        }

        /// <summary>
        /// Get option screener.
        /// </summary>
        /// <param name="optionScreenerId">Option screener ID.</param>
        /// <returns>The method returns option screener.</returns>
        public async Task<StockFinderSearchCommonContract> GetOptionScreenerAsync(int optionScreenerId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener/get-search/{optionScreenerId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<StockFinderSearchCommonContract>(request);
        }

        /// <summary>
        /// Get options screener data.
        /// </summary>
        /// <param name="contract">Parameters to get options screener data.</param>
        /// <returns>The method returns the list of options screener data.</returns>
        public List<OptionScreenerDataContract> GetOptionsScreenerData(GetOptionScreenerDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener/get-options-data",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<OptionScreenerDataContract>>(request);
        }

        /// <summary>
        /// Get options screener data.
        /// </summary>
        /// <param name="contract">Parameters to get options screener data.</param>
        /// <returns>The method returns the list of options screener data.</returns>
        public async Task<List<OptionScreenerDataContract>> GetOptionsScreenerDataAsync(GetOptionScreenerDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/option-screener/get-options-data",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<OptionScreenerDataContract>>(request);
        }
    }

    public interface IPairTradesClientByLicenseKeyApiMethods
    {
    }

    public interface IPairTradesClientByContextKeyApiMethods : IPairTradesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create a Pair Trade position. The Pair Trade can contain two and more stocks with long or short trade type.
        /// </summary>
        /// <param name="position">Parameters to create Pair Trade position.</param>
        /// <returns>Position contract.</returns>
        PositionContract CreatePairsTradePosition(CreatePairTradePositionContract position);

        /// <summary>
        /// Create a Pair Trade position. The Pair Trade can contain two and more stocks with long or short trade type.
        /// </summary>
        /// <param name="position">Parameters to create Pair Trade position.</param>
        /// <returns>Position contract.</returns>
        Task<PositionContract> CreatePairsTradePositionAsync(CreatePairTradePositionContract position);
    }

    public interface IPairTradesClientByOrganizationApiMethods
    {
    }

    public partial interface IPairTradesClient : IPairTradesClientByLicenseKeyApiMethods, IClientByLicenseKey<IPairTradesClient, IPairTradesClientForUser, IPairTradesClientForOrganization>
    {
    }

    public interface IPairTradesClientForUser : IPairTradesClientByContextKeyApiMethods, IClientByContext<IPairTradesClientForUser, IPairTradesClientForOrganization>
    {
    }

    public interface IPairTradesClientForOrganization : IPairTradesClientByOrganizationApiMethods
    {
    }

    public partial class PairTradesClient : BaseClient<IPairTradesClient, IPairTradesClientForUser, IPairTradesClientForOrganization, PairTradesClient>, IPairTradesClient, IPairTradesClientForUser, IPairTradesClientForOrganization
    {
        /// <summary>
        /// Create a Pair Trade position. The Pair Trade can contain two and more stocks with long or short trade type.
        /// </summary>
        /// <param name="position">Parameters to create Pair Trade position.</param>
        /// <returns>Position contract.</returns>
        public PositionContract CreatePairsTradePosition(CreatePairTradePositionContract position)
        {
            var request = new RequestData
            {
                Url = $"pairtrades",
                Method = HttpMethod.Post,
            };

            request.SetBody(position);

            return PerformRequest<PositionContract>(request);
        }

        /// <summary>
        /// Create a Pair Trade position. The Pair Trade can contain two and more stocks with long or short trade type.
        /// </summary>
        /// <param name="position">Parameters to create Pair Trade position.</param>
        /// <returns>Position contract.</returns>
        public async Task<PositionContract> CreatePairsTradePositionAsync(CreatePairTradePositionContract position)
        {
            var request = new RequestData
            {
                Url = $"pairtrades",
                Method = HttpMethod.Post,
            };

            request.SetBody(position);

            return await PerformRequestAsync<PositionContract>(request);
        }
    }

    public interface IPlatformTasksClientByLicenseKeyApiMethods
    {
    }

    public interface IPlatformTasksClientByContextKeyApiMethods : IPlatformTasksClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get platform task by ID.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <param name="includeDelisted">Return delisted task as well.</param>
        /// <returns>Platform task contract.</returns>
        PlatformTaskContract GetPlatformTask(int platformTaskId, bool includeDelisted);

        /// <summary>
        /// Get platform task by ID.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <param name="includeDelisted">Return delisted task as well.</param>
        /// <returns>Platform task contract.</returns>
        Task<PlatformTaskContract> GetPlatformTaskAsync(int platformTaskId, bool includeDelisted);

        /// <summary>
        /// Get user platform tasks.
        /// </summary>
        /// <param name="contract">Parameters to get platform tasks.</param>
        /// <returns>List of user platform tasks.</returns>
        List<PlatformTaskContract> GetPlatformTasks(GetPlatformTasksContract contract);

        /// <summary>
        /// Get user platform tasks.
        /// </summary>
        /// <param name="contract">Parameters to get platform tasks.</param>
        /// <returns>List of user platform tasks.</returns>
        Task<List<PlatformTaskContract>> GetPlatformTasksAsync(GetPlatformTasksContract contract);

        /// <summary>
        /// Edit platform task.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <param name="editContract">Parameters to edit platform task.</param>
        /// <returns>Platform task contract.</returns>
        PlatformTaskContract EditPlatformTask(int platformTaskId, EditPlatformTaskContract editContract);

        /// <summary>
        /// Edit platform task.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <param name="editContract">Parameters to edit platform task.</param>
        /// <returns>Platform task contract.</returns>
        Task<PlatformTaskContract> EditPlatformTaskAsync(int platformTaskId, EditPlatformTaskContract editContract);

        void DeletePlatformTasks(List<int> platformTaskIds);

        Task DeletePlatformTasksAsync(List<int> platformTaskIds);

        /// <summary>
        /// Create Pure Quant task.
        /// </summary>
        /// <param name="contract">Create Pure Quant task contract with sources and filters.</param>
        /// <returns>Created Pure Quant tasks.</returns>
        PlatformTaskContract CreatePureQuantTask(CreatePureQuantTaskContract contract);

        /// <summary>
        /// Create Pure Quant task.
        /// </summary>
        /// <param name="contract">Create Pure Quant task contract with sources and filters.</param>
        /// <returns>Created Pure Quant tasks.</returns>
        Task<PlatformTaskContract> CreatePureQuantTaskAsync(CreatePureQuantTaskContract contract);

        /// <summary>
        /// Get Pure Quant tasks.
        /// </summary>
        /// <returns>List of Pure Quant tasks with original input parameters.</returns>
        List<PureQuantTaskContract> GetPureQuantTasks();

        /// <summary>
        /// Get Pure Quant tasks.
        /// </summary>
        /// <returns>List of Pure Quant tasks with original input parameters.</returns>
        Task<List<PureQuantTaskContract>> GetPureQuantTasksAsync();

        /// <summary>
        /// Get Pure Quant task.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <returns>Pure Quant tasks with original input parameters.</returns>
        PureQuantTaskContract GetPureQuantTask(int platformTaskId);

        /// <summary>
        /// Get Pure Quant task.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <returns>Pure Quant tasks with original input parameters.</returns>
        Task<PureQuantTaskContract> GetPureQuantTaskAsync(int platformTaskId);

        List<PureQuantResultPositionContract> CreatePureQuantResult(int platformTaskId, List<CreatePureQuantResultPositionContract> createContracts);

        Task<List<PureQuantResultPositionContract>> CreatePureQuantResultAsync(int platformTaskId, List<CreatePureQuantResultPositionContract> createContracts);

        /// <summary>
        /// Get Pure Quant result.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <returns>Created Pure Quant result.</returns>
        List<PureQuantResultPositionContract> GetPureQuantResult(int platformTaskId);

        /// <summary>
        /// Get Pure Quant result.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <returns>Created Pure Quant result.</returns>
        Task<List<PureQuantResultPositionContract>> GetPureQuantResultAsync(int platformTaskId);
    }

    public interface IPlatformTasksClientByOrganizationApiMethods
    {
    }

    public partial interface IPlatformTasksClient : IPlatformTasksClientByLicenseKeyApiMethods, IClientByLicenseKey<IPlatformTasksClient, IPlatformTasksClientForUser, IPlatformTasksClientForOrganization>
    {
    }

    public interface IPlatformTasksClientForUser : IPlatformTasksClientByContextKeyApiMethods, IClientByContext<IPlatformTasksClientForUser, IPlatformTasksClientForOrganization>
    {
    }

    public interface IPlatformTasksClientForOrganization : IPlatformTasksClientByOrganizationApiMethods
    {
    }

    public partial class PlatformTasksClient : BaseClient<IPlatformTasksClient, IPlatformTasksClientForUser, IPlatformTasksClientForOrganization, PlatformTasksClient>, IPlatformTasksClient, IPlatformTasksClientForUser, IPlatformTasksClientForOrganization
    {
        /// <summary>
        /// Get platform task by ID.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <param name="includeDelisted">Return delisted task as well.</param>
        /// <returns>Platform task contract.</returns>
        public PlatformTaskContract GetPlatformTask(int platformTaskId, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/{platformTaskId}/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PlatformTaskContract>(request);
        }

        /// <summary>
        /// Get platform task by ID.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <param name="includeDelisted">Return delisted task as well.</param>
        /// <returns>Platform task contract.</returns>
        public async Task<PlatformTaskContract> GetPlatformTaskAsync(int platformTaskId, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/{platformTaskId}/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PlatformTaskContract>(request);
        }

        /// <summary>
        /// Get user platform tasks.
        /// </summary>
        /// <param name="contract">Parameters to get platform tasks.</param>
        /// <returns>List of user platform tasks.</returns>
        public List<PlatformTaskContract> GetPlatformTasks(GetPlatformTasksContract contract)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/get-by-parameters",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PlatformTaskContract>>(request);
        }

        /// <summary>
        /// Get user platform tasks.
        /// </summary>
        /// <param name="contract">Parameters to get platform tasks.</param>
        /// <returns>List of user platform tasks.</returns>
        public async Task<List<PlatformTaskContract>> GetPlatformTasksAsync(GetPlatformTasksContract contract)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/get-by-parameters",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PlatformTaskContract>>(request);
        }

        /// <summary>
        /// Edit platform task.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <param name="editContract">Parameters to edit platform task.</param>
        /// <returns>Platform task contract.</returns>
        public PlatformTaskContract EditPlatformTask(int platformTaskId, EditPlatformTaskContract editContract)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/{platformTaskId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContract);

            return PerformRequest<PlatformTaskContract>(request);
        }

        /// <summary>
        /// Edit platform task.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <param name="editContract">Parameters to edit platform task.</param>
        /// <returns>Platform task contract.</returns>
        public async Task<PlatformTaskContract> EditPlatformTaskAsync(int platformTaskId, EditPlatformTaskContract editContract)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/{platformTaskId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(editContract);

            return await PerformRequestAsync<PlatformTaskContract>(request);
        }

        public void DeletePlatformTasks(List<int> platformTaskIds)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks",
                Method = HttpMethod.Delete,
            };

            request.SetBody(platformTaskIds);

            PerformRequest(request);
        }

        public async Task DeletePlatformTasksAsync(List<int> platformTaskIds)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks",
                Method = HttpMethod.Delete,
            };

            request.SetBody(platformTaskIds);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Create Pure Quant task.
        /// </summary>
        /// <param name="contract">Create Pure Quant task contract with sources and filters.</param>
        /// <returns>Created Pure Quant tasks.</returns>
        public PlatformTaskContract CreatePureQuantTask(CreatePureQuantTaskContract contract)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/pure-quant",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PlatformTaskContract>(request);
        }

        /// <summary>
        /// Create Pure Quant task.
        /// </summary>
        /// <param name="contract">Create Pure Quant task contract with sources and filters.</param>
        /// <returns>Created Pure Quant tasks.</returns>
        public async Task<PlatformTaskContract> CreatePureQuantTaskAsync(CreatePureQuantTaskContract contract)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/pure-quant",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PlatformTaskContract>(request);
        }

        /// <summary>
        /// Get Pure Quant tasks.
        /// </summary>
        /// <returns>List of Pure Quant tasks with original input parameters.</returns>
        public List<PureQuantTaskContract> GetPureQuantTasks()
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/pure-quant",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PureQuantTaskContract>>(request);
        }

        /// <summary>
        /// Get Pure Quant tasks.
        /// </summary>
        /// <returns>List of Pure Quant tasks with original input parameters.</returns>
        public async Task<List<PureQuantTaskContract>> GetPureQuantTasksAsync()
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/pure-quant",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PureQuantTaskContract>>(request);
        }

        /// <summary>
        /// Get Pure Quant task.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <returns>Pure Quant tasks with original input parameters.</returns>
        public PureQuantTaskContract GetPureQuantTask(int platformTaskId)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/pure-quant/{platformTaskId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PureQuantTaskContract>(request);
        }

        /// <summary>
        /// Get Pure Quant task.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <returns>Pure Quant tasks with original input parameters.</returns>
        public async Task<PureQuantTaskContract> GetPureQuantTaskAsync(int platformTaskId)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/pure-quant/{platformTaskId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PureQuantTaskContract>(request);
        }

        public List<PureQuantResultPositionContract> CreatePureQuantResult(int platformTaskId, List<CreatePureQuantResultPositionContract> createContracts)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/pure-quant-result/{platformTaskId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContracts);

            return PerformRequest<List<PureQuantResultPositionContract>>(request);
        }

        public async Task<List<PureQuantResultPositionContract>> CreatePureQuantResultAsync(int platformTaskId, List<CreatePureQuantResultPositionContract> createContracts)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/pure-quant-result/{platformTaskId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContracts);

            return await PerformRequestAsync<List<PureQuantResultPositionContract>>(request);
        }

        /// <summary>
        /// Get Pure Quant result.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <returns>Created Pure Quant result.</returns>
        public List<PureQuantResultPositionContract> GetPureQuantResult(int platformTaskId)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/pure-quant-result/{platformTaskId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PureQuantResultPositionContract>>(request);
        }

        /// <summary>
        /// Get Pure Quant result.
        /// </summary>
        /// <param name="platformTaskId">Platform task ID.</param>
        /// <returns>Created Pure Quant result.</returns>
        public async Task<List<PureQuantResultPositionContract>> GetPureQuantResultAsync(int platformTaskId)
        {
            var request = new RequestData
            {
                Url = $"platform-tasks/pure-quant-result/{platformTaskId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PureQuantResultPositionContract>>(request);
        }
    }

    public interface IPortfolioAnalyzerClientByLicenseKeyApiMethods
    {
        DigitalConversionContract TrackDigitalConversionEvent(TrackPortfolioAnalyzerVisitContract contract);

        Task<DigitalConversionContract> TrackDigitalConversionEventAsync(TrackPortfolioAnalyzerVisitContract contract);

        void TrackPortfolioAnalyzerResult(TrackPortfolioAnalyzerResultContract contract);

        Task TrackPortfolioAnalyzerResultAsync(TrackPortfolioAnalyzerResultContract contract);
    }

    public interface IPortfolioAnalyzerClientByContextKeyApiMethods : IPortfolioAnalyzerClientByLicenseKeyApiMethods
    {
        void SaveSummaryTask(SavePortfolioAnalyzerSummaryTaskContract contract);

        Task SaveSummaryTaskAsync(SavePortfolioAnalyzerSummaryTaskContract contract);
    }

    public interface IPortfolioAnalyzerClientByOrganizationApiMethods
    {
    }

    public partial interface IPortfolioAnalyzerClient : IPortfolioAnalyzerClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfolioAnalyzerClient, IPortfolioAnalyzerClientForUser, IPortfolioAnalyzerClientForOrganization>
    {
    }

    public interface IPortfolioAnalyzerClientForUser : IPortfolioAnalyzerClientByContextKeyApiMethods, IClientByContext<IPortfolioAnalyzerClientForUser, IPortfolioAnalyzerClientForOrganization>
    {
    }

    public interface IPortfolioAnalyzerClientForOrganization : IPortfolioAnalyzerClientByOrganizationApiMethods
    {
    }

    public partial class PortfolioAnalyzerClient : BaseClient<IPortfolioAnalyzerClient, IPortfolioAnalyzerClientForUser, IPortfolioAnalyzerClientForOrganization, PortfolioAnalyzerClient>, IPortfolioAnalyzerClient, IPortfolioAnalyzerClientForUser, IPortfolioAnalyzerClientForOrganization
    {
        public void SaveSummaryTask(SavePortfolioAnalyzerSummaryTaskContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-analyzer/summary-task",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task SaveSummaryTaskAsync(SavePortfolioAnalyzerSummaryTaskContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-analyzer/summary-task",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public DigitalConversionContract TrackDigitalConversionEvent(TrackPortfolioAnalyzerVisitContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-analyzer/track-digital-conversion-event",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<DigitalConversionContract>(request);
        }

        public async Task<DigitalConversionContract> TrackDigitalConversionEventAsync(TrackPortfolioAnalyzerVisitContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-analyzer/track-digital-conversion-event",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<DigitalConversionContract>(request);
        }

        public void TrackPortfolioAnalyzerResult(TrackPortfolioAnalyzerResultContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-analyzer/track-result",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task TrackPortfolioAnalyzerResultAsync(TrackPortfolioAnalyzerResultContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-analyzer/track-result",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }
    }

    public interface IPortfolioLiteClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get Portfolio Lite Partner by valid LicenseKey.
        /// </summary>
        /// <param name="partnerKey">Valid Portfolio Lite LicenseKey to get corresponding Partner.</param>
        /// <returns>
        /// Partner information in case of success.
        /// BadRequest in case of invalid LicenseKey (if corresponding Partner is not found or key is inactive at the moment).
        /// </returns>
        PortfolioLitePartnerContract GetPartnerByKey(Guid partnerKey);

        /// <summary>
        /// Get Portfolio Lite Partner by valid LicenseKey.
        /// </summary>
        /// <param name="partnerKey">Valid Portfolio Lite LicenseKey to get corresponding Partner.</param>
        /// <returns>
        /// Partner information in case of success.
        /// BadRequest in case of invalid LicenseKey (if corresponding Partner is not found or key is inactive at the moment).
        /// </returns>
        Task<PortfolioLitePartnerContract> GetPartnerByKeyAsync(Guid partnerKey);

        /// <summary>
        /// Create Portfolio Lite one-time token that is used to Authenticate user in Portfolio Lite website.
        /// </summary>
        /// <param name="contract">Parameters to create token.</param>
        /// <returns>The one-time token that was created in result.</returns>
        Guid CreateToken(CreatePortfolioLiteTokenContract contract);

        /// <summary>
        /// Create Portfolio Lite one-time token that is used to Authenticate user in Portfolio Lite website.
        /// </summary>
        /// <param name="contract">Parameters to create token.</param>
        /// <returns>The one-time token that was created in result.</returns>
        Task<Guid> CreateTokenAsync(CreatePortfolioLiteTokenContract contract);

        /// <summary>
        /// Get information by Portfolio Lite one-time token that is used to Authenticate user in Portfolio Lite website.
        /// The returned token is marked in the database as expired (deleted), so it cannot be used twice.
        /// </summary>
        /// <param name="token">One-time token that was created by CreateToken method.</param>
        /// <returns>
        /// Information related to one-time token in case of success.
        /// BadRequest if token is not valid.
        /// </returns>
        PortfolioLiteTokenInfoContract GetTokenInfo(Guid token);

        /// <summary>
        /// Get information by Portfolio Lite one-time token that is used to Authenticate user in Portfolio Lite website.
        /// The returned token is marked in the database as expired (deleted), so it cannot be used twice.
        /// </summary>
        /// <param name="token">One-time token that was created by CreateToken method.</param>
        /// <returns>
        /// Information related to one-time token in case of success.
        /// BadRequest if token is not valid.
        /// </returns>
        Task<PortfolioLiteTokenInfoContract> GetTokenInfoAsync(Guid token);
    }

    public interface IPortfolioLiteClientByContextKeyApiMethods : IPortfolioLiteClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Initialize (get or create) portfolio for Portfolio Lite.
        /// </summary>
        /// <param name="portfolioLitePartnerId">Identifier of the Portfolio Lite Partner.</param>
        /// <returns>Portfolio that is used to work in Portfolio Lite for corresponding Partner.</returns>
        PortfolioContract InitializePortfolio(int portfolioLitePartnerId);

        /// <summary>
        /// Initialize (get or create) portfolio for Portfolio Lite.
        /// </summary>
        /// <param name="portfolioLitePartnerId">Identifier of the Portfolio Lite Partner.</param>
        /// <returns>Portfolio that is used to work in Portfolio Lite for corresponding Partner.</returns>
        Task<PortfolioContract> InitializePortfolioAsync(int portfolioLitePartnerId);

        /// <summary>
        /// Get grid data to show Portfolio Lite opened positions.
        /// </summary>
        /// <param name="portfolioLitePartnerId">Unique portfolio lite partner ID in TradeSmith system</param>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <returns>The method return contract with opened active positions and total portfolio values.</returns>
        PositionsGridDataContract GetPortfolioLitePositionsGridData(int portfolioLitePartnerId, int portfolioId);

        /// <summary>
        /// Get grid data to show Portfolio Lite opened positions.
        /// </summary>
        /// <param name="portfolioLitePartnerId">Unique portfolio lite partner ID in TradeSmith system</param>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <returns>The method return contract with opened active positions and total portfolio values.</returns>
        Task<PositionsGridDataContract> GetPortfolioLitePositionsGridDataAsync(int portfolioLitePartnerId, int portfolioId);
    }

    public interface IPortfolioLiteClientByOrganizationApiMethods
    {
    }

    public partial interface IPortfolioLiteClient : IPortfolioLiteClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfolioLiteClient, IPortfolioLiteClientForUser, IPortfolioLiteClientForOrganization>
    {
    }

    public interface IPortfolioLiteClientForUser : IPortfolioLiteClientByContextKeyApiMethods, IClientByContext<IPortfolioLiteClientForUser, IPortfolioLiteClientForOrganization>
    {
    }

    public interface IPortfolioLiteClientForOrganization : IPortfolioLiteClientByOrganizationApiMethods
    {
    }

    public partial class PortfolioLiteClient : BaseClient<IPortfolioLiteClient, IPortfolioLiteClientForUser, IPortfolioLiteClientForOrganization, PortfolioLiteClient>, IPortfolioLiteClient, IPortfolioLiteClientForUser, IPortfolioLiteClientForOrganization
    {
        /// <summary>
        /// Get Portfolio Lite Partner by valid LicenseKey.
        /// </summary>
        /// <param name="partnerKey">Valid Portfolio Lite LicenseKey to get corresponding Partner.</param>
        /// <returns>
        /// Partner information in case of success.
        /// BadRequest in case of invalid LicenseKey (if corresponding Partner is not found or key is inactive at the moment).
        /// </returns>
        public PortfolioLitePartnerContract GetPartnerByKey(Guid partnerKey)
        {
            var request = new RequestData
            {
                Url = $"portfolio-lite/partners/{partnerKey}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PortfolioLitePartnerContract>(request);
        }

        /// <summary>
        /// Get Portfolio Lite Partner by valid LicenseKey.
        /// </summary>
        /// <param name="partnerKey">Valid Portfolio Lite LicenseKey to get corresponding Partner.</param>
        /// <returns>
        /// Partner information in case of success.
        /// BadRequest in case of invalid LicenseKey (if corresponding Partner is not found or key is inactive at the moment).
        /// </returns>
        public async Task<PortfolioLitePartnerContract> GetPartnerByKeyAsync(Guid partnerKey)
        {
            var request = new RequestData
            {
                Url = $"portfolio-lite/partners/{partnerKey}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PortfolioLitePartnerContract>(request);
        }

        /// <summary>
        /// Initialize (get or create) portfolio for Portfolio Lite.
        /// </summary>
        /// <param name="portfolioLitePartnerId">Identifier of the Portfolio Lite Partner.</param>
        /// <returns>Portfolio that is used to work in Portfolio Lite for corresponding Partner.</returns>
        public PortfolioContract InitializePortfolio(int portfolioLitePartnerId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-lite/user-portfolios/{portfolioLitePartnerId}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<PortfolioContract>(request);
        }

        /// <summary>
        /// Initialize (get or create) portfolio for Portfolio Lite.
        /// </summary>
        /// <param name="portfolioLitePartnerId">Identifier of the Portfolio Lite Partner.</param>
        /// <returns>Portfolio that is used to work in Portfolio Lite for corresponding Partner.</returns>
        public async Task<PortfolioContract> InitializePortfolioAsync(int portfolioLitePartnerId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-lite/user-portfolios/{portfolioLitePartnerId}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        /// <summary>
        /// Create Portfolio Lite one-time token that is used to Authenticate user in Portfolio Lite website.
        /// </summary>
        /// <param name="contract">Parameters to create token.</param>
        /// <returns>The one-time token that was created in result.</returns>
        public Guid CreateToken(CreatePortfolioLiteTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-lite/tokens",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<Guid>(request);
        }

        /// <summary>
        /// Create Portfolio Lite one-time token that is used to Authenticate user in Portfolio Lite website.
        /// </summary>
        /// <param name="contract">Parameters to create token.</param>
        /// <returns>The one-time token that was created in result.</returns>
        public async Task<Guid> CreateTokenAsync(CreatePortfolioLiteTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-lite/tokens",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<Guid>(request);
        }

        /// <summary>
        /// Get information by Portfolio Lite one-time token that is used to Authenticate user in Portfolio Lite website.
        /// The returned token is marked in the database as expired (deleted), so it cannot be used twice.
        /// </summary>
        /// <param name="token">One-time token that was created by CreateToken method.</param>
        /// <returns>
        /// Information related to one-time token in case of success.
        /// BadRequest if token is not valid.
        /// </returns>
        public PortfolioLiteTokenInfoContract GetTokenInfo(Guid token)
        {
            var request = new RequestData
            {
                Url = $"portfolio-lite/tokens/{token}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PortfolioLiteTokenInfoContract>(request);
        }

        /// <summary>
        /// Get information by Portfolio Lite one-time token that is used to Authenticate user in Portfolio Lite website.
        /// The returned token is marked in the database as expired (deleted), so it cannot be used twice.
        /// </summary>
        /// <param name="token">One-time token that was created by CreateToken method.</param>
        /// <returns>
        /// Information related to one-time token in case of success.
        /// BadRequest if token is not valid.
        /// </returns>
        public async Task<PortfolioLiteTokenInfoContract> GetTokenInfoAsync(Guid token)
        {
            var request = new RequestData
            {
                Url = $"portfolio-lite/tokens/{token}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PortfolioLiteTokenInfoContract>(request);
        }

        /// <summary>
        /// Get grid data to show Portfolio Lite opened positions.
        /// </summary>
        /// <param name="portfolioLitePartnerId">Unique portfolio lite partner ID in TradeSmith system</param>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <returns>The method return contract with opened active positions and total portfolio values.</returns>
        public PositionsGridDataContract GetPortfolioLitePositionsGridData(int portfolioLitePartnerId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-lite/get-positions-grid/{portfolioLitePartnerId}/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PositionsGridDataContract>(request);
        }

        /// <summary>
        /// Get grid data to show Portfolio Lite opened positions.
        /// </summary>
        /// <param name="portfolioLitePartnerId">Unique portfolio lite partner ID in TradeSmith system</param>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <returns>The method return contract with opened active positions and total portfolio values.</returns>
        public async Task<PositionsGridDataContract> GetPortfolioLitePositionsGridDataAsync(int portfolioLitePartnerId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-lite/get-positions-grid/{portfolioLitePartnerId}/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PositionsGridDataContract>(request);
        }
    }

    public interface IPortfolioRulesClientByLicenseKeyApiMethods
    {
        PortfolioRuleContract CreatePortfolioRule(CreatePortfolioRuleContract contract);

        Task<PortfolioRuleContract> CreatePortfolioRuleAsync(CreatePortfolioRuleContract contract);

        void CreatePortfolioRuleResult(CreatePortfolioRuleResultContract contract);

        Task CreatePortfolioRuleResultAsync(CreatePortfolioRuleResultContract contract);

        void DeletePortfolioRule(int portfolioRuleId);

        Task DeletePortfolioRuleAsync(int portfolioRuleId);

        List<PortfolioRuleStatisticsContract> GetAllPortfolioRuleStatistics();

        Task<List<PortfolioRuleStatisticsContract>> GetAllPortfolioRuleStatisticsAsync();

        PortfolioRuleContract GetPortfolioRule(int portfolioRuleId);

        Task<PortfolioRuleContract> GetPortfolioRuleAsync(int portfolioRuleId);

        PortfolioRuleContract UpdatePortfolioRule(EditPortfolioRuleContract contract);

        Task<PortfolioRuleContract> UpdatePortfolioRuleAsync(EditPortfolioRuleContract contract);

        SearchResultContract<PortfolioRuleRunResultStatisticsContract> GetPortfolioRuleRunResultStatictics(GetPortfolioRuleRunResultStatisticsContract contract);

        Task<SearchResultContract<PortfolioRuleRunResultStatisticsContract>> GetPortfolioRuleRunResultStaticticsAsync(GetPortfolioRuleRunResultStatisticsContract contract);
    }

    public interface IPortfolioRulesClientByContextKeyApiMethods : IPortfolioRulesClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioRulesClientByOrganizationApiMethods
    {
    }

    public partial interface IPortfolioRulesClient : IPortfolioRulesClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfolioRulesClient, IPortfolioRulesClientForUser, IPortfolioRulesClientForOrganization>
    {
    }

    public interface IPortfolioRulesClientForUser : IPortfolioRulesClientByContextKeyApiMethods, IClientByContext<IPortfolioRulesClientForUser, IPortfolioRulesClientForOrganization>
    {
    }

    public interface IPortfolioRulesClientForOrganization : IPortfolioRulesClientByOrganizationApiMethods
    {
    }

    public partial class PortfolioRulesClient : BaseClient<IPortfolioRulesClient, IPortfolioRulesClientForUser, IPortfolioRulesClientForOrganization, PortfolioRulesClient>, IPortfolioRulesClient, IPortfolioRulesClientForUser, IPortfolioRulesClientForOrganization
    {
        public PortfolioRuleContract CreatePortfolioRule(CreatePortfolioRuleContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/create/portfolio-rule",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PortfolioRuleContract>(request);
        }

        public async Task<PortfolioRuleContract> CreatePortfolioRuleAsync(CreatePortfolioRuleContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/create/portfolio-rule",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PortfolioRuleContract>(request);
        }

        public void CreatePortfolioRuleResult(CreatePortfolioRuleResultContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/create/portfolio-rule-result",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        public async Task CreatePortfolioRuleResultAsync(CreatePortfolioRuleResultContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/create/portfolio-rule-result",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public void DeletePortfolioRule(int portfolioRuleId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/delete/portfolio-rule/{portfolioRuleId}",
                Method = HttpMethod.Post,
            };

            PerformRequest(request);
        }

        public async Task DeletePortfolioRuleAsync(int portfolioRuleId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/delete/portfolio-rule/{portfolioRuleId}",
                Method = HttpMethod.Post,
            };

            await PerformRequestAsync(request);
        }

        public List<PortfolioRuleStatisticsContract> GetAllPortfolioRuleStatistics()
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/get/all-portfolio-rule-statistics",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioRuleStatisticsContract>>(request);
        }

        public async Task<List<PortfolioRuleStatisticsContract>> GetAllPortfolioRuleStatisticsAsync()
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/get/all-portfolio-rule-statistics",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioRuleStatisticsContract>>(request);
        }

        public PortfolioRuleContract GetPortfolioRule(int portfolioRuleId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/get/portfolio-rule/{portfolioRuleId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PortfolioRuleContract>(request);
        }

        public async Task<PortfolioRuleContract> GetPortfolioRuleAsync(int portfolioRuleId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/get/portfolio-rule/{portfolioRuleId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PortfolioRuleContract>(request);
        }

        public PortfolioRuleContract UpdatePortfolioRule(EditPortfolioRuleContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/update/portfolio-rule",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PortfolioRuleContract>(request);
        }

        public async Task<PortfolioRuleContract> UpdatePortfolioRuleAsync(EditPortfolioRuleContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/update/portfolio-rule",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PortfolioRuleContract>(request);
        }

        public SearchResultContract<PortfolioRuleRunResultStatisticsContract> GetPortfolioRuleRunResultStatictics(GetPortfolioRuleRunResultStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/get/portfolio-rule-run-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SearchResultContract<PortfolioRuleRunResultStatisticsContract>>(request);
        }

        public async Task<SearchResultContract<PortfolioRuleRunResultStatisticsContract>> GetPortfolioRuleRunResultStaticticsAsync(GetPortfolioRuleRunResultStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-rules/get/portfolio-rule-run-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SearchResultContract<PortfolioRuleRunResultStatisticsContract>>(request);
        }
    }

    public interface IPortfoliosClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfoliosClientByContextKeyApiMethods : IPortfoliosClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get user’s portfolio by the portfolio ID. Only the owner of the portfolio can obtain the portfolio.
        /// </summary>
        /// <param name="portfolioId">Unique portfolio ID.</param>
        /// <returns>
        /// The method returns the portfolio including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        PortfolioContract GetPortfolio(int portfolioId);

        /// <summary>
        /// Get user’s portfolio by the portfolio ID. Only the owner of the portfolio can obtain the portfolio.
        /// </summary>
        /// <param name="portfolioId">Unique portfolio ID.</param>
        /// <returns>
        /// The method returns the portfolio including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        Task<PortfolioContract> GetPortfolioAsync(int portfolioId);

        /// <summary>
        /// Get the list of all user's portfolios, including delisted.
        /// </summary>
        /// <param name="includeWithHiddenHistory">Property to identify whether the delisted portfolios with hidden history should be included in the list.</param>
        /// <returns>
        /// The method returns the portfolio array for the current user
        /// The fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        List<PortfolioContract> GetUserPortfoliosWithDelisted(bool includeWithHiddenHistory);

        /// <summary>
        /// Get the list of all user's portfolios, including delisted.
        /// </summary>
        /// <param name="includeWithHiddenHistory">Property to identify whether the delisted portfolios with hidden history should be included in the list.</param>
        /// <returns>
        /// The method returns the portfolio array for the current user
        /// The fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        Task<List<PortfolioContract>> GetUserPortfoliosWithDelistedAsync(bool includeWithHiddenHistory);

        /// <summary>
        /// Get the list of active user's portfolios.
        /// </summary>
        /// <returns>
        /// The method returns the portfolio array for the current user
        /// The fields marked with (sync) are applicable only for synchronized portfolios.
        /// </returns>
        List<PortfolioContract> GetUserPortfolios();

        /// <summary>
        /// Get the list of active user's portfolios.
        /// </summary>
        /// <returns>
        /// The method returns the portfolio array for the current user
        /// The fields marked with (sync) are applicable only for synchronized portfolios.
        /// </returns>
        Task<List<PortfolioContract>> GetUserPortfoliosAsync();

        /// <summary>
        /// Edit the portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to edit</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns the refreshed portfolio.</returns>
        PortfolioContract EditPortfolio(int portfolioId, EditPortfolioContract portfolio);

        /// <summary>
        /// Edit the portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to edit</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns the refreshed portfolio.</returns>
        Task<PortfolioContract> EditPortfolioAsync(int portfolioId, EditPortfolioContract portfolio);

        /// <summary>
        /// Add a new manual portfolio.
        /// </summary>
        /// <param name="portfolio">Create portfolio contract.</param>
        /// <returns>
        /// The method returns information about the newly created portfolio.
        /// Please, notice that the TradeStops API allows adding only manual portfolios.The value of the property ImportedPortfolio is always null for manual portfolios.
        /// </returns>
        PortfolioContract CreatePortfolio(CreatePortfolioContract portfolio);

        /// <summary>
        /// Add a new manual portfolio.
        /// </summary>
        /// <param name="portfolio">Create portfolio contract.</param>
        /// <returns>
        /// The method returns information about the newly created portfolio.
        /// Please, notice that the TradeStops API allows adding only manual portfolios.The value of the property ImportedPortfolio is always null for manual portfolios.
        /// </returns>
        Task<PortfolioContract> CreatePortfolioAsync(CreatePortfolioContract portfolio);

        /// <summary>
        /// Get specific portfolio parameters such as statistics on open, closed positions, overall statistics on all positions reported in different currencies.
        /// </summary>
        /// <param name="portfolioId">Portfolio identifier.</param>
        /// <returns>List of portfolio statistic values</returns>
        List<PortfolioStatsContract> GetPortfolioStats(int portfolioId);

        /// <summary>
        /// Get specific portfolio parameters such as statistics on open, closed positions, overall statistics on all positions reported in different currencies.
        /// </summary>
        /// <param name="portfolioId">Portfolio identifier.</param>
        /// <returns>List of portfolio statistic values</returns>
        Task<List<PortfolioStatsContract>> GetPortfolioStatsAsync(int portfolioId);

        /// <summary>
        /// Get list of portfolio statistic values
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        List<PortfolioStatsContract> GetPortfolioStats(GetPortfolioStatsContract input);

        /// <summary>
        /// Get list of portfolio statistic values
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        Task<List<PortfolioStatsContract>> GetPortfolioStatsAsync(GetPortfolioStatsContract input);

        List<PortfolioStatsContract> GetPortfolioStats(List<int> portfolioIds);

        Task<List<PortfolioStatsContract>> GetPortfolioStatsAsync(List<int> portfolioIds);

        /// <summary>
        /// Duplicate the existing portfolio.
        /// </summary>
        /// <param name="portfolio">Portfolio values to duplicate.</param>
        /// <returns>The method returns the info of the new duplicated portfolio.</returns>
        PortfolioContract DuplicatePortfolio(DuplicatePortfolioContract portfolio);

        /// <summary>
        /// Duplicate the existing portfolio.
        /// </summary>
        /// <param name="portfolio">Portfolio values to duplicate.</param>
        /// <returns>The method returns the info of the new duplicated portfolio.</returns>
        Task<PortfolioContract> DuplicatePortfolioAsync(DuplicatePortfolioContract portfolio);

        /// <summary>
        /// Get Re-entry portfolio, that by default contains SSI alerts for positions that were closed.
        /// Re-entry portfolio can be created in TradeStops website using 'Close position popup'
        /// </summary>
        /// <returns>Portfolio contract</returns>
        PortfolioContract GetReEntryPortfolio();

        /// <summary>
        /// Get Re-entry portfolio, that by default contains SSI alerts for positions that were closed.
        /// Re-entry portfolio can be created in TradeStops website using 'Close position popup'
        /// </summary>
        /// <returns>Portfolio contract</returns>
        Task<PortfolioContract> GetReEntryPortfolioAsync();

        /// <summary>
        /// Create Re-entry portfolio, that by default contains SSI alerts for positions that were closed.
        /// Re-entry portfolio can be created in TradeStops using 'Close position popup'.
        /// User can have only one Re-entry portfolio.
        /// </summary>
        /// <param name="createContract">Options to create Re-entry portfolio.</param>
        /// <returns>Created portfolio contract</returns>
        PortfolioContract CreateReEntryPortfolio(CreateReEntryPortfolioContract createContract);

        /// <summary>
        /// Create Re-entry portfolio, that by default contains SSI alerts for positions that were closed.
        /// Re-entry portfolio can be created in TradeStops using 'Close position popup'.
        /// User can have only one Re-entry portfolio.
        /// </summary>
        /// <param name="createContract">Options to create Re-entry portfolio.</param>
        /// <returns>Created portfolio contract</returns>
        Task<PortfolioContract> CreateReEntryPortfolioAsync(CreateReEntryPortfolioContract createContract);

        /// <summary>
        /// Delete portfolios by IDs
        /// </summary>
        /// <param name="contract">Contract with list of portfolio IDs to delete and other options.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the portfolios.</returns>
        void DeletePortfolios(DeletePortfoliosContract contract);

        /// <summary>
        /// Delete portfolios by IDs
        /// </summary>
        /// <param name="contract">Contract with list of portfolio IDs to delete and other options.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the portfolios.</returns>
        Task DeletePortfoliosAsync(DeletePortfoliosContract contract);

        /// <summary>
        /// Get the number of Portfolios that the current user can create.
        /// </summary>
        /// <returns>The method returns the number (int type) of Portfolios that the current user can create.</returns>
        int GetAvailablePortfoliosCount();

        /// <summary>
        /// Get the number of Portfolios that the current user can create.
        /// </summary>
        /// <returns>The method returns the number (int type) of Portfolios that the current user can create.</returns>
        Task<int> GetAvailablePortfoliosCountAsync();

        /// <summary>
        /// Get user's portfolios by the Vendor Account ID.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID for synced portfolios.</param>
        /// <param name="vendorType">Vendor type for synced portfolios.</param>
        /// <param name="includeDelisted">Include the soft-deleted portfolios to the list.</param>
        /// <returns>
        /// The method returns portfolios including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        List<PortfolioContract> GetPortfolioByVendorAccountIdAndVendorType(string vendorAccountId, VendorTypes vendorType, bool includeDelisted);

        /// <summary>
        /// Get user's portfolios by the Vendor Account ID.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID for synced portfolios.</param>
        /// <param name="vendorType">Vendor type for synced portfolios.</param>
        /// <param name="includeDelisted">Include the soft-deleted portfolios to the list.</param>
        /// <returns>
        /// The method returns portfolios including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        Task<List<PortfolioContract>> GetPortfolioByVendorAccountIdAndVendorTypeAsync(string vendorAccountId, VendorTypes vendorType, bool includeDelisted);
    }

    public interface IPortfoliosClientByOrganizationApiMethods
    {
    }

    public partial interface IPortfoliosClient : IPortfoliosClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfoliosClient, IPortfoliosClientForUser, IPortfoliosClientForOrganization>
    {
    }

    public interface IPortfoliosClientForUser : IPortfoliosClientByContextKeyApiMethods, IClientByContext<IPortfoliosClientForUser, IPortfoliosClientForOrganization>
    {
    }

    public interface IPortfoliosClientForOrganization : IPortfoliosClientByOrganizationApiMethods
    {
    }

    public partial class PortfoliosClient : BaseClient<IPortfoliosClient, IPortfoliosClientForUser, IPortfoliosClientForOrganization, PortfoliosClient>, IPortfoliosClient, IPortfoliosClientForUser, IPortfoliosClientForOrganization
    {
        /// <summary>
        /// Get user’s portfolio by the portfolio ID. Only the owner of the portfolio can obtain the portfolio.
        /// </summary>
        /// <param name="portfolioId">Unique portfolio ID.</param>
        /// <returns>
        /// The method returns the portfolio including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        public PortfolioContract GetPortfolio(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfolios/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PortfolioContract>(request);
        }

        /// <summary>
        /// Get user’s portfolio by the portfolio ID. Only the owner of the portfolio can obtain the portfolio.
        /// </summary>
        /// <param name="portfolioId">Unique portfolio ID.</param>
        /// <returns>
        /// The method returns the portfolio including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        public async Task<PortfolioContract> GetPortfolioAsync(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfolios/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        /// <summary>
        /// Get the list of all user's portfolios, including delisted.
        /// </summary>
        /// <param name="includeWithHiddenHistory">Property to identify whether the delisted portfolios with hidden history should be included in the list.</param>
        /// <returns>
        /// The method returns the portfolio array for the current user
        /// The fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        public List<PortfolioContract> GetUserPortfoliosWithDelisted(bool includeWithHiddenHistory)
        {
            var request = new RequestData
            {
                Url = $"portfolios/with-delisted/{includeWithHiddenHistory}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioContract>>(request);
        }

        /// <summary>
        /// Get the list of all user's portfolios, including delisted.
        /// </summary>
        /// <param name="includeWithHiddenHistory">Property to identify whether the delisted portfolios with hidden history should be included in the list.</param>
        /// <returns>
        /// The method returns the portfolio array for the current user
        /// The fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        public async Task<List<PortfolioContract>> GetUserPortfoliosWithDelistedAsync(bool includeWithHiddenHistory)
        {
            var request = new RequestData
            {
                Url = $"portfolios/with-delisted/{includeWithHiddenHistory}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioContract>>(request);
        }

        /// <summary>
        /// Get the list of active user's portfolios.
        /// </summary>
        /// <returns>
        /// The method returns the portfolio array for the current user
        /// The fields marked with (sync) are applicable only for synchronized portfolios.
        /// </returns>
        public List<PortfolioContract> GetUserPortfolios()
        {
            var request = new RequestData
            {
                Url = $"portfolios",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioContract>>(request);
        }

        /// <summary>
        /// Get the list of active user's portfolios.
        /// </summary>
        /// <returns>
        /// The method returns the portfolio array for the current user
        /// The fields marked with (sync) are applicable only for synchronized portfolios.
        /// </returns>
        public async Task<List<PortfolioContract>> GetUserPortfoliosAsync()
        {
            var request = new RequestData
            {
                Url = $"portfolios",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioContract>>(request);
        }

        /// <summary>
        /// Edit the portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to edit</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns the refreshed portfolio.</returns>
        public PortfolioContract EditPortfolio(int portfolioId, EditPortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolios/{portfolioId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(portfolio);

            return PerformRequest<PortfolioContract>(request);
        }

        /// <summary>
        /// Edit the portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to edit</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns the refreshed portfolio.</returns>
        public async Task<PortfolioContract> EditPortfolioAsync(int portfolioId, EditPortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolios/{portfolioId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(portfolio);

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        /// <summary>
        /// Add a new manual portfolio.
        /// </summary>
        /// <param name="portfolio">Create portfolio contract.</param>
        /// <returns>
        /// The method returns information about the newly created portfolio.
        /// Please, notice that the TradeStops API allows adding only manual portfolios.The value of the property ImportedPortfolio is always null for manual portfolios.
        /// </returns>
        public PortfolioContract CreatePortfolio(CreatePortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolio);

            return PerformRequest<PortfolioContract>(request);
        }

        /// <summary>
        /// Add a new manual portfolio.
        /// </summary>
        /// <param name="portfolio">Create portfolio contract.</param>
        /// <returns>
        /// The method returns information about the newly created portfolio.
        /// Please, notice that the TradeStops API allows adding only manual portfolios.The value of the property ImportedPortfolio is always null for manual portfolios.
        /// </returns>
        public async Task<PortfolioContract> CreatePortfolioAsync(CreatePortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolio);

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        /// <summary>
        /// Get specific portfolio parameters such as statistics on open, closed positions, overall statistics on all positions reported in different currencies.
        /// </summary>
        /// <param name="portfolioId">Portfolio identifier.</param>
        /// <returns>List of portfolio statistic values</returns>
        public List<PortfolioStatsContract> GetPortfolioStats(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfoliostats/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioStatsContract>>(request);
        }

        /// <summary>
        /// Get specific portfolio parameters such as statistics on open, closed positions, overall statistics on all positions reported in different currencies.
        /// </summary>
        /// <param name="portfolioId">Portfolio identifier.</param>
        /// <returns>List of portfolio statistic values</returns>
        public async Task<List<PortfolioStatsContract>> GetPortfolioStatsAsync(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfoliostats/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioStatsContract>>(request);
        }

        /// <summary>
        /// Get list of portfolio statistic values
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        public List<PortfolioStatsContract> GetPortfolioStats(GetPortfolioStatsContract input)
        {
            var request = new RequestData
            {
                Url = $"portfoliostats/get-by-ids/by-currency",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<List<PortfolioStatsContract>>(request);
        }

        /// <summary>
        /// Get list of portfolio statistic values
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        public async Task<List<PortfolioStatsContract>> GetPortfolioStatsAsync(GetPortfolioStatsContract input)
        {
            var request = new RequestData
            {
                Url = $"portfoliostats/get-by-ids/by-currency",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<List<PortfolioStatsContract>>(request);
        }

        public List<PortfolioStatsContract> GetPortfolioStats(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"portfoliostats/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<List<PortfolioStatsContract>>(request);
        }

        public async Task<List<PortfolioStatsContract>> GetPortfolioStatsAsync(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"portfoliostats/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<List<PortfolioStatsContract>>(request);
        }

        /// <summary>
        /// Duplicate the existing portfolio.
        /// </summary>
        /// <param name="portfolio">Portfolio values to duplicate.</param>
        /// <returns>The method returns the info of the new duplicated portfolio.</returns>
        public PortfolioContract DuplicatePortfolio(DuplicatePortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolios/duplicate",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolio);

            return PerformRequest<PortfolioContract>(request);
        }

        /// <summary>
        /// Duplicate the existing portfolio.
        /// </summary>
        /// <param name="portfolio">Portfolio values to duplicate.</param>
        /// <returns>The method returns the info of the new duplicated portfolio.</returns>
        public async Task<PortfolioContract> DuplicatePortfolioAsync(DuplicatePortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolios/duplicate",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolio);

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        /// <summary>
        /// Get Re-entry portfolio, that by default contains SSI alerts for positions that were closed.
        /// Re-entry portfolio can be created in TradeStops website using 'Close position popup'
        /// </summary>
        /// <returns>Portfolio contract</returns>
        public PortfolioContract GetReEntryPortfolio()
        {
            var request = new RequestData
            {
                Url = $"portfolios/re-entry",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PortfolioContract>(request);
        }

        /// <summary>
        /// Get Re-entry portfolio, that by default contains SSI alerts for positions that were closed.
        /// Re-entry portfolio can be created in TradeStops website using 'Close position popup'
        /// </summary>
        /// <returns>Portfolio contract</returns>
        public async Task<PortfolioContract> GetReEntryPortfolioAsync()
        {
            var request = new RequestData
            {
                Url = $"portfolios/re-entry",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        /// <summary>
        /// Create Re-entry portfolio, that by default contains SSI alerts for positions that were closed.
        /// Re-entry portfolio can be created in TradeStops using 'Close position popup'.
        /// User can have only one Re-entry portfolio.
        /// </summary>
        /// <param name="createContract">Options to create Re-entry portfolio.</param>
        /// <returns>Created portfolio contract</returns>
        public PortfolioContract CreateReEntryPortfolio(CreateReEntryPortfolioContract createContract)
        {
            var request = new RequestData
            {
                Url = $"portfolios/re-entry",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return PerformRequest<PortfolioContract>(request);
        }

        /// <summary>
        /// Create Re-entry portfolio, that by default contains SSI alerts for positions that were closed.
        /// Re-entry portfolio can be created in TradeStops using 'Close position popup'.
        /// User can have only one Re-entry portfolio.
        /// </summary>
        /// <param name="createContract">Options to create Re-entry portfolio.</param>
        /// <returns>Created portfolio contract</returns>
        public async Task<PortfolioContract> CreateReEntryPortfolioAsync(CreateReEntryPortfolioContract createContract)
        {
            var request = new RequestData
            {
                Url = $"portfolios/re-entry",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        /// <summary>
        /// Delete portfolios by IDs
        /// </summary>
        /// <param name="contract">Contract with list of portfolio IDs to delete and other options.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the portfolios.</returns>
        public void DeletePortfolios(DeletePortfoliosContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolios",
                Method = HttpMethod.Delete,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Delete portfolios by IDs
        /// </summary>
        /// <param name="contract">Contract with list of portfolio IDs to delete and other options.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the portfolios.</returns>
        public async Task DeletePortfoliosAsync(DeletePortfoliosContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolios",
                Method = HttpMethod.Delete,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get the number of Portfolios that the current user can create.
        /// </summary>
        /// <returns>The method returns the number (int type) of Portfolios that the current user can create.</returns>
        public int GetAvailablePortfoliosCount()
        {
            var request = new RequestData
            {
                Url = $"portfolios/available-portfolio-count",
                Method = HttpMethod.Get,
            };

            return PerformRequest<int>(request);
        }

        /// <summary>
        /// Get the number of Portfolios that the current user can create.
        /// </summary>
        /// <returns>The method returns the number (int type) of Portfolios that the current user can create.</returns>
        public async Task<int> GetAvailablePortfoliosCountAsync()
        {
            var request = new RequestData
            {
                Url = $"portfolios/available-portfolio-count",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<int>(request);
        }

        /// <summary>
        /// Get user's portfolios by the Vendor Account ID.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID for synced portfolios.</param>
        /// <param name="vendorType">Vendor type for synced portfolios.</param>
        /// <param name="includeDelisted">Include the soft-deleted portfolios to the list.</param>
        /// <returns>
        /// The method returns portfolios including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        public List<PortfolioContract> GetPortfolioByVendorAccountIdAndVendorType(string vendorAccountId, VendorTypes vendorType, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"portfolios/by-vendor-account-id-and-vendor-type/{vendorAccountId}/{vendorType}/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioContract>>(request);
        }

        /// <summary>
        /// Get user's portfolios by the Vendor Account ID.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID for synced portfolios.</param>
        /// <param name="vendorType">Vendor type for synced portfolios.</param>
        /// <param name="includeDelisted">Include the soft-deleted portfolios to the list.</param>
        /// <returns>
        /// The method returns portfolios including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        public async Task<List<PortfolioContract>> GetPortfolioByVendorAccountIdAndVendorTypeAsync(string vendorAccountId, VendorTypes vendorType, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"portfolios/by-vendor-account-id-and-vendor-type/{vendorAccountId}/{vendorType}/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioContract>>(request);
        }
    }

    public interface IPortfolioTrackerOrganizationsClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerOrganizationsClientByContextKeyApiMethods : IPortfolioTrackerOrganizationsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get list of organizations available for user.
        /// </summary>
        /// <returns>List of available PortfolioTracker organizations.</returns>
        List<PortfolioTrackerOrganizations> GetOrganizationsForUser();

        /// <summary>
        /// Get list of organizations available for user.
        /// </summary>
        /// <returns>List of available PortfolioTracker organizations.</returns>
        Task<List<PortfolioTrackerOrganizations>> GetOrganizationsForUserAsync();
    }

    public interface IPortfolioTrackerOrganizationsClientByOrganizationApiMethods
    {
    }

    public partial interface IPortfolioTrackerOrganizationsClient : IPortfolioTrackerOrganizationsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfolioTrackerOrganizationsClient, IPortfolioTrackerOrganizationsClientForUser, IPortfolioTrackerOrganizationsClientForOrganization>
    {
    }

    public interface IPortfolioTrackerOrganizationsClientForUser : IPortfolioTrackerOrganizationsClientByContextKeyApiMethods, IClientByContext<IPortfolioTrackerOrganizationsClientForUser, IPortfolioTrackerOrganizationsClientForOrganization>
    {
    }

    public interface IPortfolioTrackerOrganizationsClientForOrganization : IPortfolioTrackerOrganizationsClientByOrganizationApiMethods
    {
    }

    public partial class PortfolioTrackerOrganizationsClient : BaseClient<IPortfolioTrackerOrganizationsClient, IPortfolioTrackerOrganizationsClientForUser, IPortfolioTrackerOrganizationsClientForOrganization, PortfolioTrackerOrganizationsClient>, IPortfolioTrackerOrganizationsClient, IPortfolioTrackerOrganizationsClientForUser, IPortfolioTrackerOrganizationsClientForOrganization
    {
        /// <summary>
        /// Get list of organizations available for user.
        /// </summary>
        /// <returns>List of available PortfolioTracker organizations.</returns>
        public List<PortfolioTrackerOrganizations> GetOrganizationsForUser()
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organizations/for-user",
                Method = HttpMethod.Post,
            };

            return PerformRequest<List<PortfolioTrackerOrganizations>>(request);
        }

        /// <summary>
        /// Get list of organizations available for user.
        /// </summary>
        /// <returns>List of available PortfolioTracker organizations.</returns>
        public async Task<List<PortfolioTrackerOrganizations>> GetOrganizationsForUserAsync()
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organizations/for-user",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<List<PortfolioTrackerOrganizations>>(request);
        }
    }

    public interface IPortfolioTrackerPortfolioGroupsClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerPortfolioGroupsClientByContextKeyApiMethods : IPortfolioTrackerPortfolioGroupsClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerPortfolioGroupsClientByOrganizationApiMethods
    {
        /// <summary>
        /// Get all Portfolio Groups for all organizations that are available for the user.
        /// </summary>
        /// <returns>List of Portfolio Groups.</returns>
        List<PortfolioTrackerPortfolioGroupContract> GetPortfolioGroups();

        /// <summary>
        /// Get all Portfolio Groups for all organizations that are available for the user.
        /// </summary>
        /// <returns>List of Portfolio Groups.</returns>
        Task<List<PortfolioTrackerPortfolioGroupContract>> GetPortfolioGroupsAsync();

        /// <summary>
        /// Create new Portfolio Group for the organization.
        /// </summary>
        /// <param name="contract">Parameters to create new group of portfolios.</param>
        /// <returns>Created Portfolio Group.</returns>
        PortfolioTrackerPortfolioGroupContract CreatePortfolioGroup(CreatePortfolioTrackerPortfolioGroupContract contract);

        /// <summary>
        /// Create new Portfolio Group for the organization.
        /// </summary>
        /// <param name="contract">Parameters to create new group of portfolios.</param>
        /// <returns>Created Portfolio Group.</returns>
        Task<PortfolioTrackerPortfolioGroupContract> CreatePortfolioGroupAsync(CreatePortfolioTrackerPortfolioGroupContract contract);

        /// <summary>
        /// Edit Portfolio Group.
        /// Only the fields present in the request payload will be updated.
        /// So it's not necessary to set all fields to update just one of them.
        /// </summary>
        /// <param name="portfolioGroupId">ID of the Portfolio Group to update.</param>
        /// <param name="contract">Parameters to update Portfolio group.</param>
        /// <returns>Updated Portfolio Group.</returns>
        PortfolioTrackerPortfolioGroupContract EditPortfolioGroup(int portfolioGroupId, EditPortfolioTrackerPortfolioGroupContract contract);

        /// <summary>
        /// Edit Portfolio Group.
        /// Only the fields present in the request payload will be updated.
        /// So it's not necessary to set all fields to update just one of them.
        /// </summary>
        /// <param name="portfolioGroupId">ID of the Portfolio Group to update.</param>
        /// <param name="contract">Parameters to update Portfolio group.</param>
        /// <returns>Updated Portfolio Group.</returns>
        Task<PortfolioTrackerPortfolioGroupContract> EditPortfolioGroupAsync(int portfolioGroupId, EditPortfolioTrackerPortfolioGroupContract contract);

        /// <summary>
        /// Delete Portfolio Group completely from the database.
        /// All Portfolios from deleted group will be assigned to 'No Group' group. So Portfolio.PortfolioGroupId will be null.
        /// </summary>
        /// <param name="portfolioGroupId">ID of the Portfolio Group to delete.</param>
        /// <returns>HTTP Status code 200 (Ok) in case of success.</returns>
        void DeletePortfolioGroup(int portfolioGroupId);

        /// <summary>
        /// Delete Portfolio Group completely from the database.
        /// All Portfolios from deleted group will be assigned to 'No Group' group. So Portfolio.PortfolioGroupId will be null.
        /// </summary>
        /// <param name="portfolioGroupId">ID of the Portfolio Group to delete.</param>
        /// <returns>HTTP Status code 200 (Ok) in case of success.</returns>
        Task DeletePortfolioGroupAsync(int portfolioGroupId);

        /// <summary>
        /// Move portfolios into new group.
        /// Basically method just updates PortfolioGroupId value for Portfolio.
        /// </summary>
        /// <param name="contract">Parameters to move portfolios into new group.</param>
        /// <returns>HTTP Status code 200 (Ok) in case of success.</returns>
        void MovePortfoliosToGroup(MovePortfoliosToGroupContract contract);

        /// <summary>
        /// Move portfolios into new group.
        /// Basically method just updates PortfolioGroupId value for Portfolio.
        /// </summary>
        /// <param name="contract">Parameters to move portfolios into new group.</param>
        /// <returns>HTTP Status code 200 (Ok) in case of success.</returns>
        Task MovePortfoliosToGroupAsync(MovePortfoliosToGroupContract contract);
    }

    public partial interface IPortfolioTrackerPortfolioGroupsClient : IPortfolioTrackerPortfolioGroupsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfolioTrackerPortfolioGroupsClient, IPortfolioTrackerPortfolioGroupsClientForUser, IPortfolioTrackerPortfolioGroupsClientForOrganization>
    {
    }

    public interface IPortfolioTrackerPortfolioGroupsClientForUser : IPortfolioTrackerPortfolioGroupsClientByContextKeyApiMethods, IClientByContext<IPortfolioTrackerPortfolioGroupsClientForUser, IPortfolioTrackerPortfolioGroupsClientForOrganization>
    {
    }

    public interface IPortfolioTrackerPortfolioGroupsClientForOrganization : IPortfolioTrackerPortfolioGroupsClientByOrganizationApiMethods
    {
    }

    public partial class PortfolioTrackerPortfolioGroupsClient : BaseClient<IPortfolioTrackerPortfolioGroupsClient, IPortfolioTrackerPortfolioGroupsClientForUser, IPortfolioTrackerPortfolioGroupsClientForOrganization, PortfolioTrackerPortfolioGroupsClient>, IPortfolioTrackerPortfolioGroupsClient, IPortfolioTrackerPortfolioGroupsClientForUser, IPortfolioTrackerPortfolioGroupsClientForOrganization
    {
        /// <summary>
        /// Get all Portfolio Groups for all organizations that are available for the user.
        /// </summary>
        /// <returns>List of Portfolio Groups.</returns>
        public List<PortfolioTrackerPortfolioGroupContract> GetPortfolioGroups()
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-groups",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioTrackerPortfolioGroupContract>>(request);
        }

        /// <summary>
        /// Get all Portfolio Groups for all organizations that are available for the user.
        /// </summary>
        /// <returns>List of Portfolio Groups.</returns>
        public async Task<List<PortfolioTrackerPortfolioGroupContract>> GetPortfolioGroupsAsync()
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-groups",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioTrackerPortfolioGroupContract>>(request);
        }

        /// <summary>
        /// Create new Portfolio Group for the organization.
        /// </summary>
        /// <param name="contract">Parameters to create new group of portfolios.</param>
        /// <returns>Created Portfolio Group.</returns>
        public PortfolioTrackerPortfolioGroupContract CreatePortfolioGroup(CreatePortfolioTrackerPortfolioGroupContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-groups",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PortfolioTrackerPortfolioGroupContract>(request);
        }

        /// <summary>
        /// Create new Portfolio Group for the organization.
        /// </summary>
        /// <param name="contract">Parameters to create new group of portfolios.</param>
        /// <returns>Created Portfolio Group.</returns>
        public async Task<PortfolioTrackerPortfolioGroupContract> CreatePortfolioGroupAsync(CreatePortfolioTrackerPortfolioGroupContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-groups",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PortfolioTrackerPortfolioGroupContract>(request);
        }

        /// <summary>
        /// Edit Portfolio Group.
        /// Only the fields present in the request payload will be updated.
        /// So it's not necessary to set all fields to update just one of them.
        /// </summary>
        /// <param name="portfolioGroupId">ID of the Portfolio Group to update.</param>
        /// <param name="contract">Parameters to update Portfolio group.</param>
        /// <returns>Updated Portfolio Group.</returns>
        public PortfolioTrackerPortfolioGroupContract EditPortfolioGroup(int portfolioGroupId, EditPortfolioTrackerPortfolioGroupContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-groups/{portfolioGroupId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PortfolioTrackerPortfolioGroupContract>(request);
        }

        /// <summary>
        /// Edit Portfolio Group.
        /// Only the fields present in the request payload will be updated.
        /// So it's not necessary to set all fields to update just one of them.
        /// </summary>
        /// <param name="portfolioGroupId">ID of the Portfolio Group to update.</param>
        /// <param name="contract">Parameters to update Portfolio group.</param>
        /// <returns>Updated Portfolio Group.</returns>
        public async Task<PortfolioTrackerPortfolioGroupContract> EditPortfolioGroupAsync(int portfolioGroupId, EditPortfolioTrackerPortfolioGroupContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-groups/{portfolioGroupId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PortfolioTrackerPortfolioGroupContract>(request);
        }

        /// <summary>
        /// Delete Portfolio Group completely from the database.
        /// All Portfolios from deleted group will be assigned to 'No Group' group. So Portfolio.PortfolioGroupId will be null.
        /// </summary>
        /// <param name="portfolioGroupId">ID of the Portfolio Group to delete.</param>
        /// <returns>HTTP Status code 200 (Ok) in case of success.</returns>
        public void DeletePortfolioGroup(int portfolioGroupId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-groups/{portfolioGroupId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete Portfolio Group completely from the database.
        /// All Portfolios from deleted group will be assigned to 'No Group' group. So Portfolio.PortfolioGroupId will be null.
        /// </summary>
        /// <param name="portfolioGroupId">ID of the Portfolio Group to delete.</param>
        /// <returns>HTTP Status code 200 (Ok) in case of success.</returns>
        public async Task DeletePortfolioGroupAsync(int portfolioGroupId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-groups/{portfolioGroupId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Move portfolios into new group.
        /// Basically method just updates PortfolioGroupId value for Portfolio.
        /// </summary>
        /// <param name="contract">Parameters to move portfolios into new group.</param>
        /// <returns>HTTP Status code 200 (Ok) in case of success.</returns>
        public void MovePortfoliosToGroup(MovePortfoliosToGroupContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-groups/move-portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Move portfolios into new group.
        /// Basically method just updates PortfolioGroupId value for Portfolio.
        /// </summary>
        /// <param name="contract">Parameters to move portfolios into new group.</param>
        /// <returns>HTTP Status code 200 (Ok) in case of success.</returns>
        public async Task MovePortfoliosToGroupAsync(MovePortfoliosToGroupContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-groups/move-portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }
    }

    public interface IPortfolioTrackerPortfoliosClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get list of portfolios available for organization.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <returns>Returns portfolios that match specified parameters.</returns>
        List<PortfolioTrackerPortfolioContract> GetOrganizationPortfolios(PortfolioTrackerOrganizations organizationId);

        /// <summary>
        /// Get list of portfolios available for organization.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <returns>Returns portfolios that match specified parameters.</returns>
        Task<List<PortfolioTrackerPortfolioContract>> GetOrganizationPortfoliosAsync(PortfolioTrackerOrganizations organizationId);

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <param name="input">Parameters to get portfolio statistics.</param>
        /// <returns>List of portfolio statistic values</returns>
        List<PortfolioTrackerPortfolioStatsContract> GetPortfolioStats(PortfolioTrackerOrganizations organizationId, GetPortfolioTrackerPortfoliosStatsContract input);

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <param name="input">Parameters to get portfolio statistics.</param>
        /// <returns>List of portfolio statistic values</returns>
        Task<List<PortfolioTrackerPortfolioStatsContract>> GetPortfolioStatsAsync(PortfolioTrackerOrganizations organizationId, GetPortfolioTrackerPortfoliosStatsContract input);
    }

    public interface IPortfolioTrackerPortfoliosClientByContextKeyApiMethods : IPortfolioTrackerPortfoliosClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerPortfoliosClientByOrganizationApiMethods
    {
        /// <summary>
        /// Create new portfolio.
        /// </summary>
        /// <param name="portfolio">Create portfolio contract.</param>
        /// <returns>The method returns information about the newly created portfolio.</returns>
        PortfolioTrackerPortfolioContract CreatePortfolio(CreatePortfolioTrackerPortfolioContract portfolio);

        /// <summary>
        /// Create new portfolio.
        /// </summary>
        /// <param name="portfolio">Create portfolio contract.</param>
        /// <returns>The method returns information about the newly created portfolio.</returns>
        Task<PortfolioTrackerPortfolioContract> CreatePortfolioAsync(CreatePortfolioTrackerPortfolioContract portfolio);

        /// <summary>
        /// Get list of portfolios available for current organization.
        /// </summary>
        /// <returns>Returns portfolios that match specified parameters.</returns>
        List<PortfolioTrackerPortfolioContract> GetOrganizationPortfolios();

        /// <summary>
        /// Get list of portfolios available for current organization.
        /// </summary>
        /// <returns>Returns portfolios that match specified parameters.</returns>
        Task<List<PortfolioTrackerPortfolioContract>> GetOrganizationPortfoliosAsync();

        /// <summary>
        /// Get portfolio by portfolio ID.
        /// If portfolio is delisted (soft-deleted), it won't be returned by ID.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID</param>
        /// <returns>Corresponding portfolio.</returns>
        PortfolioTrackerPortfolioContract GetPortfolio(int portfolioId);

        /// <summary>
        /// Get portfolio by portfolio ID.
        /// If portfolio is delisted (soft-deleted), it won't be returned by ID.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID</param>
        /// <returns>Corresponding portfolio.</returns>
        Task<PortfolioTrackerPortfolioContract> GetPortfolioAsync(int portfolioId);

        List<PortfolioTrackerPortfolioContract> GetPortfolios(List<int> portfolioIds);

        Task<List<PortfolioTrackerPortfolioContract>> GetPortfoliosAsync(List<int> portfolioIds);

        /// <summary>
        /// Edit portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to edit</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns the edited portfolio.</returns>
        PortfolioTrackerPortfolioContract EditPortfolio(int portfolioId, EditPortfolioTrackerPortfolioContract portfolio);

        /// <summary>
        /// Edit portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to edit</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns the edited portfolio.</returns>
        Task<PortfolioTrackerPortfolioContract> EditPortfolioAsync(int portfolioId, EditPortfolioTrackerPortfolioContract portfolio);

        /// <summary>
        /// Delete portfolios by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete portfolios.</param>
        /// <returns>The method returns HTTP status code 200 if all portfolios were successfully deleted.</returns>
        void DeletePortfolios(DeletePortfolioTrackerPortfoliosContract contract);

        /// <summary>
        /// Delete portfolios by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete portfolios.</param>
        /// <returns>The method returns HTTP status code 200 if all portfolios were successfully deleted.</returns>
        Task DeletePortfoliosAsync(DeletePortfolioTrackerPortfoliosContract contract);

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        List<PortfolioTrackerPortfolioStatsContract> GetPortfolioStats(GetPortfolioTrackerPortfoliosStatsContract input);

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        Task<List<PortfolioTrackerPortfolioStatsContract>> GetPortfolioStatsAsync(GetPortfolioTrackerPortfoliosStatsContract input);

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        List<PortfolioTrackerPortfolioStatsContract> GetTotalPortfolioStats(GetPortfolioTrackerTotalPortfoliosStatsContract input);

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        Task<List<PortfolioTrackerPortfolioStatsContract>> GetTotalPortfolioStatsAsync(GetPortfolioTrackerTotalPortfoliosStatsContract input);
    }

    public partial interface IPortfolioTrackerPortfoliosClient : IPortfolioTrackerPortfoliosClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfolioTrackerPortfoliosClient, IPortfolioTrackerPortfoliosClientForUser, IPortfolioTrackerPortfoliosClientForOrganization>
    {
    }

    public interface IPortfolioTrackerPortfoliosClientForUser : IPortfolioTrackerPortfoliosClientByContextKeyApiMethods, IClientByContext<IPortfolioTrackerPortfoliosClientForUser, IPortfolioTrackerPortfoliosClientForOrganization>
    {
    }

    public interface IPortfolioTrackerPortfoliosClientForOrganization : IPortfolioTrackerPortfoliosClientByOrganizationApiMethods
    {
    }

    public partial class PortfolioTrackerPortfoliosClient : BaseClient<IPortfolioTrackerPortfoliosClient, IPortfolioTrackerPortfoliosClientForUser, IPortfolioTrackerPortfoliosClientForOrganization, PortfolioTrackerPortfoliosClient>, IPortfolioTrackerPortfoliosClient, IPortfolioTrackerPortfoliosClientForUser, IPortfolioTrackerPortfoliosClientForOrganization
    {
        /// <summary>
        /// Create new portfolio.
        /// </summary>
        /// <param name="portfolio">Create portfolio contract.</param>
        /// <returns>The method returns information about the newly created portfolio.</returns>
        public PortfolioTrackerPortfolioContract CreatePortfolio(CreatePortfolioTrackerPortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolio);

            return PerformRequest<PortfolioTrackerPortfolioContract>(request);
        }

        /// <summary>
        /// Create new portfolio.
        /// </summary>
        /// <param name="portfolio">Create portfolio contract.</param>
        /// <returns>The method returns information about the newly created portfolio.</returns>
        public async Task<PortfolioTrackerPortfolioContract> CreatePortfolioAsync(CreatePortfolioTrackerPortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolio);

            return await PerformRequestAsync<PortfolioTrackerPortfolioContract>(request);
        }

        /// <summary>
        /// Get list of portfolios available for current organization.
        /// </summary>
        /// <returns>Returns portfolios that match specified parameters.</returns>
        public List<PortfolioTrackerPortfolioContract> GetOrganizationPortfolios()
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioTrackerPortfolioContract>>(request);
        }

        /// <summary>
        /// Get list of portfolios available for current organization.
        /// </summary>
        /// <returns>Returns portfolios that match specified parameters.</returns>
        public async Task<List<PortfolioTrackerPortfolioContract>> GetOrganizationPortfoliosAsync()
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioTrackerPortfolioContract>>(request);
        }

        /// <summary>
        /// Get list of portfolios available for organization.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <returns>Returns portfolios that match specified parameters.</returns>
        public List<PortfolioTrackerPortfolioContract> GetOrganizationPortfolios(PortfolioTrackerOrganizations organizationId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/organization/{organizationId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioTrackerPortfolioContract>>(request);
        }

        /// <summary>
        /// Get list of portfolios available for organization.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <returns>Returns portfolios that match specified parameters.</returns>
        public async Task<List<PortfolioTrackerPortfolioContract>> GetOrganizationPortfoliosAsync(PortfolioTrackerOrganizations organizationId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/organization/{organizationId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioTrackerPortfolioContract>>(request);
        }

        /// <summary>
        /// Get portfolio by portfolio ID.
        /// If portfolio is delisted (soft-deleted), it won't be returned by ID.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID</param>
        /// <returns>Corresponding portfolio.</returns>
        public PortfolioTrackerPortfolioContract GetPortfolio(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PortfolioTrackerPortfolioContract>(request);
        }

        /// <summary>
        /// Get portfolio by portfolio ID.
        /// If portfolio is delisted (soft-deleted), it won't be returned by ID.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID</param>
        /// <returns>Corresponding portfolio.</returns>
        public async Task<PortfolioTrackerPortfolioContract> GetPortfolioAsync(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PortfolioTrackerPortfolioContract>(request);
        }

        public List<PortfolioTrackerPortfolioContract> GetPortfolios(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<List<PortfolioTrackerPortfolioContract>>(request);
        }

        public async Task<List<PortfolioTrackerPortfolioContract>> GetPortfoliosAsync(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<List<PortfolioTrackerPortfolioContract>>(request);
        }

        /// <summary>
        /// Edit portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to edit</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns the edited portfolio.</returns>
        public PortfolioTrackerPortfolioContract EditPortfolio(int portfolioId, EditPortfolioTrackerPortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/edit/{portfolioId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(portfolio);

            return PerformRequest<PortfolioTrackerPortfolioContract>(request);
        }

        /// <summary>
        /// Edit portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to edit</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns the edited portfolio.</returns>
        public async Task<PortfolioTrackerPortfolioContract> EditPortfolioAsync(int portfolioId, EditPortfolioTrackerPortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/edit/{portfolioId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(portfolio);

            return await PerformRequestAsync<PortfolioTrackerPortfolioContract>(request);
        }

        /// <summary>
        /// Delete portfolios by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete portfolios.</param>
        /// <returns>The method returns HTTP status code 200 if all portfolios were successfully deleted.</returns>
        public void DeletePortfolios(DeletePortfolioTrackerPortfoliosContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/delete",
                Method = HttpMethod.Delete,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Delete portfolios by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete portfolios.</param>
        /// <returns>The method returns HTTP status code 200 if all portfolios were successfully deleted.</returns>
        public async Task DeletePortfoliosAsync(DeletePortfolioTrackerPortfoliosContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios/delete",
                Method = HttpMethod.Delete,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        public List<PortfolioTrackerPortfolioStatsContract> GetPortfolioStats(GetPortfolioTrackerPortfoliosStatsContract input)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios-stats/get",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<List<PortfolioTrackerPortfolioStatsContract>>(request);
        }

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        public async Task<List<PortfolioTrackerPortfolioStatsContract>> GetPortfolioStatsAsync(GetPortfolioTrackerPortfoliosStatsContract input)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios-stats/get",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<List<PortfolioTrackerPortfolioStatsContract>>(request);
        }

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <param name="input">Parameters to get portfolio statistics.</param>
        /// <returns>List of portfolio statistic values</returns>
        public List<PortfolioTrackerPortfolioStatsContract> GetPortfolioStats(PortfolioTrackerOrganizations organizationId, GetPortfolioTrackerPortfoliosStatsContract input)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios-stats/get-by-organization/{organizationId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<List<PortfolioTrackerPortfolioStatsContract>>(request);
        }

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <param name="input">Parameters to get portfolio statistics.</param>
        /// <returns>List of portfolio statistic values</returns>
        public async Task<List<PortfolioTrackerPortfolioStatsContract>> GetPortfolioStatsAsync(PortfolioTrackerOrganizations organizationId, GetPortfolioTrackerPortfoliosStatsContract input)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios-stats/get-by-organization/{organizationId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<List<PortfolioTrackerPortfolioStatsContract>>(request);
        }

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        public List<PortfolioTrackerPortfolioStatsContract> GetTotalPortfolioStats(GetPortfolioTrackerTotalPortfoliosStatsContract input)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios-stats/get-total",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<List<PortfolioTrackerPortfolioStatsContract>>(request);
        }

        /// <summary>
        /// Get list of portfolio statistic values.
        /// </summary>
        /// <param name="input">Parameters to get portfolio statistics</param>
        /// <returns>List of portfolio statistic values</returns>
        public async Task<List<PortfolioTrackerPortfolioStatsContract>> GetTotalPortfolioStatsAsync(GetPortfolioTrackerTotalPortfoliosStatsContract input)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolios-stats/get-total",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<List<PortfolioTrackerPortfolioStatsContract>>(request);
        }
    }

    public interface IPortfolioTrackerPositionsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get grid data to show active Portfolio Tracker Positions. Pass Portfolio Ids in the request payload in the array.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <param name="contract">Parameters to get positions grid data.</param>
        /// <returns>The method return contract with positions data.</returns>
        PortfolioTrackerPositionsGridDataContract GetPositionsGridData(PortfolioTrackerOrganizations organizationId, GetPortfolioTrackerPositionsGridDataContract contract);

        /// <summary>
        /// Get grid data to show active Portfolio Tracker Positions. Pass Portfolio Ids in the request payload in the array.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <param name="contract">Parameters to get positions grid data.</param>
        /// <returns>The method return contract with positions data.</returns>
        Task<PortfolioTrackerPositionsGridDataContract> GetPositionsGridDataAsync(PortfolioTrackerOrganizations organizationId, GetPortfolioTrackerPositionsGridDataContract contract);
    }

    public interface IPortfolioTrackerPositionsClientByContextKeyApiMethods : IPortfolioTrackerPositionsClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerPositionsClientByOrganizationApiMethods
    {
        List<PortfolioTrackerPositionContract> CreatePositions(List<CreatePortfolioTrackerPositionContract> contracts);

        Task<List<PortfolioTrackerPositionContract>> CreatePositionsAsync(List<CreatePortfolioTrackerPositionContract> contracts);

        /// <summary>
        /// Get list of positions.
        /// </summary>
        /// <param name="contract">Parameters to get positions.</param>
        /// <returns>Returns positions that match specified parameters.</returns>
        List<PortfolioTrackerPositionContract> GetPositions(GetPortfolioTrackerPositionsContract contract);

        /// <summary>
        /// Get list of positions.
        /// </summary>
        /// <param name="contract">Parameters to get positions.</param>
        /// <returns>Returns positions that match specified parameters.</returns>
        Task<List<PortfolioTrackerPositionContract>> GetPositionsAsync(GetPortfolioTrackerPositionsContract contract);

        /// <summary>
        /// Get the position by id.
        /// </summary>
        /// <param name="positionId">Position Id</param>
        /// <returns>Returns the position contract for the requested position.</returns>
        PortfolioTrackerPositionContract GetPosition(int positionId);

        /// <summary>
        /// Get the position by id.
        /// </summary>
        /// <param name="positionId">Position Id</param>
        /// <returns>Returns the position contract for the requested position.</returns>
        Task<PortfolioTrackerPositionContract> GetPositionAsync(int positionId);

        /// <summary>
        /// Edit position. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="positionId">Position Id to edit</param>
        /// <param name="position">Values to edit.</param>
        /// <returns>The method returns the edited position.</returns>
        PortfolioTrackerPositionContract EditPosition(int positionId, EditPortfolioTrackerPositionContract position);

        /// <summary>
        /// Edit position. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="positionId">Position Id to edit</param>
        /// <param name="position">Values to edit.</param>
        /// <returns>The method returns the edited position.</returns>
        Task<PortfolioTrackerPositionContract> EditPositionAsync(int positionId, EditPortfolioTrackerPositionContract position);

        /// <summary>
        /// Delete positions by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete positions.</param>
        /// <returns>The method returns HTTP status code 200 if all positions were successfully deleted.</returns>
        void DeletePositions(DeletePortfolioTrackerPositionsContract contract);

        /// <summary>
        /// Delete positions by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete positions.</param>
        /// <returns>The method returns HTTP status code 200 if all positions were successfully deleted.</returns>
        Task DeletePositionsAsync(DeletePortfolioTrackerPositionsContract contract);

        /// <summary>
        /// Get grid data to show active Portfolio Tracker Positions. Pass Portfolio Ids in the request payload in the array.
        /// </summary>
        /// <param name="contract">Parameters to get positions grid data.</param>
        /// <returns>The method return contract with positions data.</returns>
        PortfolioTrackerPositionsGridDataContract GetPositionsGridData(GetPortfolioTrackerPositionsGridDataContract contract);

        /// <summary>
        /// Get grid data to show active Portfolio Tracker Positions. Pass Portfolio Ids in the request payload in the array.
        /// </summary>
        /// <param name="contract">Parameters to get positions grid data.</param>
        /// <returns>The method return contract with positions data.</returns>
        Task<PortfolioTrackerPositionsGridDataContract> GetPositionsGridDataAsync(GetPortfolioTrackerPositionsGridDataContract contract);

        /// <summary>
        /// Get positions statistics by the Ids of the position.
        /// </summary>
        /// <param name="contract">Parameters to get statistics.</param>
        /// <returns>The method returns list of requested statistics.</returns>
        List<PortfolioTrackerPositionStatsContract> GetPositionsStats(GetPortfolioTrackerPositionsStatsContract contract);

        /// <summary>
        /// Get positions statistics by the Ids of the position.
        /// </summary>
        /// <param name="contract">Parameters to get statistics.</param>
        /// <returns>The method returns list of requested statistics.</returns>
        Task<List<PortfolioTrackerPositionStatsContract>> GetPositionsStatsAsync(GetPortfolioTrackerPositionsStatsContract contract);
    }

    public partial interface IPortfolioTrackerPositionsClient : IPortfolioTrackerPositionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfolioTrackerPositionsClient, IPortfolioTrackerPositionsClientForUser, IPortfolioTrackerPositionsClientForOrganization>
    {
    }

    public interface IPortfolioTrackerPositionsClientForUser : IPortfolioTrackerPositionsClientByContextKeyApiMethods, IClientByContext<IPortfolioTrackerPositionsClientForUser, IPortfolioTrackerPositionsClientForOrganization>
    {
    }

    public interface IPortfolioTrackerPositionsClientForOrganization : IPortfolioTrackerPositionsClientByOrganizationApiMethods
    {
    }

    public partial class PortfolioTrackerPositionsClient : BaseClient<IPortfolioTrackerPositionsClient, IPortfolioTrackerPositionsClientForUser, IPortfolioTrackerPositionsClientForOrganization, PortfolioTrackerPositionsClient>, IPortfolioTrackerPositionsClient, IPortfolioTrackerPositionsClientForUser, IPortfolioTrackerPositionsClientForOrganization
    {
        public List<PortfolioTrackerPositionContract> CreatePositions(List<CreatePortfolioTrackerPositionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return PerformRequest<List<PortfolioTrackerPositionContract>>(request);
        }

        public async Task<List<PortfolioTrackerPositionContract>> CreatePositionsAsync(List<CreatePortfolioTrackerPositionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return await PerformRequestAsync<List<PortfolioTrackerPositionContract>>(request);
        }

        /// <summary>
        /// Get list of positions.
        /// </summary>
        /// <param name="contract">Parameters to get positions.</param>
        /// <returns>Returns positions that match specified parameters.</returns>
        public List<PortfolioTrackerPositionContract> GetPositions(GetPortfolioTrackerPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/get",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PortfolioTrackerPositionContract>>(request);
        }

        /// <summary>
        /// Get list of positions.
        /// </summary>
        /// <param name="contract">Parameters to get positions.</param>
        /// <returns>Returns positions that match specified parameters.</returns>
        public async Task<List<PortfolioTrackerPositionContract>> GetPositionsAsync(GetPortfolioTrackerPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/get",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PortfolioTrackerPositionContract>>(request);
        }

        /// <summary>
        /// Get the position by id.
        /// </summary>
        /// <param name="positionId">Position Id</param>
        /// <returns>Returns the position contract for the requested position.</returns>
        public PortfolioTrackerPositionContract GetPosition(int positionId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PortfolioTrackerPositionContract>(request);
        }

        /// <summary>
        /// Get the position by id.
        /// </summary>
        /// <param name="positionId">Position Id</param>
        /// <returns>Returns the position contract for the requested position.</returns>
        public async Task<PortfolioTrackerPositionContract> GetPositionAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PortfolioTrackerPositionContract>(request);
        }

        /// <summary>
        /// Edit position. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="positionId">Position Id to edit</param>
        /// <param name="position">Values to edit.</param>
        /// <returns>The method returns the edited position.</returns>
        public PortfolioTrackerPositionContract EditPosition(int positionId, EditPortfolioTrackerPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/edit/{positionId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(position);

            return PerformRequest<PortfolioTrackerPositionContract>(request);
        }

        /// <summary>
        /// Edit position. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="positionId">Position Id to edit</param>
        /// <param name="position">Values to edit.</param>
        /// <returns>The method returns the edited position.</returns>
        public async Task<PortfolioTrackerPositionContract> EditPositionAsync(int positionId, EditPortfolioTrackerPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/edit/{positionId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(position);

            return await PerformRequestAsync<PortfolioTrackerPositionContract>(request);
        }

        /// <summary>
        /// Delete positions by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete positions.</param>
        /// <returns>The method returns HTTP status code 200 if all positions were successfully deleted.</returns>
        public void DeletePositions(DeletePortfolioTrackerPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/delete",
                Method = HttpMethod.Delete,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Delete positions by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete positions.</param>
        /// <returns>The method returns HTTP status code 200 if all positions were successfully deleted.</returns>
        public async Task DeletePositionsAsync(DeletePortfolioTrackerPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/delete",
                Method = HttpMethod.Delete,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get grid data to show active Portfolio Tracker Positions. Pass Portfolio Ids in the request payload in the array.
        /// </summary>
        /// <param name="contract">Parameters to get positions grid data.</param>
        /// <returns>The method return contract with positions data.</returns>
        public PortfolioTrackerPositionsGridDataContract GetPositionsGridData(GetPortfolioTrackerPositionsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/active-positions-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PortfolioTrackerPositionsGridDataContract>(request);
        }

        /// <summary>
        /// Get grid data to show active Portfolio Tracker Positions. Pass Portfolio Ids in the request payload in the array.
        /// </summary>
        /// <param name="contract">Parameters to get positions grid data.</param>
        /// <returns>The method return contract with positions data.</returns>
        public async Task<PortfolioTrackerPositionsGridDataContract> GetPositionsGridDataAsync(GetPortfolioTrackerPositionsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/active-positions-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PortfolioTrackerPositionsGridDataContract>(request);
        }

        /// <summary>
        /// Get grid data to show active Portfolio Tracker Positions. Pass Portfolio Ids in the request payload in the array.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <param name="contract">Parameters to get positions grid data.</param>
        /// <returns>The method return contract with positions data.</returns>
        public PortfolioTrackerPositionsGridDataContract GetPositionsGridData(PortfolioTrackerOrganizations organizationId, GetPortfolioTrackerPositionsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/organization/{organizationId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PortfolioTrackerPositionsGridDataContract>(request);
        }

        /// <summary>
        /// Get grid data to show active Portfolio Tracker Positions. Pass Portfolio Ids in the request payload in the array.
        /// </summary>
        /// <param name="organizationId">Organization ID.</param>
        /// <param name="contract">Parameters to get positions grid data.</param>
        /// <returns>The method return contract with positions data.</returns>
        public async Task<PortfolioTrackerPositionsGridDataContract> GetPositionsGridDataAsync(PortfolioTrackerOrganizations organizationId, GetPortfolioTrackerPositionsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions/organization/{organizationId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PortfolioTrackerPositionsGridDataContract>(request);
        }

        /// <summary>
        /// Get positions statistics by the Ids of the position.
        /// </summary>
        /// <param name="contract">Parameters to get statistics.</param>
        /// <returns>The method returns list of requested statistics.</returns>
        public List<PortfolioTrackerPositionStatsContract> GetPositionsStats(GetPortfolioTrackerPositionsStatsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions-stats/get",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PortfolioTrackerPositionStatsContract>>(request);
        }

        /// <summary>
        /// Get positions statistics by the Ids of the position.
        /// </summary>
        /// <param name="contract">Parameters to get statistics.</param>
        /// <returns>The method returns list of requested statistics.</returns>
        public async Task<List<PortfolioTrackerPositionStatsContract>> GetPositionsStatsAsync(GetPortfolioTrackerPositionsStatsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/positions-stats/get",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PortfolioTrackerPositionStatsContract>>(request);
        }
    }

    public interface IPortfolioTrackerResearchClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerResearchClientByContextKeyApiMethods : IPortfolioTrackerResearchClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerResearchClientByOrganizationApiMethods
    {
        SsiDistributionContract GetSsiDistributionByPortfolioIds(List<int> portfolioIds);

        Task<SsiDistributionContract> GetSsiDistributionByPortfolioIdsAsync(List<int> portfolioIds);

        /// <summary>
        /// Get the portfolio VQ allocation for the requested portfolios.
        /// </summary>
        /// <param name="contract">Contract to get VQ allocation by portfolio.</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        VqAllocationContract GetVqAllocation(GetVqAllocationByPortfolioContract contract);

        /// <summary>
        /// Get the portfolio VQ allocation for the requested portfolios.
        /// </summary>
        /// <param name="contract">Contract to get VQ allocation by portfolio.</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        Task<VqAllocationContract> GetVqAllocationAsync(GetVqAllocationByPortfolioContract contract);

        AssetAllocationContract GetAssetAllocation(List<int> portfolioIds);

        Task<AssetAllocationContract> GetAssetAllocationAsync(List<int> portfolioIds);
    }

    public partial interface IPortfolioTrackerResearchClient : IPortfolioTrackerResearchClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfolioTrackerResearchClient, IPortfolioTrackerResearchClientForUser, IPortfolioTrackerResearchClientForOrganization>
    {
    }

    public interface IPortfolioTrackerResearchClientForUser : IPortfolioTrackerResearchClientByContextKeyApiMethods, IClientByContext<IPortfolioTrackerResearchClientForUser, IPortfolioTrackerResearchClientForOrganization>
    {
    }

    public interface IPortfolioTrackerResearchClientForOrganization : IPortfolioTrackerResearchClientByOrganizationApiMethods
    {
    }

    public partial class PortfolioTrackerResearchClient : BaseClient<IPortfolioTrackerResearchClient, IPortfolioTrackerResearchClientForUser, IPortfolioTrackerResearchClientForOrganization, PortfolioTrackerResearchClient>, IPortfolioTrackerResearchClient, IPortfolioTrackerResearchClientForUser, IPortfolioTrackerResearchClientForOrganization
    {
        public SsiDistributionContract GetSsiDistributionByPortfolioIds(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/ssi-distribution/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<SsiDistributionContract>(request);
        }

        public async Task<SsiDistributionContract> GetSsiDistributionByPortfolioIdsAsync(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/ssi-distribution/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<SsiDistributionContract>(request);
        }

        /// <summary>
        /// Get the portfolio VQ allocation for the requested portfolios.
        /// </summary>
        /// <param name="contract">Contract to get VQ allocation by portfolio.</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        public VqAllocationContract GetVqAllocation(GetVqAllocationByPortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/vq-analyzer/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<VqAllocationContract>(request);
        }

        /// <summary>
        /// Get the portfolio VQ allocation for the requested portfolios.
        /// </summary>
        /// <param name="contract">Contract to get VQ allocation by portfolio.</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        public async Task<VqAllocationContract> GetVqAllocationAsync(GetVqAllocationByPortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/vq-analyzer/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<VqAllocationContract>(request);
        }

        public AssetAllocationContract GetAssetAllocation(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/asset-allocation/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<AssetAllocationContract>(request);
        }

        public async Task<AssetAllocationContract> GetAssetAllocationAsync(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/asset-allocation/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<AssetAllocationContract>(request);
        }
    }

    public interface IPortfolioTrackerTransactionsClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerTransactionsClientByContextKeyApiMethods : IPortfolioTrackerTransactionsClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerTransactionsClientByOrganizationApiMethods
    {
        List<PortfolioTrackerTransactionContract> AddTransactionsToSubtrade(int subtradeId, List<CreatePortfolioTrackerTransactionContract> contracts);

        Task<List<PortfolioTrackerTransactionContract>> AddTransactionsToSubtradeAsync(int subtradeId, List<CreatePortfolioTrackerTransactionContract> contracts);

        /// <summary>
        /// Get list of transactions.
        /// </summary>
        /// <param name="contract">Parameters to get transactions.</param>
        /// <returns>Returns transactions that match specified parameters.</returns>
        List<PortfolioTrackerTransactionContract> GetTransactions(GetPortfolioTrackerTransactionsContract contract);

        /// <summary>
        /// Get list of transactions.
        /// </summary>
        /// <param name="contract">Parameters to get transactions.</param>
        /// <returns>Returns transactions that match specified parameters.</returns>
        Task<List<PortfolioTrackerTransactionContract>> GetTransactionsAsync(GetPortfolioTrackerTransactionsContract contract);

        /// <summary>
        /// Delete transactions by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete transactions.</param>
        /// <returns>The method returns HTTP status code 200 if all transactions were successfully deleted.</returns>
        void DeleteTransactions(DeletePortfolioTrackerTransactionsContract contract);

        /// <summary>
        /// Delete transactions by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete transactions.</param>
        /// <returns>The method returns HTTP status code 200 if all transactions were successfully deleted.</returns>
        Task DeleteTransactionsAsync(DeletePortfolioTrackerTransactionsContract contract);

        List<PortfolioTrackerTransactionContract> ReplaceSubtradeTransactions(int subtradeId, List<ReplacePortfolioTrackerTransactionContract> transactions);

        Task<List<PortfolioTrackerTransactionContract>> ReplaceSubtradeTransactionsAsync(int subtradeId, List<ReplacePortfolioTrackerTransactionContract> transactions);
    }

    public partial interface IPortfolioTrackerTransactionsClient : IPortfolioTrackerTransactionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfolioTrackerTransactionsClient, IPortfolioTrackerTransactionsClientForUser, IPortfolioTrackerTransactionsClientForOrganization>
    {
    }

    public interface IPortfolioTrackerTransactionsClientForUser : IPortfolioTrackerTransactionsClientByContextKeyApiMethods, IClientByContext<IPortfolioTrackerTransactionsClientForUser, IPortfolioTrackerTransactionsClientForOrganization>
    {
    }

    public interface IPortfolioTrackerTransactionsClientForOrganization : IPortfolioTrackerTransactionsClientByOrganizationApiMethods
    {
    }

    public partial class PortfolioTrackerTransactionsClient : BaseClient<IPortfolioTrackerTransactionsClient, IPortfolioTrackerTransactionsClientForUser, IPortfolioTrackerTransactionsClientForOrganization, PortfolioTrackerTransactionsClient>, IPortfolioTrackerTransactionsClient, IPortfolioTrackerTransactionsClientForUser, IPortfolioTrackerTransactionsClientForOrganization
    {
        public List<PortfolioTrackerTransactionContract> AddTransactionsToSubtrade(int subtradeId, List<CreatePortfolioTrackerTransactionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/transactions/create/{subtradeId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return PerformRequest<List<PortfolioTrackerTransactionContract>>(request);
        }

        public async Task<List<PortfolioTrackerTransactionContract>> AddTransactionsToSubtradeAsync(int subtradeId, List<CreatePortfolioTrackerTransactionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/transactions/create/{subtradeId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return await PerformRequestAsync<List<PortfolioTrackerTransactionContract>>(request);
        }

        /// <summary>
        /// Get list of transactions.
        /// </summary>
        /// <param name="contract">Parameters to get transactions.</param>
        /// <returns>Returns transactions that match specified parameters.</returns>
        public List<PortfolioTrackerTransactionContract> GetTransactions(GetPortfolioTrackerTransactionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/transactions/get",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PortfolioTrackerTransactionContract>>(request);
        }

        /// <summary>
        /// Get list of transactions.
        /// </summary>
        /// <param name="contract">Parameters to get transactions.</param>
        /// <returns>Returns transactions that match specified parameters.</returns>
        public async Task<List<PortfolioTrackerTransactionContract>> GetTransactionsAsync(GetPortfolioTrackerTransactionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/transactions/get",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PortfolioTrackerTransactionContract>>(request);
        }

        /// <summary>
        /// Delete transactions by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete transactions.</param>
        /// <returns>The method returns HTTP status code 200 if all transactions were successfully deleted.</returns>
        public void DeleteTransactions(DeletePortfolioTrackerTransactionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/transactions/delete",
                Method = HttpMethod.Delete,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Delete transactions by Ids.
        /// </summary>
        /// <param name="contract">Parameters to delete transactions.</param>
        /// <returns>The method returns HTTP status code 200 if all transactions were successfully deleted.</returns>
        public async Task DeleteTransactionsAsync(DeletePortfolioTrackerTransactionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/transactions/delete",
                Method = HttpMethod.Delete,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public List<PortfolioTrackerTransactionContract> ReplaceSubtradeTransactions(int subtradeId, List<ReplacePortfolioTrackerTransactionContract> transactions)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/transactions/replace/{subtradeId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(transactions);

            return PerformRequest<List<PortfolioTrackerTransactionContract>>(request);
        }

        public async Task<List<PortfolioTrackerTransactionContract>> ReplaceSubtradeTransactionsAsync(int subtradeId, List<ReplacePortfolioTrackerTransactionContract> transactions)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/transactions/replace/{subtradeId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(transactions);

            return await PerformRequestAsync<List<PortfolioTrackerTransactionContract>>(request);
        }
    }

    public interface IPortfolioTrackerViewsClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerViewsClientByContextKeyApiMethods : IPortfolioTrackerViewsClientByLicenseKeyApiMethods
    {
    }

    public interface IPortfolioTrackerViewsClientByOrganizationApiMethods
    {
        /// <summary>
        /// Get all created views for the current organization.
        /// </summary>
        /// <returns>The method returns an array of all created views for the current organizations.</returns>
        List<OrganizationViewContract> GetOrganizationViews();

        /// <summary>
        /// Get all created views for the current organization.
        /// </summary>
        /// <returns>The method returns an array of all created views for the current organizations.</returns>
        Task<List<OrganizationViewContract>> GetOrganizationViewsAsync();

        /// <summary>
        /// The method creates a new organization view.
        /// </summary>
        /// <param name="contract">Contract to create new view.</param>
        /// <returns>The method returns the created organization view.</returns>
        OrganizationViewContract CreateOrganizationView(CreateOrganizationViewContract contract);

        /// <summary>
        /// The method creates a new organization view.
        /// </summary>
        /// <param name="contract">Contract to create new view.</param>
        /// <returns>The method returns the created organization view.</returns>
        Task<OrganizationViewContract> CreateOrganizationViewAsync(CreateOrganizationViewContract contract);

        /// <summary>
        /// The method edits columns of the selected organization view.
        /// </summary>
        /// <param name="organizationViewId">Organization view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited organization view.</returns>
        OrganizationViewContract EditOrganizationView(int organizationViewId, EditOrganizationViewContract contract);

        /// <summary>
        /// The method edits columns of the selected organization view.
        /// </summary>
        /// <param name="organizationViewId">Organization view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited organization view.</returns>
        Task<OrganizationViewContract> EditOrganizationViewAsync(int organizationViewId, EditOrganizationViewContract contract);

        /// <summary>
        /// The method deletes the selected view of the current organization.
        /// </summary>
        /// <param name="organizationViewId">Organization view ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        void DeleteOrganizationView(int organizationViewId);

        /// <summary>
        /// The method deletes the selected view of the current organization.
        /// </summary>
        /// <param name="organizationViewId">Organization view ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        Task DeleteOrganizationViewAsync(int organizationViewId);

        /// <summary>
        /// Get the list of view columns by view ID.
        /// </summary>
        /// <param name="organizationViewId">View ID.</param>
        /// <returns>The method returns an array containing  the available columns for the selected organization view.</returns>
        List<OrganizationViewColumnContract> GetOrganizationViewColumns(int organizationViewId);

        /// <summary>
        /// Get the list of view columns by view ID.
        /// </summary>
        /// <param name="organizationViewId">View ID.</param>
        /// <returns>The method returns an array containing  the available columns for the selected organization view.</returns>
        Task<List<OrganizationViewColumnContract>> GetOrganizationViewColumnsAsync(int organizationViewId);

        void ReplaceOrganizationViewColumns(int organizationViewId, List<CreateOrganizationViewColumnContract> columns);

        Task ReplaceOrganizationViewColumnsAsync(int organizationViewId, List<CreateOrganizationViewColumnContract> columns);

        /// <summary>
        /// Edit organization view column.
        /// Main usage is to set column width.
        /// </summary>
        /// <param name="organizationViewId">View ID.</param>
        /// <param name="columnType">Column type that identifies specific column in corresponding view.</param>
        /// <param name="contract">Parameters to edit organization view column.</param>
        /// <returns>Updated view column information.</returns>
        OrganizationViewColumnContract EditOrganizationViewColumn(int organizationViewId, ViewColumnTypes columnType, EditOrganizationViewColumnContract contract);

        /// <summary>
        /// Edit organization view column.
        /// Main usage is to set column width.
        /// </summary>
        /// <param name="organizationViewId">View ID.</param>
        /// <param name="columnType">Column type that identifies specific column in corresponding view.</param>
        /// <param name="contract">Parameters to edit organization view column.</param>
        /// <returns>Updated view column information.</returns>
        Task<OrganizationViewColumnContract> EditOrganizationViewColumnAsync(int organizationViewId, ViewColumnTypes columnType, EditOrganizationViewColumnContract contract);
    }

    public partial interface IPortfolioTrackerViewsClient : IPortfolioTrackerViewsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPortfolioTrackerViewsClient, IPortfolioTrackerViewsClientForUser, IPortfolioTrackerViewsClientForOrganization>
    {
    }

    public interface IPortfolioTrackerViewsClientForUser : IPortfolioTrackerViewsClientByContextKeyApiMethods, IClientByContext<IPortfolioTrackerViewsClientForUser, IPortfolioTrackerViewsClientForOrganization>
    {
    }

    public interface IPortfolioTrackerViewsClientForOrganization : IPortfolioTrackerViewsClientByOrganizationApiMethods
    {
    }

    public partial class PortfolioTrackerViewsClient : BaseClient<IPortfolioTrackerViewsClient, IPortfolioTrackerViewsClientForUser, IPortfolioTrackerViewsClientForOrganization, PortfolioTrackerViewsClient>, IPortfolioTrackerViewsClient, IPortfolioTrackerViewsClientForUser, IPortfolioTrackerViewsClientForOrganization
    {
        /// <summary>
        /// Get all created views for the current organization.
        /// </summary>
        /// <returns>The method returns an array of all created views for the current organizations.</returns>
        public List<OrganizationViewContract> GetOrganizationViews()
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<OrganizationViewContract>>(request);
        }

        /// <summary>
        /// Get all created views for the current organization.
        /// </summary>
        /// <returns>The method returns an array of all created views for the current organizations.</returns>
        public async Task<List<OrganizationViewContract>> GetOrganizationViewsAsync()
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<OrganizationViewContract>>(request);
        }

        /// <summary>
        /// The method creates a new organization view.
        /// </summary>
        /// <param name="contract">Contract to create new view.</param>
        /// <returns>The method returns the created organization view.</returns>
        public OrganizationViewContract CreateOrganizationView(CreateOrganizationViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<OrganizationViewContract>(request);
        }

        /// <summary>
        /// The method creates a new organization view.
        /// </summary>
        /// <param name="contract">Contract to create new view.</param>
        /// <returns>The method returns the created organization view.</returns>
        public async Task<OrganizationViewContract> CreateOrganizationViewAsync(CreateOrganizationViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<OrganizationViewContract>(request);
        }

        /// <summary>
        /// The method edits columns of the selected organization view.
        /// </summary>
        /// <param name="organizationViewId">Organization view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited organization view.</returns>
        public OrganizationViewContract EditOrganizationView(int organizationViewId, EditOrganizationViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views/{organizationViewId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<OrganizationViewContract>(request);
        }

        /// <summary>
        /// The method edits columns of the selected organization view.
        /// </summary>
        /// <param name="organizationViewId">Organization view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited organization view.</returns>
        public async Task<OrganizationViewContract> EditOrganizationViewAsync(int organizationViewId, EditOrganizationViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views/{organizationViewId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<OrganizationViewContract>(request);
        }

        /// <summary>
        /// The method deletes the selected view of the current organization.
        /// </summary>
        /// <param name="organizationViewId">Organization view ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        public void DeleteOrganizationView(int organizationViewId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views/{organizationViewId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// The method deletes the selected view of the current organization.
        /// </summary>
        /// <param name="organizationViewId">Organization view ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        public async Task DeleteOrganizationViewAsync(int organizationViewId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views/{organizationViewId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get the list of view columns by view ID.
        /// </summary>
        /// <param name="organizationViewId">View ID.</param>
        /// <returns>The method returns an array containing  the available columns for the selected organization view.</returns>
        public List<OrganizationViewColumnContract> GetOrganizationViewColumns(int organizationViewId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views/{organizationViewId}/columns/",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<OrganizationViewColumnContract>>(request);
        }

        /// <summary>
        /// Get the list of view columns by view ID.
        /// </summary>
        /// <param name="organizationViewId">View ID.</param>
        /// <returns>The method returns an array containing  the available columns for the selected organization view.</returns>
        public async Task<List<OrganizationViewColumnContract>> GetOrganizationViewColumnsAsync(int organizationViewId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views/{organizationViewId}/columns/",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<OrganizationViewColumnContract>>(request);
        }

        public void ReplaceOrganizationViewColumns(int organizationViewId, List<CreateOrganizationViewColumnContract> columns)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views/{organizationViewId}/columns",
                Method = HttpMethod.Put,
            };

            request.SetBody(columns);

            PerformRequest(request);
        }

        public async Task ReplaceOrganizationViewColumnsAsync(int organizationViewId, List<CreateOrganizationViewColumnContract> columns)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views/{organizationViewId}/columns",
                Method = HttpMethod.Put,
            };

            request.SetBody(columns);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Edit organization view column.
        /// Main usage is to set column width.
        /// </summary>
        /// <param name="organizationViewId">View ID.</param>
        /// <param name="columnType">Column type that identifies specific column in corresponding view.</param>
        /// <param name="contract">Parameters to edit organization view column.</param>
        /// <returns>Updated view column information.</returns>
        public OrganizationViewColumnContract EditOrganizationViewColumn(int organizationViewId, ViewColumnTypes columnType, EditOrganizationViewColumnContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views/{organizationViewId}/columns/{columnType}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<OrganizationViewColumnContract>(request);
        }

        /// <summary>
        /// Edit organization view column.
        /// Main usage is to set column width.
        /// </summary>
        /// <param name="organizationViewId">View ID.</param>
        /// <param name="columnType">Column type that identifies specific column in corresponding view.</param>
        /// <param name="contract">Parameters to edit organization view column.</param>
        /// <returns>Updated view column information.</returns>
        public async Task<OrganizationViewColumnContract> EditOrganizationViewColumnAsync(int organizationViewId, ViewColumnTypes columnType, EditOrganizationViewColumnContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/organization-views/{organizationViewId}/columns/{columnType}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<OrganizationViewColumnContract>(request);
        }
    }

    public interface IPositionsClientByLicenseKeyApiMethods
    {
    }

    public interface IPositionsClientByContextKeyApiMethods : IPositionsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the position by its ID.
        /// </summary>
        /// <param name="positionId">Position ID</param>
        /// <returns>The method returns the position contract for the requested position.</returns>
        PositionContract GetPosition(int positionId);

        /// <summary>
        /// Get the position by its ID.
        /// </summary>
        /// <param name="positionId">Position ID</param>
        /// <returns>The method returns the position contract for the requested position.</returns>
        Task<PositionContract> GetPositionAsync(int positionId);

        /// <summary>
        /// Get User's positions by portfolio IDs or other parameters
        /// </summary>
        /// <param name="contract">(optional) Parameters to load user's positions</param>
        /// <returns>List of positions by corresponding parameters</returns>
        List<PositionContract> GetUserPositions(GetUserPositionsContract contract);

        /// <summary>
        /// Get User's positions by portfolio IDs or other parameters
        /// </summary>
        /// <param name="contract">(optional) Parameters to load user's positions</param>
        /// <returns>List of positions by corresponding parameters</returns>
        Task<List<PositionContract>> GetUserPositionsAsync(GetUserPositionsContract contract);

        /// <summary>
        /// Get positions by the portfolio ID. Use the parameter includeDelisted to include the soft-deleted positions to the list as well.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <param name="includeDelisted">Include the soft-deleted positions to the list.</param>
        /// <returns>The method returns all the positions from the portfolio.</returns>
        List<PositionContract> GetPortfolioPositions(int portfolioId, bool includeDelisted);

        /// <summary>
        /// Get positions by the portfolio ID. Use the parameter includeDelisted to include the soft-deleted positions to the list as well.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <param name="includeDelisted">Include the soft-deleted positions to the list.</param>
        /// <returns>The method returns all the positions from the portfolio.</returns>
        Task<List<PositionContract>> GetPortfolioPositionsAsync(int portfolioId, bool includeDelisted);

        /// <summary>
        /// Edit position. Position ID in edit position contract should be always specified.
        /// If you edit the position purchase price or position shares, you have to provide adjustment types for each of these values.
        /// IgnoreDividend property affects the position purchase price in calculations, alerts and price displaying.
        /// </summary>
        /// <param name="position">Edit position contract.</param>
        /// <returns>The method returns contract for updated position.</returns>
        PositionContract EditPosition(EditPositionContract position);

        /// <summary>
        /// Edit position. Position ID in edit position contract should be always specified.
        /// If you edit the position purchase price or position shares, you have to provide adjustment types for each of these values.
        /// IgnoreDividend property affects the position purchase price in calculations, alerts and price displaying.
        /// </summary>
        /// <param name="position">Edit position contract.</param>
        /// <returns>The method returns contract for updated position.</returns>
        Task<PositionContract> EditPositionAsync(EditPositionContract position);

        List<PositionContract> EditPositions(List<EditPositionContract> positions);

        Task<List<PositionContract>> EditPositionsAsync(List<EditPositionContract> positions);

        /// <summary>
        /// Create a manual position. Such positions can be created only in a manual portfolio.
        /// </summary>
        /// <param name="position">Create position contract.</param>
        /// <returns>Created position contract.</returns>
        PositionContract CreatePosition(CreatePositionContract position);

        /// <summary>
        /// Create a manual position. Such positions can be created only in a manual portfolio.
        /// </summary>
        /// <param name="position">Create position contract.</param>
        /// <returns>Created position contract.</returns>
        Task<PositionContract> CreatePositionAsync(CreatePositionContract position);

        List<PositionContract> CreatePositions(List<CreatePositionContract> positions);

        Task<List<PositionContract>> CreatePositionsAsync(List<CreatePositionContract> positions);

        /// <summary>
        /// Get position stats by the ID of the position.
        /// </summary>
        /// <param name="positionId">Position ID</param>
        /// <returns>The method returns the requested position stats.</returns>
        PositionStatsContract GetPositionStats(int positionId);

        /// <summary>
        /// Get position stats by the ID of the position.
        /// </summary>
        /// <param name="positionId">Position ID</param>
        /// <returns>The method returns the requested position stats.</returns>
        Task<PositionStatsContract> GetPositionStatsAsync(int positionId);

        /// <summary>
        /// Get list of selected portfolios' positions for corresponding TopStatisticsType.
        /// </summary>
        /// <param name="contract">Top positions contract.</param>
        /// <returns>The method returns list of selected portfolios' positions for corresponding TopStatisticsType.</returns>
        List<PositionContract> GetTopPositions(GetTopPositionsContract contract);

        /// <summary>
        /// Get list of selected portfolios' positions for corresponding TopStatisticsType.
        /// </summary>
        /// <param name="contract">Top positions contract.</param>
        /// <returns>The method returns list of selected portfolios' positions for corresponding TopStatisticsType.</returns>
        Task<List<PositionContract>> GetTopPositionsAsync(GetTopPositionsContract contract);

        PositionsGridDataContract GetPositionsGridData(List<int> portfolioIds);

        Task<PositionsGridDataContract> GetPositionsGridDataAsync(List<int> portfolioIds);

        /// <summary>
        /// Get grid data to show closed Positions.
        /// </summary>
        /// <param name="contract">Closed positions grid data contract.</param>
        /// <returns>The method returns the contract with closed, unconfirmed Positions and total Portfolio values.</returns>
        PositionsGridDataContract GetClosedPositionsGridData(GetClosedPositionsGridDataContract contract);

        /// <summary>
        /// Get grid data to show closed Positions.
        /// </summary>
        /// <param name="contract">Closed positions grid data contract.</param>
        /// <returns>The method returns the contract with closed, unconfirmed Positions and total Portfolio values.</returns>
        Task<PositionsGridDataContract> GetClosedPositionsGridDataAsync(GetClosedPositionsGridDataContract contract);

        /// <summary>
        /// Get data for opened active positions. Positions will be filtered by provided filters.
        /// </summary>
        /// <param name="contract">Parameters to get positions.</param>
        /// <returns>The method return contract with opened active, unconfirmed Positions and total Portfolio values.</returns>
        PositionsGridDataContract GetFilteredPositionsGridData(GetFilteredPositionsGridDataContract contract);

        /// <summary>
        /// Get data for opened active positions. Positions will be filtered by provided filters.
        /// </summary>
        /// <param name="contract">Parameters to get positions.</param>
        /// <returns>The method return contract with opened active, unconfirmed Positions and total Portfolio values.</returns>
        Task<PositionsGridDataContract> GetFilteredPositionsGridDataAsync(GetFilteredPositionsGridDataContract contract);

        /// <summary>
        /// Copy selected positions to another one user portfolio.
        /// </summary>
        /// <param name="contract">Copy positions parameters</param>
        /// <returns>The method returns all copied positions.</returns>
        List<PositionContract> CopyPositions(CopyPositionsContract contract);

        /// <summary>
        /// Copy selected positions to another one user portfolio.
        /// </summary>
        /// <param name="contract">Copy positions parameters</param>
        /// <returns>The method returns all copied positions.</returns>
        Task<List<PositionContract>> CopyPositionsAsync(CopyPositionsContract contract);

        /// <summary>
        /// Close already created position with provided Close Date, Close Price, Close Fee and Shares properties.
        /// If you want to close a position partially please number value of shares less than the original one.
        /// If the number of shares is not specified or is equal to the number of the position shares, the entire position will be closed.
        /// </summary>
        /// <param name="contract">Close position contract.</param>
        /// <returns>The method returns contract for closed position result.</returns>
        ClosePositionResultContract ClosePosition(ClosePositionContract contract);

        /// <summary>
        /// Close already created position with provided Close Date, Close Price, Close Fee and Shares properties.
        /// If you want to close a position partially please number value of shares less than the original one.
        /// If the number of shares is not specified or is equal to the number of the position shares, the entire position will be closed.
        /// </summary>
        /// <param name="contract">Close position contract.</param>
        /// <returns>The method returns contract for closed position result.</returns>
        Task<ClosePositionResultContract> ClosePositionAsync(ClosePositionContract contract);

        List<ClosePositionResultContract> ClosePositions(List<ClosePositionContract> contracts);

        Task<List<ClosePositionResultContract>> ClosePositionsAsync(List<ClosePositionContract> contracts);

        void DeletePositionsByIds(List<int> positionIds);

        Task DeletePositionsByIdsAsync(List<int> positionIds);

        List<PositionContract> GetPositionsByIds(List<int> positionIds);

        Task<List<PositionContract>> GetPositionsByIdsAsync(List<int> positionIds);

        void MovePositions(List<int> positionIds, int toPortfolioId);

        Task MovePositionsAsync(List<int> positionIds, int toPortfolioId);

        /// <summary>
        /// Combine two positions
        /// </summary>
        /// <param name="contract">Information about positions to combine.</param>
        void CombinePositions(CombinePositionsContract contract);

        /// <summary>
        /// Combine two positions
        /// </summary>
        /// <param name="contract">Information about positions to combine.</param>
        Task CombinePositionsAsync(CombinePositionsContract contract);
    }

    public interface IPositionsClientByOrganizationApiMethods
    {
    }

    public partial interface IPositionsClient : IPositionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPositionsClient, IPositionsClientForUser, IPositionsClientForOrganization>
    {
    }

    public interface IPositionsClientForUser : IPositionsClientByContextKeyApiMethods, IClientByContext<IPositionsClientForUser, IPositionsClientForOrganization>
    {
    }

    public interface IPositionsClientForOrganization : IPositionsClientByOrganizationApiMethods
    {
    }

    public partial class PositionsClient : BaseClient<IPositionsClient, IPositionsClientForUser, IPositionsClientForOrganization, PositionsClient>, IPositionsClient, IPositionsClientForUser, IPositionsClientForOrganization
    {
        /// <summary>
        /// Get the position by its ID.
        /// </summary>
        /// <param name="positionId">Position ID</param>
        /// <returns>The method returns the position contract for the requested position.</returns>
        public PositionContract GetPosition(int positionId)
        {
            var request = new RequestData
            {
                Url = $"positions/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PositionContract>(request);
        }

        /// <summary>
        /// Get the position by its ID.
        /// </summary>
        /// <param name="positionId">Position ID</param>
        /// <returns>The method returns the position contract for the requested position.</returns>
        public async Task<PositionContract> GetPositionAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"positions/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PositionContract>(request);
        }

        /// <summary>
        /// Get User's positions by portfolio IDs or other parameters
        /// </summary>
        /// <param name="contract">(optional) Parameters to load user's positions</param>
        /// <returns>List of positions by corresponding parameters</returns>
        public List<PositionContract> GetUserPositions(GetUserPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/get-by-user-portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PositionContract>>(request);
        }

        /// <summary>
        /// Get User's positions by portfolio IDs or other parameters
        /// </summary>
        /// <param name="contract">(optional) Parameters to load user's positions</param>
        /// <returns>List of positions by corresponding parameters</returns>
        public async Task<List<PositionContract>> GetUserPositionsAsync(GetUserPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/get-by-user-portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        /// <summary>
        /// Get positions by the portfolio ID. Use the parameter includeDelisted to include the soft-deleted positions to the list as well.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <param name="includeDelisted">Include the soft-deleted positions to the list.</param>
        /// <returns>The method returns all the positions from the portfolio.</returns>
        public List<PositionContract> GetPortfolioPositions(int portfolioId, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"positions/portfolio/{portfolioId}/includeDelisted/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PositionContract>>(request);
        }

        /// <summary>
        /// Get positions by the portfolio ID. Use the parameter includeDelisted to include the soft-deleted positions to the list as well.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID.</param>
        /// <param name="includeDelisted">Include the soft-deleted positions to the list.</param>
        /// <returns>The method returns all the positions from the portfolio.</returns>
        public async Task<List<PositionContract>> GetPortfolioPositionsAsync(int portfolioId, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"positions/portfolio/{portfolioId}/includeDelisted/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        /// <summary>
        /// Edit position. Position ID in edit position contract should be always specified.
        /// If you edit the position purchase price or position shares, you have to provide adjustment types for each of these values.
        /// IgnoreDividend property affects the position purchase price in calculations, alerts and price displaying.
        /// </summary>
        /// <param name="position">Edit position contract.</param>
        /// <returns>The method returns contract for updated position.</returns>
        public PositionContract EditPosition(EditPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"positions/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(position);

            return PerformRequest<PositionContract>(request);
        }

        /// <summary>
        /// Edit position. Position ID in edit position contract should be always specified.
        /// If you edit the position purchase price or position shares, you have to provide adjustment types for each of these values.
        /// IgnoreDividend property affects the position purchase price in calculations, alerts and price displaying.
        /// </summary>
        /// <param name="position">Edit position contract.</param>
        /// <returns>The method returns contract for updated position.</returns>
        public async Task<PositionContract> EditPositionAsync(EditPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"positions/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(position);

            return await PerformRequestAsync<PositionContract>(request);
        }

        public List<PositionContract> EditPositions(List<EditPositionContract> positions)
        {
            var request = new RequestData
            {
                Url = $"positions/bulk-edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(positions);

            return PerformRequest<List<PositionContract>>(request);
        }

        public async Task<List<PositionContract>> EditPositionsAsync(List<EditPositionContract> positions)
        {
            var request = new RequestData
            {
                Url = $"positions/bulk-edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(positions);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        /// <summary>
        /// Create a manual position. Such positions can be created only in a manual portfolio.
        /// </summary>
        /// <param name="position">Create position contract.</param>
        /// <returns>Created position contract.</returns>
        public PositionContract CreatePosition(CreatePositionContract position)
        {
            var request = new RequestData
            {
                Url = $"positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(position);

            return PerformRequest<PositionContract>(request);
        }

        /// <summary>
        /// Create a manual position. Such positions can be created only in a manual portfolio.
        /// </summary>
        /// <param name="position">Create position contract.</param>
        /// <returns>Created position contract.</returns>
        public async Task<PositionContract> CreatePositionAsync(CreatePositionContract position)
        {
            var request = new RequestData
            {
                Url = $"positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(position);

            return await PerformRequestAsync<PositionContract>(request);
        }

        public List<PositionContract> CreatePositions(List<CreatePositionContract> positions)
        {
            var request = new RequestData
            {
                Url = $"positions/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(positions);

            return PerformRequest<List<PositionContract>>(request);
        }

        public async Task<List<PositionContract>> CreatePositionsAsync(List<CreatePositionContract> positions)
        {
            var request = new RequestData
            {
                Url = $"positions/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(positions);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        /// <summary>
        /// Get position stats by the ID of the position.
        /// </summary>
        /// <param name="positionId">Position ID</param>
        /// <returns>The method returns the requested position stats.</returns>
        public PositionStatsContract GetPositionStats(int positionId)
        {
            var request = new RequestData
            {
                Url = $"positions/stats/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PositionStatsContract>(request);
        }

        /// <summary>
        /// Get position stats by the ID of the position.
        /// </summary>
        /// <param name="positionId">Position ID</param>
        /// <returns>The method returns the requested position stats.</returns>
        public async Task<PositionStatsContract> GetPositionStatsAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"positions/stats/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PositionStatsContract>(request);
        }

        /// <summary>
        /// Get list of selected portfolios' positions for corresponding TopStatisticsType.
        /// </summary>
        /// <param name="contract">Top positions contract.</param>
        /// <returns>The method returns list of selected portfolios' positions for corresponding TopStatisticsType.</returns>
        public List<PositionContract> GetTopPositions(GetTopPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/get-top-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PositionContract>>(request);
        }

        /// <summary>
        /// Get list of selected portfolios' positions for corresponding TopStatisticsType.
        /// </summary>
        /// <param name="contract">Top positions contract.</param>
        /// <returns>The method returns list of selected portfolios' positions for corresponding TopStatisticsType.</returns>
        public async Task<List<PositionContract>> GetTopPositionsAsync(GetTopPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/get-top-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        public PositionsGridDataContract GetPositionsGridData(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"positions/opened-positions-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<PositionsGridDataContract>(request);
        }

        public async Task<PositionsGridDataContract> GetPositionsGridDataAsync(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"positions/opened-positions-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<PositionsGridDataContract>(request);
        }

        /// <summary>
        /// Get grid data to show closed Positions.
        /// </summary>
        /// <param name="contract">Closed positions grid data contract.</param>
        /// <returns>The method returns the contract with closed, unconfirmed Positions and total Portfolio values.</returns>
        public PositionsGridDataContract GetClosedPositionsGridData(GetClosedPositionsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/closed-positions-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PositionsGridDataContract>(request);
        }

        /// <summary>
        /// Get grid data to show closed Positions.
        /// </summary>
        /// <param name="contract">Closed positions grid data contract.</param>
        /// <returns>The method returns the contract with closed, unconfirmed Positions and total Portfolio values.</returns>
        public async Task<PositionsGridDataContract> GetClosedPositionsGridDataAsync(GetClosedPositionsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/closed-positions-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PositionsGridDataContract>(request);
        }

        /// <summary>
        /// Get data for opened active positions. Positions will be filtered by provided filters.
        /// </summary>
        /// <param name="contract">Parameters to get positions.</param>
        /// <returns>The method return contract with opened active, unconfirmed Positions and total Portfolio values.</returns>
        public PositionsGridDataContract GetFilteredPositionsGridData(GetFilteredPositionsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/filtered-opened-positions-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PositionsGridDataContract>(request);
        }

        /// <summary>
        /// Get data for opened active positions. Positions will be filtered by provided filters.
        /// </summary>
        /// <param name="contract">Parameters to get positions.</param>
        /// <returns>The method return contract with opened active, unconfirmed Positions and total Portfolio values.</returns>
        public async Task<PositionsGridDataContract> GetFilteredPositionsGridDataAsync(GetFilteredPositionsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/filtered-opened-positions-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PositionsGridDataContract>(request);
        }

        /// <summary>
        /// Copy selected positions to another one user portfolio.
        /// </summary>
        /// <param name="contract">Copy positions parameters</param>
        /// <returns>The method returns all copied positions.</returns>
        public List<PositionContract> CopyPositions(CopyPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/copy",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PositionContract>>(request);
        }

        /// <summary>
        /// Copy selected positions to another one user portfolio.
        /// </summary>
        /// <param name="contract">Copy positions parameters</param>
        /// <returns>The method returns all copied positions.</returns>
        public async Task<List<PositionContract>> CopyPositionsAsync(CopyPositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/copy",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        /// <summary>
        /// Close already created position with provided Close Date, Close Price, Close Fee and Shares properties.
        /// If you want to close a position partially please number value of shares less than the original one.
        /// If the number of shares is not specified or is equal to the number of the position shares, the entire position will be closed.
        /// </summary>
        /// <param name="contract">Close position contract.</param>
        /// <returns>The method returns contract for closed position result.</returns>
        public ClosePositionResultContract ClosePosition(ClosePositionContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/close",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<ClosePositionResultContract>(request);
        }

        /// <summary>
        /// Close already created position with provided Close Date, Close Price, Close Fee and Shares properties.
        /// If you want to close a position partially please number value of shares less than the original one.
        /// If the number of shares is not specified or is equal to the number of the position shares, the entire position will be closed.
        /// </summary>
        /// <param name="contract">Close position contract.</param>
        /// <returns>The method returns contract for closed position result.</returns>
        public async Task<ClosePositionResultContract> ClosePositionAsync(ClosePositionContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/close",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<ClosePositionResultContract>(request);
        }

        public List<ClosePositionResultContract> ClosePositions(List<ClosePositionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"positions/bulk-close",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return PerformRequest<List<ClosePositionResultContract>>(request);
        }

        public async Task<List<ClosePositionResultContract>> ClosePositionsAsync(List<ClosePositionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"positions/bulk-close",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return await PerformRequestAsync<List<ClosePositionResultContract>>(request);
        }

        public void DeletePositionsByIds(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"positions/by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(positionIds);

            PerformRequest(request);
        }

        public async Task DeletePositionsByIdsAsync(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"positions/by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(positionIds);

            await PerformRequestAsync(request);
        }

        public List<PositionContract> GetPositionsByIds(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"positions/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return PerformRequest<List<PositionContract>>(request);
        }

        public async Task<List<PositionContract>> GetPositionsByIdsAsync(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"positions/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        public void MovePositions(List<int> positionIds, int toPortfolioId)
        {
            var request = new RequestData
            {
                Url = $"positions/move/{toPortfolioId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            PerformRequest(request);
        }

        public async Task MovePositionsAsync(List<int> positionIds, int toPortfolioId)
        {
            var request = new RequestData
            {
                Url = $"positions/move/{toPortfolioId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Combine two positions
        /// </summary>
        /// <param name="contract">Information about positions to combine.</param>
        public void CombinePositions(CombinePositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/combine",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Combine two positions
        /// </summary>
        /// <param name="contract">Information about positions to combine.</param>
        public async Task CombinePositionsAsync(CombinePositionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"positions/combine",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }
    }

    public interface IPositionTriggersClientByLicenseKeyApiMethods
    {
        TriggerTypeContract GetTriggerType(int triggerTypeId);

        Task<TriggerTypeContract> GetTriggerTypeAsync(int triggerTypeId);
    }

    public interface IPositionTriggersClientByContextKeyApiMethods : IPositionTriggersClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get grid data for show Position Triggers.
        /// </summary>
        /// <param name="contract">Grid data contract.</param>
        /// <returns>The method returns contract with Position Triggers and total Portfolio values.</returns>
        AlertsGridDataContract GetAlertsGridData(GetAlertsGridDataContract contract);

        /// <summary>
        /// Get grid data for show Position Triggers.
        /// </summary>
        /// <param name="contract">Grid data contract.</param>
        /// <returns>The method returns contract with Position Triggers and total Portfolio values.</returns>
        Task<AlertsGridDataContract> GetAlertsGridDataAsync(GetAlertsGridDataContract contract);

        /// <summary>
        /// Get a Position Trigger by its ID.
        /// </summary>
        /// <param name="positionTriggerId">Position Trigger ID</param>
        /// <returns>The method returns the Position Trigger contract by the requested ID.</returns>
        PositionTriggerContract GetPositionTrigger(int positionTriggerId);

        /// <summary>
        /// Get a Position Trigger by its ID.
        /// </summary>
        /// <param name="positionTriggerId">Position Trigger ID</param>
        /// <returns>The method returns the Position Trigger contract by the requested ID.</returns>
        Task<PositionTriggerContract> GetPositionTriggerAsync(int positionTriggerId);

        List<PositionTriggerContract> GetPositionTriggers(List<int> positionTriggerIds);

        Task<List<PositionTriggerContract>> GetPositionTriggersAsync(List<int> positionTriggerIds);

        /// <summary>
        /// Get an array of active Position Triggers created for the requested position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of Position Trigger contracts by the requested position ID.</returns>
        List<PositionTriggerContract> GetPositionTriggersByPosition(int positionId);

        /// <summary>
        /// Get an array of active Position Triggers created for the requested position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of Position Trigger contracts by the requested position ID.</returns>
        Task<List<PositionTriggerContract>> GetPositionTriggersByPositionAsync(int positionId);

        List<PositionTriggerContract> GetPositionTriggersByPositionIds(List<int> positionIds);

        Task<List<PositionTriggerContract>> GetPositionTriggersByPositionIdsAsync(List<int> positionIds);

        void DeletePositionTriggers(List<int> triggerIds);

        Task DeletePositionTriggersAsync(List<int> triggerIds);

        /// <summary>
        /// DeletePositionTriggersByPosition
        /// </summary>
        /// <param name="positionId">ID of the position for Position Triggers deletion.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the Position Triggers.</returns>
        void DeletePositionTriggersByPosition(int positionId);

        /// <summary>
        /// DeletePositionTriggersByPosition
        /// </summary>
        /// <param name="positionId">ID of the position for Position Triggers deletion.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the Position Triggers.</returns>
        Task DeletePositionTriggersByPositionAsync(int positionId);

        /// <summary>
        /// Edit a specific Position Trigger by the Position Trigger ID and input parameters.
        /// </summary>
        /// <param name="positionTriggerId">ID of the Position Trigger to edit.</param>
        /// <param name="contract">Position trigger values to edit.</param>
        /// <returns>Edited position trigger contract.</returns>
        PositionTriggerContract EditPositionTrigger(int positionTriggerId, EditPositionTriggerContract contract);

        /// <summary>
        /// Edit a specific Position Trigger by the Position Trigger ID and input parameters.
        /// </summary>
        /// <param name="positionTriggerId">ID of the Position Trigger to edit.</param>
        /// <param name="contract">Position trigger values to edit.</param>
        /// <returns>Edited position trigger contract.</returns>
        Task<PositionTriggerContract> EditPositionTriggerAsync(int positionTriggerId, EditPositionTriggerContract contract);

        /// <summary>
        /// Update Start Date and Start Price for alerts from the same position values. You can use this method to update Position Triggers when you edit those values for positions.
        /// Position Triggers that depend on Start Date and Start Price are the following:
        /// TrailingStopsPercentTrigger ;
        /// VolatilityQuotinentTrigger ;
        /// UnStockVolatilityQuotinentTrigger;
        /// UnStockTrailingStopsPercentTrigger .
        /// </summary>
        /// <param name="positionId">Position Id.</param>
        /// <returns>The method returns trigger contract for TrailingStopsPercentTrigger , VolatilityQuotinentTrigger , UnStockVolatilityQuotinentTrigger, UnStockTrailingStopsPercentTrigger .</returns>
        List<PositionTriggerContract> UpdateStartDateAndPriceFromPosition(int positionId);

        /// <summary>
        /// Update Start Date and Start Price for alerts from the same position values. You can use this method to update Position Triggers when you edit those values for positions.
        /// Position Triggers that depend on Start Date and Start Price are the following:
        /// TrailingStopsPercentTrigger ;
        /// VolatilityQuotinentTrigger ;
        /// UnStockVolatilityQuotinentTrigger;
        /// UnStockTrailingStopsPercentTrigger .
        /// </summary>
        /// <param name="positionId">Position Id.</param>
        /// <returns>The method returns trigger contract for TrailingStopsPercentTrigger , VolatilityQuotinentTrigger , UnStockVolatilityQuotinentTrigger, UnStockTrailingStopsPercentTrigger .</returns>
        Task<List<PositionTriggerContract>> UpdateStartDateAndPriceFromPositionAsync(int positionId);

        Dictionary<int,List<PositionTriggerContract>> UpdateStartDateAndPriceFromPositions(List<int> positionIds);

        Task<Dictionary<int,List<PositionTriggerContract>>> UpdateStartDateAndPriceFromPositionsAsync(List<int> positionIds);

        /// <summary>
        /// Get the number of active Position Triggers for the current user.
        /// </summary>
        /// <returns>The method returns the number (int type) of active Position Triggers for the user.</returns>
        int GetCurrentAlertsCount();

        /// <summary>
        /// Get the number of active Position Triggers for the current user.
        /// </summary>
        /// <returns>The method returns the number (int type) of active Position Triggers for the user.</returns>
        Task<int> GetCurrentAlertsCountAsync();

        /// <summary>
        /// Get the number of Position Triggers that the current user can create.
        /// </summary>
        /// <returns>The method returns the number (int type) of Position Triggers that the current user can create.</returns>
        int GetAvailableAlertsCount();

        /// <summary>
        /// Get the number of Position Triggers that the current user can create.
        /// </summary>
        /// <returns>The method returns the number (int type) of Position Triggers that the current user can create.</returns>
        Task<int> GetAvailableAlertsCountAsync();

        /// <summary>
        /// Create a specific Position Trigger based on the requested parameters.
        /// </summary>
        /// <param name="positionId">Position ID for creating a Position Trigger.</param>
        /// <param name="contract">Position trigger contract to create a trigger.</param>
        /// <returns>Method returns contract for newly created position trigger.</returns>
        PositionTriggerContract CreatePositionTrigger(int positionId, TriggerFieldsContract contract);

        /// <summary>
        /// Create a specific Position Trigger based on the requested parameters.
        /// </summary>
        /// <param name="positionId">Position ID for creating a Position Trigger.</param>
        /// <param name="contract">Position trigger contract to create a trigger.</param>
        /// <returns>Method returns contract for newly created position trigger.</returns>
        Task<PositionTriggerContract> CreatePositionTriggerAsync(int positionId, TriggerFieldsContract contract);

        BulkCreatePositionTriggersResultContract BulkCreatePositionTriggers(List<BulkCreatePositionTriggerContract> contracts);

        Task<BulkCreatePositionTriggersResultContract> BulkCreatePositionTriggersAsync(List<BulkCreatePositionTriggerContract> contracts);

        /// <summary>
        /// Bulk-create single Trigger for multiple positions.
        /// </summary>
        /// <param name="contract">Contract to create a specific trigger for the list of position IDs.</param>
        /// <returns>Method returns contract for newly created position triggers.</returns>
        BulkCreatePositionTriggersResultContract CreatePositionTriggers(BulkCreatePositionTriggersContract contract);

        /// <summary>
        /// Bulk-create single Trigger for multiple positions.
        /// </summary>
        /// <param name="contract">Contract to create a specific trigger for the list of position IDs.</param>
        /// <returns>Method returns contract for newly created position triggers.</returns>
        Task<BulkCreatePositionTriggersResultContract> CreatePositionTriggersAsync(BulkCreatePositionTriggersContract contract);
    }

    public interface IPositionTriggersClientByOrganizationApiMethods
    {
    }

    public partial interface IPositionTriggersClient : IPositionTriggersClientByLicenseKeyApiMethods, IClientByLicenseKey<IPositionTriggersClient, IPositionTriggersClientForUser, IPositionTriggersClientForOrganization>
    {
    }

    public interface IPositionTriggersClientForUser : IPositionTriggersClientByContextKeyApiMethods, IClientByContext<IPositionTriggersClientForUser, IPositionTriggersClientForOrganization>
    {
    }

    public interface IPositionTriggersClientForOrganization : IPositionTriggersClientByOrganizationApiMethods
    {
    }

    public partial class PositionTriggersClient : BaseClient<IPositionTriggersClient, IPositionTriggersClientForUser, IPositionTriggersClientForOrganization, PositionTriggersClient>, IPositionTriggersClient, IPositionTriggersClientForUser, IPositionTriggersClientForOrganization
    {
        /// <summary>
        /// Get grid data for show Position Triggers.
        /// </summary>
        /// <param name="contract">Grid data contract.</param>
        /// <returns>The method returns contract with Position Triggers and total Portfolio values.</returns>
        public AlertsGridDataContract GetAlertsGridData(GetAlertsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/alerts-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<AlertsGridDataContract>(request);
        }

        /// <summary>
        /// Get grid data for show Position Triggers.
        /// </summary>
        /// <param name="contract">Grid data contract.</param>
        /// <returns>The method returns contract with Position Triggers and total Portfolio values.</returns>
        public async Task<AlertsGridDataContract> GetAlertsGridDataAsync(GetAlertsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/alerts-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<AlertsGridDataContract>(request);
        }

        [Obsolete("Use TriggerTypes enum if possible")]
        public TriggerTypeContract GetTriggerType(int triggerTypeId)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/trigger-type/{triggerTypeId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<TriggerTypeContract>(request);
        }

        [Obsolete("Use TriggerTypes enum if possible")]
        public async Task<TriggerTypeContract> GetTriggerTypeAsync(int triggerTypeId)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/trigger-type/{triggerTypeId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<TriggerTypeContract>(request);
        }

        /// <summary>
        /// Get a Position Trigger by its ID.
        /// </summary>
        /// <param name="positionTriggerId">Position Trigger ID</param>
        /// <returns>The method returns the Position Trigger contract by the requested ID.</returns>
        public PositionTriggerContract GetPositionTrigger(int positionTriggerId)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/{positionTriggerId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PositionTriggerContract>(request);
        }

        /// <summary>
        /// Get a Position Trigger by its ID.
        /// </summary>
        /// <param name="positionTriggerId">Position Trigger ID</param>
        /// <returns>The method returns the Position Trigger contract by the requested ID.</returns>
        public async Task<PositionTriggerContract> GetPositionTriggerAsync(int positionTriggerId)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/{positionTriggerId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PositionTriggerContract>(request);
        }

        public List<PositionTriggerContract> GetPositionTriggers(List<int> positionTriggerIds)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionTriggerIds);

            return PerformRequest<List<PositionTriggerContract>>(request);
        }

        public async Task<List<PositionTriggerContract>> GetPositionTriggersAsync(List<int> positionTriggerIds)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionTriggerIds);

            return await PerformRequestAsync<List<PositionTriggerContract>>(request);
        }

        /// <summary>
        /// Get an array of active Position Triggers created for the requested position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of Position Trigger contracts by the requested position ID.</returns>
        public List<PositionTriggerContract> GetPositionTriggersByPosition(int positionId)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/position/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PositionTriggerContract>>(request);
        }

        /// <summary>
        /// Get an array of active Position Triggers created for the requested position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of Position Trigger contracts by the requested position ID.</returns>
        public async Task<List<PositionTriggerContract>> GetPositionTriggersByPositionAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/position/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PositionTriggerContract>>(request);
        }

        public List<PositionTriggerContract> GetPositionTriggersByPositionIds(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/by-position-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return PerformRequest<List<PositionTriggerContract>>(request);
        }

        public async Task<List<PositionTriggerContract>> GetPositionTriggersByPositionIdsAsync(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/by-position-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return await PerformRequestAsync<List<PositionTriggerContract>>(request);
        }

        public void DeletePositionTriggers(List<int> triggerIds)
        {
            var request = new RequestData
            {
                Url = $"position-triggers",
                Method = HttpMethod.Delete,
            };

            request.SetBody(triggerIds);

            PerformRequest(request);
        }

        public async Task DeletePositionTriggersAsync(List<int> triggerIds)
        {
            var request = new RequestData
            {
                Url = $"position-triggers",
                Method = HttpMethod.Delete,
            };

            request.SetBody(triggerIds);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// DeletePositionTriggersByPosition
        /// </summary>
        /// <param name="positionId">ID of the position for Position Triggers deletion.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the Position Triggers.</returns>
        public void DeletePositionTriggersByPosition(int positionId)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/position/{positionId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// DeletePositionTriggersByPosition
        /// </summary>
        /// <param name="positionId">ID of the position for Position Triggers deletion.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the Position Triggers.</returns>
        public async Task DeletePositionTriggersByPositionAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/position/{positionId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Edit a specific Position Trigger by the Position Trigger ID and input parameters.
        /// </summary>
        /// <param name="positionTriggerId">ID of the Position Trigger to edit.</param>
        /// <param name="contract">Position trigger values to edit.</param>
        /// <returns>Edited position trigger contract.</returns>
        public PositionTriggerContract EditPositionTrigger(int positionTriggerId, EditPositionTriggerContract contract)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/{positionTriggerId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PositionTriggerContract>(request);
        }

        /// <summary>
        /// Edit a specific Position Trigger by the Position Trigger ID and input parameters.
        /// </summary>
        /// <param name="positionTriggerId">ID of the Position Trigger to edit.</param>
        /// <param name="contract">Position trigger values to edit.</param>
        /// <returns>Edited position trigger contract.</returns>
        public async Task<PositionTriggerContract> EditPositionTriggerAsync(int positionTriggerId, EditPositionTriggerContract contract)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/{positionTriggerId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PositionTriggerContract>(request);
        }

        /// <summary>
        /// Update Start Date and Start Price for alerts from the same position values. You can use this method to update Position Triggers when you edit those values for positions.
        /// Position Triggers that depend on Start Date and Start Price are the following:
        /// TrailingStopsPercentTrigger ;
        /// VolatilityQuotinentTrigger ;
        /// UnStockVolatilityQuotinentTrigger;
        /// UnStockTrailingStopsPercentTrigger .
        /// </summary>
        /// <param name="positionId">Position Id.</param>
        /// <returns>The method returns trigger contract for TrailingStopsPercentTrigger , VolatilityQuotinentTrigger , UnStockVolatilityQuotinentTrigger, UnStockTrailingStopsPercentTrigger .</returns>
        public List<PositionTriggerContract> UpdateStartDateAndPriceFromPosition(int positionId)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/update-start-date-and-price-from-position/{positionId}",
                Method = HttpMethod.Put,
            };

            return PerformRequest<List<PositionTriggerContract>>(request);
        }

        /// <summary>
        /// Update Start Date and Start Price for alerts from the same position values. You can use this method to update Position Triggers when you edit those values for positions.
        /// Position Triggers that depend on Start Date and Start Price are the following:
        /// TrailingStopsPercentTrigger ;
        /// VolatilityQuotinentTrigger ;
        /// UnStockVolatilityQuotinentTrigger;
        /// UnStockTrailingStopsPercentTrigger .
        /// </summary>
        /// <param name="positionId">Position Id.</param>
        /// <returns>The method returns trigger contract for TrailingStopsPercentTrigger , VolatilityQuotinentTrigger , UnStockVolatilityQuotinentTrigger, UnStockTrailingStopsPercentTrigger .</returns>
        public async Task<List<PositionTriggerContract>> UpdateStartDateAndPriceFromPositionAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/update-start-date-and-price-from-position/{positionId}",
                Method = HttpMethod.Put,
            };

            return await PerformRequestAsync<List<PositionTriggerContract>>(request);
        }

        public Dictionary<int,List<PositionTriggerContract>> UpdateStartDateAndPriceFromPositions(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/update-start-date-and-price-from-positions",
                Method = HttpMethod.Put,
            };

            request.SetBody(positionIds);

            return PerformRequest<Dictionary<int,List<PositionTriggerContract>>>(request);
        }

        public async Task<Dictionary<int,List<PositionTriggerContract>>> UpdateStartDateAndPriceFromPositionsAsync(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/update-start-date-and-price-from-positions",
                Method = HttpMethod.Put,
            };

            request.SetBody(positionIds);

            return await PerformRequestAsync<Dictionary<int,List<PositionTriggerContract>>>(request);
        }

        /// <summary>
        /// Get the number of active Position Triggers for the current user.
        /// </summary>
        /// <returns>The method returns the number (int type) of active Position Triggers for the user.</returns>
        public int GetCurrentAlertsCount()
        {
            var request = new RequestData
            {
                Url = $"position-triggers/current-alerts-count",
                Method = HttpMethod.Get,
            };

            return PerformRequest<int>(request);
        }

        /// <summary>
        /// Get the number of active Position Triggers for the current user.
        /// </summary>
        /// <returns>The method returns the number (int type) of active Position Triggers for the user.</returns>
        public async Task<int> GetCurrentAlertsCountAsync()
        {
            var request = new RequestData
            {
                Url = $"position-triggers/current-alerts-count",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<int>(request);
        }

        /// <summary>
        /// Get the number of Position Triggers that the current user can create.
        /// </summary>
        /// <returns>The method returns the number (int type) of Position Triggers that the current user can create.</returns>
        public int GetAvailableAlertsCount()
        {
            var request = new RequestData
            {
                Url = $"position-triggers/available-alerts-count",
                Method = HttpMethod.Get,
            };

            return PerformRequest<int>(request);
        }

        /// <summary>
        /// Get the number of Position Triggers that the current user can create.
        /// </summary>
        /// <returns>The method returns the number (int type) of Position Triggers that the current user can create.</returns>
        public async Task<int> GetAvailableAlertsCountAsync()
        {
            var request = new RequestData
            {
                Url = $"position-triggers/available-alerts-count",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<int>(request);
        }

        /// <summary>
        /// Create a specific Position Trigger based on the requested parameters.
        /// </summary>
        /// <param name="positionId">Position ID for creating a Position Trigger.</param>
        /// <param name="contract">Position trigger contract to create a trigger.</param>
        /// <returns>Method returns contract for newly created position trigger.</returns>
        public PositionTriggerContract CreatePositionTrigger(int positionId, TriggerFieldsContract contract)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/position/{positionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PositionTriggerContract>(request);
        }

        /// <summary>
        /// Create a specific Position Trigger based on the requested parameters.
        /// </summary>
        /// <param name="positionId">Position ID for creating a Position Trigger.</param>
        /// <param name="contract">Position trigger contract to create a trigger.</param>
        /// <returns>Method returns contract for newly created position trigger.</returns>
        public async Task<PositionTriggerContract> CreatePositionTriggerAsync(int positionId, TriggerFieldsContract contract)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/position/{positionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PositionTriggerContract>(request);
        }

        public BulkCreatePositionTriggersResultContract BulkCreatePositionTriggers(List<BulkCreatePositionTriggerContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return PerformRequest<BulkCreatePositionTriggersResultContract>(request);
        }

        public async Task<BulkCreatePositionTriggersResultContract> BulkCreatePositionTriggersAsync(List<BulkCreatePositionTriggerContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return await PerformRequestAsync<BulkCreatePositionTriggersResultContract>(request);
        }

        /// <summary>
        /// Bulk-create single Trigger for multiple positions.
        /// </summary>
        /// <param name="contract">Contract to create a specific trigger for the list of position IDs.</param>
        /// <returns>Method returns contract for newly created position triggers.</returns>
        public BulkCreatePositionTriggersResultContract CreatePositionTriggers(BulkCreatePositionTriggersContract contract)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/position/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<BulkCreatePositionTriggersResultContract>(request);
        }

        /// <summary>
        /// Bulk-create single Trigger for multiple positions.
        /// </summary>
        /// <param name="contract">Contract to create a specific trigger for the list of position IDs.</param>
        /// <returns>Method returns contract for newly created position triggers.</returns>
        public async Task<BulkCreatePositionTriggersResultContract> CreatePositionTriggersAsync(BulkCreatePositionTriggersContract contract)
        {
            var request = new RequestData
            {
                Url = $"position-triggers/position/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<BulkCreatePositionTriggersResultContract>(request);
        }
    }

    public interface IPricesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the prices for the multiple symbols in specified time range.
        /// </summary>
        /// <param name="contract">Parameters to load prices</param>
        /// <returns>The method returns the symbol prices for requested SymbolID in specified time range.</returns>
        List<PriceContract> GetMultiplePrices(GetPricesContract contract);

        /// <summary>
        /// Get the prices for the multiple symbols in specified time range.
        /// </summary>
        /// <param name="contract">Parameters to load prices</param>
        /// <returns>The method returns the symbol prices for requested SymbolID in specified time range.</returns>
        Task<List<PriceContract>> GetMultiplePricesAsync(GetPricesContract contract);

        /// <summary>
        /// Get the close prices for the multiple symbols in specified time range.
        /// </summary>
        /// <param name="contract">Parameters to load close prices</param>
        /// <returns>The method returns the symbol close prices for requested SymbolID in specified time range.</returns>
        List<ClosePriceContract> GetMultipleClosePrices(GetPricesContract contract);

        /// <summary>
        /// Get the close prices for the multiple symbols in specified time range.
        /// </summary>
        /// <param name="contract">Parameters to load close prices</param>
        /// <returns>The method returns the symbol close prices for requested SymbolID in specified time range.</returns>
        Task<List<ClosePriceContract>> GetMultipleClosePricesAsync(GetPricesContract contract);

        /// <summary>
        /// Get the price for the symbol  in specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">FromDate (example: /2017-11-01 ).</param>
        /// <param name="toDate">To Date (example: /2017-11-01 ).</param>
        /// <returns>The method returns the symbol prices for requested SymbolID in specified time range.</returns>
        IList<PriceContract> GetPrices(int symbolId, DateTime fromDate, DateTime toDate);

        /// <summary>
        /// Get the price for the symbol  in specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">FromDate (example: /2017-11-01 ).</param>
        /// <param name="toDate">To Date (example: /2017-11-01 ).</param>
        /// <returns>The method returns the symbol prices for requested SymbolID in specified time range.</returns>
        Task<IList<PriceContract>> GetPricesAsync(int symbolId, DateTime fromDate, DateTime toDate);

        /// <summary>
        /// Get the price for the symbol on a specific trade date.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-11)</param>
        /// <returns>The method returns the price of the contract.</returns>
        PriceContract GetLatestPrice(int symbolId, DateTime tradeDate);

        /// <summary>
        /// Get the price for the symbol on a specific trade date.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-11)</param>
        /// <returns>The method returns the price of the contract.</returns>
        Task<PriceContract> GetLatestPriceAsync(int symbolId, DateTime tradeDate);

        List<PriceContract> GetLatestOrFirstPrices(List<int> symbolIds, DateTime tradeDate);

        Task<List<PriceContract>> GetLatestOrFirstPricesAsync(List<int> symbolIds, DateTime tradeDate);

        List<PriceContract> GetFirstPrices(List<int> symbolIds);

        Task<List<PriceContract>> GetFirstPricesAsync(List<int> symbolIds);

        List<PriceContract> GetLatestPrices(List<GetLatestPriceContract> getLatestPrices);

        Task<List<PriceContract>> GetLatestPricesAsync(List<GetLatestPriceContract> getLatestPrices);

        List<PriceContract> GetLatestPricesBySymbolIds(List<int> symbolIds);

        Task<List<PriceContract>> GetLatestPricesBySymbolIdsAsync(List<int> symbolIds);

        /// <summary>
        /// Get the intraday price for the symbol on a specific trade date.
        /// Currently the method is used only for a cryptocurrency on CryptoTradesmith project.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the Price Contract for the symbol by the requested Symbol ID.</returns>
        PriceContract GetLatestIntradayPrice(int symbolId);

        /// <summary>
        /// Get the intraday price for the symbol on a specific trade date.
        /// Currently the method is used only for a cryptocurrency on CryptoTradesmith project.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the Price Contract for the symbol by the requested Symbol ID.</returns>
        Task<PriceContract> GetLatestIntradayPriceAsync(int symbolId);

        /// <summary>
        /// Get the intraday prices for the symbol on a specific date range.
        /// </summary>
        /// <param name="getPricesContract">Get Intraday Prices Contract</param>
        /// <returns>The method returns the Price Contract for the symbol by the requested Symbol ID.</returns>
        List<IntradayTradeCloseContract> GetIntradayPrices(GetIntradayPricesContract getPricesContract);

        /// <summary>
        /// Get the intraday prices for the symbol on a specific date range.
        /// </summary>
        /// <param name="getPricesContract">Get Intraday Prices Contract</param>
        /// <returns>The method returns the Price Contract for the symbol by the requested Symbol ID.</returns>
        Task<List<IntradayTradeCloseContract>> GetIntradayPricesAsync(GetIntradayPricesContract getPricesContract);

        /// <summary>
        /// Get the first price for the symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the Price Contract for symbol first trading day in the system by the requested Symbol ID.</returns>
        PriceContract GetFirstPrice(int symbolId);

        /// <summary>
        /// Get the first price for the symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the Price Contract for symbol first trading day in the system by the requested Symbol ID.</returns>
        Task<PriceContract> GetFirstPriceAsync(int symbolId);

        /// <summary>
        /// Get maximum price of the requested symbol in time range.
        /// </summary>
        /// <param name="contract">Contract to get max price.</param>
        /// <returns>The method returns contract with the  maximum symbol price.</returns>
        PriceContract GetMaxPrice(GetExtremumPriceContract contract);

        /// <summary>
        /// Get maximum price of the requested symbol in time range.
        /// </summary>
        /// <param name="contract">Contract to get max price.</param>
        /// <returns>The method returns contract with the  maximum symbol price.</returns>
        Task<PriceContract> GetMaxPriceAsync(GetExtremumPriceContract contract);

        /// <summary>
        /// Get minimum price of the requested symbol in time range.
        /// </summary>
        /// <param name="contract">Contract to get min price.</param>
        /// <returns>The method returns contract with  the minimum symbol price.</returns>
        PriceContract GetMinPrice(GetExtremumPriceContract contract);

        /// <summary>
        /// Get minimum price of the requested symbol in time range.
        /// </summary>
        /// <param name="contract">Contract to get min price.</param>
        /// <returns>The method returns contract with  the minimum symbol price.</returns>
        Task<PriceContract> GetMinPriceAsync(GetExtremumPriceContract contract);

        /// <summary>
        /// Get price of the requested symbol by the date offset from the specified trading day
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">Base trade date (example: /2017-11-01 ).</param>
        /// <param name="tradingDaysOffset">Days offset for getting goal trade date.</param>
        /// <returns>The method returns contract with the symbol price on goal trade date.</returns>
        PriceContract GetPriceByTradingDaysOffset(int symbolId, DateTime fromDate, int tradingDaysOffset);

        /// <summary>
        /// Get price of the requested symbol by the date offset from the specified trading day
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">Base trade date (example: /2017-11-01 ).</param>
        /// <param name="tradingDaysOffset">Days offset for getting goal trade date.</param>
        /// <returns>The method returns contract with the symbol price on goal trade date.</returns>
        Task<PriceContract> GetPriceByTradingDaysOffsetAsync(int symbolId, DateTime fromDate, int tradingDaysOffset);

        Dictionary<int,Dictionary<DateTime,PriceContract>> GetLatestPricesDictionary(List<GetLatestPriceContract> getLatestPricesContract);

        Task<Dictionary<int,Dictionary<DateTime,PriceContract>>> GetLatestPricesDictionaryAsync(List<GetLatestPriceContract> getLatestPricesContract);

        /// <summary>
        /// Get predicted stock price.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Date of prediction.</param>
        /// <returns>The method returns contract with the symbol predicted price.</returns>
        StockPricePredictionContract GetStockPricePrediction(int symbolId, DateTime tradeDate);

        /// <summary>
        /// Get predicted stock price.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Date of prediction.</param>
        /// <returns>The method returns contract with the symbol predicted price.</returns>
        Task<StockPricePredictionContract> GetStockPricePredictionAsync(int symbolId, DateTime tradeDate);

        /// <summary>
        /// Get availability of intraday prices for a symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return availability of intraday prices for a symbol.</returns>
        bool IsIntradayPricesAvailable(int symbolId);

        /// <summary>
        /// Get availability of intraday prices for a symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return availability of intraday prices for a symbol.</returns>
        Task<bool> IsIntradayPricesAvailableAsync(int symbolId);
    }

    public interface IPricesClientByContextKeyApiMethods : IPricesClientByLicenseKeyApiMethods
    {
    }

    public interface IPricesClientByOrganizationApiMethods
    {
    }

    public partial interface IPricesClient : IPricesClientByLicenseKeyApiMethods, IClientByLicenseKey<IPricesClient, IPricesClientForUser, IPricesClientForOrganization>
    {
    }

    public interface IPricesClientForUser : IPricesClientByContextKeyApiMethods, IClientByContext<IPricesClientForUser, IPricesClientForOrganization>
    {
    }

    public interface IPricesClientForOrganization : IPricesClientByOrganizationApiMethods
    {
    }

    public partial class PricesClient : BaseClient<IPricesClient, IPricesClientForUser, IPricesClientForOrganization, PricesClient>, IPricesClient, IPricesClientForUser, IPricesClientForOrganization
    {
        /// <summary>
        /// Get the prices for the multiple symbols in specified time range.
        /// </summary>
        /// <param name="contract">Parameters to load prices</param>
        /// <returns>The method returns the symbol prices for requested SymbolID in specified time range.</returns>
        public List<PriceContract> GetMultiplePrices(GetPricesContract contract)
        {
            var request = new RequestData
            {
                Url = $"prices/get-multiple",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PriceContract>>(request);
        }

        /// <summary>
        /// Get the prices for the multiple symbols in specified time range.
        /// </summary>
        /// <param name="contract">Parameters to load prices</param>
        /// <returns>The method returns the symbol prices for requested SymbolID in specified time range.</returns>
        public async Task<List<PriceContract>> GetMultiplePricesAsync(GetPricesContract contract)
        {
            var request = new RequestData
            {
                Url = $"prices/get-multiple",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PriceContract>>(request);
        }

        /// <summary>
        /// Get the close prices for the multiple symbols in specified time range.
        /// </summary>
        /// <param name="contract">Parameters to load close prices</param>
        /// <returns>The method returns the symbol close prices for requested SymbolID in specified time range.</returns>
        public List<ClosePriceContract> GetMultipleClosePrices(GetPricesContract contract)
        {
            var request = new RequestData
            {
                Url = $"prices/get-multiple/close-prices",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<ClosePriceContract>>(request);
        }

        /// <summary>
        /// Get the close prices for the multiple symbols in specified time range.
        /// </summary>
        /// <param name="contract">Parameters to load close prices</param>
        /// <returns>The method returns the symbol close prices for requested SymbolID in specified time range.</returns>
        public async Task<List<ClosePriceContract>> GetMultipleClosePricesAsync(GetPricesContract contract)
        {
            var request = new RequestData
            {
                Url = $"prices/get-multiple/close-prices",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<ClosePriceContract>>(request);
        }

        /// <summary>
        /// Get the price for the symbol  in specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">FromDate (example: /2017-11-01 ).</param>
        /// <param name="toDate">To Date (example: /2017-11-01 ).</param>
        /// <returns>The method returns the symbol prices for requested SymbolID in specified time range.</returns>
        public IList<PriceContract> GetPrices(int symbolId, DateTime fromDate, DateTime toDate)
        {
            var request = new RequestData
            {
                Url = $"prices/{symbolId}/{fromDate:yyyy-MM-dd}/{toDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<IList<PriceContract>>(request);
        }

        /// <summary>
        /// Get the price for the symbol  in specified time range.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">FromDate (example: /2017-11-01 ).</param>
        /// <param name="toDate">To Date (example: /2017-11-01 ).</param>
        /// <returns>The method returns the symbol prices for requested SymbolID in specified time range.</returns>
        public async Task<IList<PriceContract>> GetPricesAsync(int symbolId, DateTime fromDate, DateTime toDate)
        {
            var request = new RequestData
            {
                Url = $"prices/{symbolId}/{fromDate:yyyy-MM-dd}/{toDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<IList<PriceContract>>(request);
        }

        /// <summary>
        /// Get the price for the symbol on a specific trade date.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-11)</param>
        /// <returns>The method returns the price of the contract.</returns>
        public PriceContract GetLatestPrice(int symbolId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"prices/latest/{symbolId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PriceContract>(request);
        }

        /// <summary>
        /// Get the price for the symbol on a specific trade date.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-11)</param>
        /// <returns>The method returns the price of the contract.</returns>
        public async Task<PriceContract> GetLatestPriceAsync(int symbolId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"prices/latest/{symbolId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PriceContract>(request);
        }

        public List<PriceContract> GetLatestOrFirstPrices(List<int> symbolIds, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"prices/latest-or-first/get-by-symbol-ids/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<PriceContract>>(request);
        }

        public async Task<List<PriceContract>> GetLatestOrFirstPricesAsync(List<int> symbolIds, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"prices/latest-or-first/get-by-symbol-ids/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<PriceContract>>(request);
        }

        public List<PriceContract> GetFirstPrices(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"prices/first/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<PriceContract>>(request);
        }

        public async Task<List<PriceContract>> GetFirstPricesAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"prices/first/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<PriceContract>>(request);
        }

        public List<PriceContract> GetLatestPrices(List<GetLatestPriceContract> getLatestPrices)
        {
            var request = new RequestData
            {
                Url = $"prices/latest",
                Method = HttpMethod.Post,
            };

            request.SetBody(getLatestPrices);

            return PerformRequest<List<PriceContract>>(request);
        }

        public async Task<List<PriceContract>> GetLatestPricesAsync(List<GetLatestPriceContract> getLatestPrices)
        {
            var request = new RequestData
            {
                Url = $"prices/latest",
                Method = HttpMethod.Post,
            };

            request.SetBody(getLatestPrices);

            return await PerformRequestAsync<List<PriceContract>>(request);
        }

        public List<PriceContract> GetLatestPricesBySymbolIds(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"prices/latest/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<PriceContract>>(request);
        }

        public async Task<List<PriceContract>> GetLatestPricesBySymbolIdsAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"prices/latest/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<PriceContract>>(request);
        }

        /// <summary>
        /// Get the intraday price for the symbol on a specific trade date.
        /// Currently the method is used only for a cryptocurrency on CryptoTradesmith project.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the Price Contract for the symbol by the requested Symbol ID.</returns>
        public PriceContract GetLatestIntradayPrice(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"prices/latest-intraday/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PriceContract>(request);
        }

        /// <summary>
        /// Get the intraday price for the symbol on a specific trade date.
        /// Currently the method is used only for a cryptocurrency on CryptoTradesmith project.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the Price Contract for the symbol by the requested Symbol ID.</returns>
        public async Task<PriceContract> GetLatestIntradayPriceAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"prices/latest-intraday/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PriceContract>(request);
        }

        /// <summary>
        /// Get the intraday prices for the symbol on a specific date range.
        /// </summary>
        /// <param name="getPricesContract">Get Intraday Prices Contract</param>
        /// <returns>The method returns the Price Contract for the symbol by the requested Symbol ID.</returns>
        public List<IntradayTradeCloseContract> GetIntradayPrices(GetIntradayPricesContract getPricesContract)
        {
            var request = new RequestData
            {
                Url = $"prices/intraday",
                Method = HttpMethod.Post,
            };

            request.SetBody(getPricesContract);

            return PerformRequest<List<IntradayTradeCloseContract>>(request);
        }

        /// <summary>
        /// Get the intraday prices for the symbol on a specific date range.
        /// </summary>
        /// <param name="getPricesContract">Get Intraday Prices Contract</param>
        /// <returns>The method returns the Price Contract for the symbol by the requested Symbol ID.</returns>
        public async Task<List<IntradayTradeCloseContract>> GetIntradayPricesAsync(GetIntradayPricesContract getPricesContract)
        {
            var request = new RequestData
            {
                Url = $"prices/intraday",
                Method = HttpMethod.Post,
            };

            request.SetBody(getPricesContract);

            return await PerformRequestAsync<List<IntradayTradeCloseContract>>(request);
        }

        /// <summary>
        /// Get the first price for the symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the Price Contract for symbol first trading day in the system by the requested Symbol ID.</returns>
        public PriceContract GetFirstPrice(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"prices/first/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PriceContract>(request);
        }

        /// <summary>
        /// Get the first price for the symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the Price Contract for symbol first trading day in the system by the requested Symbol ID.</returns>
        public async Task<PriceContract> GetFirstPriceAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"prices/first/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PriceContract>(request);
        }

        /// <summary>
        /// Get maximum price of the requested symbol in time range.
        /// </summary>
        /// <param name="contract">Contract to get max price.</param>
        /// <returns>The method returns contract with the  maximum symbol price.</returns>
        public PriceContract GetMaxPrice(GetExtremumPriceContract contract)
        {
            var request = new RequestData
            {
                Url = $"prices/max",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PriceContract>(request);
        }

        /// <summary>
        /// Get maximum price of the requested symbol in time range.
        /// </summary>
        /// <param name="contract">Contract to get max price.</param>
        /// <returns>The method returns contract with the  maximum symbol price.</returns>
        public async Task<PriceContract> GetMaxPriceAsync(GetExtremumPriceContract contract)
        {
            var request = new RequestData
            {
                Url = $"prices/max",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PriceContract>(request);
        }

        /// <summary>
        /// Get minimum price of the requested symbol in time range.
        /// </summary>
        /// <param name="contract">Contract to get min price.</param>
        /// <returns>The method returns contract with  the minimum symbol price.</returns>
        public PriceContract GetMinPrice(GetExtremumPriceContract contract)
        {
            var request = new RequestData
            {
                Url = $"prices/min",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PriceContract>(request);
        }

        /// <summary>
        /// Get minimum price of the requested symbol in time range.
        /// </summary>
        /// <param name="contract">Contract to get min price.</param>
        /// <returns>The method returns contract with  the minimum symbol price.</returns>
        public async Task<PriceContract> GetMinPriceAsync(GetExtremumPriceContract contract)
        {
            var request = new RequestData
            {
                Url = $"prices/min",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PriceContract>(request);
        }

        /// <summary>
        /// Get price of the requested symbol by the date offset from the specified trading day
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">Base trade date (example: /2017-11-01 ).</param>
        /// <param name="tradingDaysOffset">Days offset for getting goal trade date.</param>
        /// <returns>The method returns contract with the symbol price on goal trade date.</returns>
        public PriceContract GetPriceByTradingDaysOffset(int symbolId, DateTime fromDate, int tradingDaysOffset)
        {
            var request = new RequestData
            {
                Url = $"prices/by-trading-days-offset/{symbolId}/{fromDate:yyyy-MM-dd}/{tradingDaysOffset}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<PriceContract>(request);
        }

        /// <summary>
        /// Get price of the requested symbol by the date offset from the specified trading day
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="fromDate">Base trade date (example: /2017-11-01 ).</param>
        /// <param name="tradingDaysOffset">Days offset for getting goal trade date.</param>
        /// <returns>The method returns contract with the symbol price on goal trade date.</returns>
        public async Task<PriceContract> GetPriceByTradingDaysOffsetAsync(int symbolId, DateTime fromDate, int tradingDaysOffset)
        {
            var request = new RequestData
            {
                Url = $"prices/by-trading-days-offset/{symbolId}/{fromDate:yyyy-MM-dd}/{tradingDaysOffset}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<PriceContract>(request);
        }

        public Dictionary<int,Dictionary<DateTime,PriceContract>> GetLatestPricesDictionary(List<GetLatestPriceContract> getLatestPricesContract)
        {
            var request = new RequestData
            {
                Url = $"prices/latest/get-by-id-and-trade-date",
                Method = HttpMethod.Post,
            };

            request.SetBody(getLatestPricesContract);

            return PerformRequest<Dictionary<int,Dictionary<DateTime,PriceContract>>>(request);
        }

        public async Task<Dictionary<int,Dictionary<DateTime,PriceContract>>> GetLatestPricesDictionaryAsync(List<GetLatestPriceContract> getLatestPricesContract)
        {
            var request = new RequestData
            {
                Url = $"prices/latest/get-by-id-and-trade-date",
                Method = HttpMethod.Post,
            };

            request.SetBody(getLatestPricesContract);

            return await PerformRequestAsync<Dictionary<int,Dictionary<DateTime,PriceContract>>>(request);
        }

        /// <summary>
        /// Get predicted stock price.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Date of prediction.</param>
        /// <returns>The method returns contract with the symbol predicted price.</returns>
        public StockPricePredictionContract GetStockPricePrediction(int symbolId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"prices/prediction/{symbolId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<StockPricePredictionContract>(request);
        }

        /// <summary>
        /// Get predicted stock price.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Date of prediction.</param>
        /// <returns>The method returns contract with the symbol predicted price.</returns>
        public async Task<StockPricePredictionContract> GetStockPricePredictionAsync(int symbolId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"prices/prediction/{symbolId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<StockPricePredictionContract>(request);
        }

        /// <summary>
        /// Get availability of intraday prices for a symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return availability of intraday prices for a symbol.</returns>
        public bool IsIntradayPricesAvailable(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"prices/intraday/is-available/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<bool>(request);
        }

        /// <summary>
        /// Get availability of intraday prices for a symbol.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return availability of intraday prices for a symbol.</returns>
        public async Task<bool> IsIntradayPricesAvailableAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"prices/intraday/is-available/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<bool>(request);
        }
    }

    public interface IProductFeaturesClientByLicenseKeyApiMethods
    {
    }

    public interface IProductFeaturesClientByContextKeyApiMethods : IProductFeaturesClientByLicenseKeyApiMethods
    {
        UserTradeStopsFeaturesContract GetUserTradeStopsFeatures();

        Task<UserTradeStopsFeaturesContract> GetUserTradeStopsFeaturesAsync();

        UserFeaturesContract GetUserFeatures();

        Task<UserFeaturesContract> GetUserFeaturesAsync();
    }

    public interface IProductFeaturesClientByOrganizationApiMethods
    {
    }

    public partial interface IProductFeaturesClient : IProductFeaturesClientByLicenseKeyApiMethods, IClientByLicenseKey<IProductFeaturesClient, IProductFeaturesClientForUser, IProductFeaturesClientForOrganization>
    {
    }

    public interface IProductFeaturesClientForUser : IProductFeaturesClientByContextKeyApiMethods, IClientByContext<IProductFeaturesClientForUser, IProductFeaturesClientForOrganization>
    {
    }

    public interface IProductFeaturesClientForOrganization : IProductFeaturesClientByOrganizationApiMethods
    {
    }

    public partial class ProductFeaturesClient : BaseClient<IProductFeaturesClient, IProductFeaturesClientForUser, IProductFeaturesClientForOrganization, ProductFeaturesClient>, IProductFeaturesClient, IProductFeaturesClientForUser, IProductFeaturesClientForOrganization
    {
        [Obsolete("Use GetUserFeatures instead")]
        public UserTradeStopsFeaturesContract GetUserTradeStopsFeatures()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/tradestops-features/by-current-user",
                Method = HttpMethod.Get,
            };

            return PerformRequest<UserTradeStopsFeaturesContract>(request);
        }

        [Obsolete("Use GetUserFeatures instead")]
        public async Task<UserTradeStopsFeaturesContract> GetUserTradeStopsFeaturesAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/tradestops-features/by-current-user",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<UserTradeStopsFeaturesContract>(request);
        }

        public UserFeaturesContract GetUserFeatures()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/features/by-current-user",
                Method = HttpMethod.Get,
            };

            return PerformRequest<UserFeaturesContract>(request);
        }

        public async Task<UserFeaturesContract> GetUserFeaturesAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/features/by-current-user",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<UserFeaturesContract>(request);
        }
    }

    public interface IPtPortfolioViewsClientByLicenseKeyApiMethods
    {
    }

    public interface IPtPortfolioViewsClientByContextKeyApiMethods : IPtPortfolioViewsClientByLicenseKeyApiMethods
    {
    }

    public interface IPtPortfolioViewsClientByOrganizationApiMethods
    {
        /// <summary>
        /// Get view for Portfolio to display in Pubs\Publish section or in My Gurus on Finance website.
        /// Includes all necessary columns to display.
        /// </summary>
        /// <param name="portfolioId">ID of the portfolio to get view.</param>
        /// <returns>The method returns the view for corresponding portfolio, or null if it wasn't created yet.</returns>
        PtPortfolioViewContract GetPortfolioViewByPortfolio(int portfolioId);

        /// <summary>
        /// Get view for Portfolio to display in Pubs\Publish section or in My Gurus on Finance website.
        /// Includes all necessary columns to display.
        /// </summary>
        /// <param name="portfolioId">ID of the portfolio to get view.</param>
        /// <returns>The method returns the view for corresponding portfolio, or null if it wasn't created yet.</returns>
        Task<PtPortfolioViewContract> GetPortfolioViewByPortfolioAsync(int portfolioId);

        /// <summary>
        /// Get view for Portfolio to display in Pubs\Publish section or in My Gurus on Finance website.
        /// Includes all necessary columns to display.
        /// </summary>
        /// <param name="widgetId">ID of the portfolio to get view.</param>
        /// <returns>The method returns the view for corresponding portfolio, or null if it wasn't created yet.</returns>
        PtPortfolioViewContract GetPortfolioViewByWidget(int widgetId);

        /// <summary>
        /// Get view for Portfolio to display in Pubs\Publish section or in My Gurus on Finance website.
        /// Includes all necessary columns to display.
        /// </summary>
        /// <param name="widgetId">ID of the portfolio to get view.</param>
        /// <returns>The method returns the view for corresponding portfolio, or null if it wasn't created yet.</returns>
        Task<PtPortfolioViewContract> GetPortfolioViewByWidgetAsync(int widgetId);

        /// <summary>
        /// Replace Portfolio View by portfolio ID.
        /// In case, if there's no view in the database, new Portfolio view will be created.
        /// </summary>
        /// <param name="portfolioId">ID of the portfolio.</param>
        /// <param name="contract">New portfolio view.</param>
        /// <returns>HTTP Status code 200 (OK) in case of success.</returns>
        void ReplacePortfolioViewByPortfolio(int portfolioId, PtPortfolioViewContract contract);

        /// <summary>
        /// Replace Portfolio View by portfolio ID.
        /// In case, if there's no view in the database, new Portfolio view will be created.
        /// </summary>
        /// <param name="portfolioId">ID of the portfolio.</param>
        /// <param name="contract">New portfolio view.</param>
        /// <returns>HTTP Status code 200 (OK) in case of success.</returns>
        Task ReplacePortfolioViewByPortfolioAsync(int portfolioId, PtPortfolioViewContract contract);

        /// <summary>
        /// Replace Portfolio View by widget ID.
        /// In case, if there's no view in the database, new Portfolio view will be created.
        /// </summary>
        /// <param name="widgetId">ID of the portfolio widget.</param>
        /// <param name="contract">New portfolio view.</param>
        /// <returns>HTTP Status code 200 (OK) in case of success.</returns>
        void ReplacePortfolioViewByWidget(int widgetId, PtPortfolioViewContract contract);

        /// <summary>
        /// Replace Portfolio View by widget ID.
        /// In case, if there's no view in the database, new Portfolio view will be created.
        /// </summary>
        /// <param name="widgetId">ID of the portfolio widget.</param>
        /// <param name="contract">New portfolio view.</param>
        /// <returns>HTTP Status code 200 (OK) in case of success.</returns>
        Task ReplacePortfolioViewByWidgetAsync(int widgetId, PtPortfolioViewContract contract);
    }

    public partial interface IPtPortfolioViewsClient : IPtPortfolioViewsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPtPortfolioViewsClient, IPtPortfolioViewsClientForUser, IPtPortfolioViewsClientForOrganization>
    {
    }

    public interface IPtPortfolioViewsClientForUser : IPtPortfolioViewsClientByContextKeyApiMethods, IClientByContext<IPtPortfolioViewsClientForUser, IPtPortfolioViewsClientForOrganization>
    {
    }

    public interface IPtPortfolioViewsClientForOrganization : IPtPortfolioViewsClientByOrganizationApiMethods
    {
    }

    public partial class PtPortfolioViewsClient : BaseClient<IPtPortfolioViewsClient, IPtPortfolioViewsClientForUser, IPtPortfolioViewsClientForOrganization, PtPortfolioViewsClient>, IPtPortfolioViewsClient, IPtPortfolioViewsClientForUser, IPtPortfolioViewsClientForOrganization
    {
        /// <summary>
        /// Get view for Portfolio to display in Pubs\Publish section or in My Gurus on Finance website.
        /// Includes all necessary columns to display.
        /// </summary>
        /// <param name="portfolioId">ID of the portfolio to get view.</param>
        /// <returns>The method returns the view for corresponding portfolio, or null if it wasn't created yet.</returns>
        public PtPortfolioViewContract GetPortfolioViewByPortfolio(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-views/by-portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PtPortfolioViewContract>(request);
        }

        /// <summary>
        /// Get view for Portfolio to display in Pubs\Publish section or in My Gurus on Finance website.
        /// Includes all necessary columns to display.
        /// </summary>
        /// <param name="portfolioId">ID of the portfolio to get view.</param>
        /// <returns>The method returns the view for corresponding portfolio, or null if it wasn't created yet.</returns>
        public async Task<PtPortfolioViewContract> GetPortfolioViewByPortfolioAsync(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-views/by-portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PtPortfolioViewContract>(request);
        }

        /// <summary>
        /// Get view for Portfolio to display in Pubs\Publish section or in My Gurus on Finance website.
        /// Includes all necessary columns to display.
        /// </summary>
        /// <param name="widgetId">ID of the portfolio to get view.</param>
        /// <returns>The method returns the view for corresponding portfolio, or null if it wasn't created yet.</returns>
        public PtPortfolioViewContract GetPortfolioViewByWidget(int widgetId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-views/by-widget/{widgetId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PtPortfolioViewContract>(request);
        }

        /// <summary>
        /// Get view for Portfolio to display in Pubs\Publish section or in My Gurus on Finance website.
        /// Includes all necessary columns to display.
        /// </summary>
        /// <param name="widgetId">ID of the portfolio to get view.</param>
        /// <returns>The method returns the view for corresponding portfolio, or null if it wasn't created yet.</returns>
        public async Task<PtPortfolioViewContract> GetPortfolioViewByWidgetAsync(int widgetId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-views/by-widget/{widgetId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PtPortfolioViewContract>(request);
        }

        /// <summary>
        /// Replace Portfolio View by portfolio ID.
        /// In case, if there's no view in the database, new Portfolio view will be created.
        /// </summary>
        /// <param name="portfolioId">ID of the portfolio.</param>
        /// <param name="contract">New portfolio view.</param>
        /// <returns>HTTP Status code 200 (OK) in case of success.</returns>
        public void ReplacePortfolioViewByPortfolio(int portfolioId, PtPortfolioViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-views/by-portfolio/{portfolioId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Replace Portfolio View by portfolio ID.
        /// In case, if there's no view in the database, new Portfolio view will be created.
        /// </summary>
        /// <param name="portfolioId">ID of the portfolio.</param>
        /// <param name="contract">New portfolio view.</param>
        /// <returns>HTTP Status code 200 (OK) in case of success.</returns>
        public async Task ReplacePortfolioViewByPortfolioAsync(int portfolioId, PtPortfolioViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-views/by-portfolio/{portfolioId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Replace Portfolio View by widget ID.
        /// In case, if there's no view in the database, new Portfolio view will be created.
        /// </summary>
        /// <param name="widgetId">ID of the portfolio widget.</param>
        /// <param name="contract">New portfolio view.</param>
        /// <returns>HTTP Status code 200 (OK) in case of success.</returns>
        public void ReplacePortfolioViewByWidget(int widgetId, PtPortfolioViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-views/by-widget/{widgetId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Replace Portfolio View by widget ID.
        /// In case, if there's no view in the database, new Portfolio view will be created.
        /// </summary>
        /// <param name="widgetId">ID of the portfolio widget.</param>
        /// <param name="contract">New portfolio view.</param>
        /// <returns>HTTP Status code 200 (OK) in case of success.</returns>
        public async Task ReplacePortfolioViewByWidgetAsync(int widgetId, PtPortfolioViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/portfolio-views/by-widget/{widgetId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }
    }

    public interface IPtPortfolioWidgetsClientByLicenseKeyApiMethods
    {
    }

    public interface IPtPortfolioWidgetsClientByContextKeyApiMethods : IPtPortfolioWidgetsClientByLicenseKeyApiMethods
    {
    }

    public interface IPtPortfolioWidgetsClientByOrganizationApiMethods
    {
        /// <summary>
        /// Get list of widgets by portfolio ID.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to load widgets.</param>
        /// <returns>List of widgets for specified portfolio.</returns>
        List<PtWidgetContract> GetWidgetsByPortfolio(int portfolioId);

        /// <summary>
        /// Get list of widgets by portfolio ID.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to load widgets.</param>
        /// <returns>List of widgets for specified portfolio.</returns>
        Task<List<PtWidgetContract>> GetWidgetsByPortfolioAsync(int portfolioId);

        /// <summary>
        /// Get widget by ID.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <returns>Widget that was found by ID or null in case if nothing was found.</returns>
        PtWidgetContract GetWidget(int widgetId);

        /// <summary>
        /// Get widget by ID.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <returns>Widget that was found by ID or null in case if nothing was found.</returns>
        Task<PtWidgetContract> GetWidgetAsync(int widgetId);

        /// <summary>
        /// Get widget by GUID.
        /// </summary>
        /// <param name="widgetGuid">ID of the widget.</param>
        /// <returns>Widget that was found by GUID or null in case if nothing was found.</returns>
        PtWidgetContract GetWidgetByGuid(Guid widgetGuid);

        /// <summary>
        /// Get widget by GUID.
        /// </summary>
        /// <param name="widgetGuid">ID of the widget.</param>
        /// <returns>Widget that was found by GUID or null in case if nothing was found.</returns>
        Task<PtWidgetContract> GetWidgetByGuidAsync(Guid widgetGuid);

        /// <summary>
        /// Create a widget that will be used on Publisher's website.
        /// </summary>
        /// <param name="contract">Parameters to create widget.</param>
        /// <returns>Instance of created widget.</returns>
        PtWidgetContract CreateWidget(CreatePtWidgetContract contract);

        /// <summary>
        /// Create a widget that will be used on Publisher's website.
        /// </summary>
        /// <param name="contract">Parameters to create widget.</param>
        /// <returns>Instance of created widget.</returns>
        Task<PtWidgetContract> CreateWidgetAsync(CreatePtWidgetContract contract);

        /// <summary>
        /// Edit existing widget.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <param name="contract">Parameters to edit widget.</param>
        /// <returns>Instance of the edited widget.</returns>
        PtWidgetContract EditWidget(int widgetId, EditPtWidgetContract contract);

        /// <summary>
        /// Edit existing widget.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <param name="contract">Parameters to edit widget.</param>
        /// <returns>Instance of the edited widget.</returns>
        Task<PtWidgetContract> EditWidgetAsync(int widgetId, EditPtWidgetContract contract);

        /// <summary>
        /// Delete widget from the database.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <returns>HTTP status code 200 (OK) in case of success.</returns>
        void DeleteWidget(int widgetId);

        /// <summary>
        /// Delete widget from the database.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <returns>HTTP status code 200 (OK) in case of success.</returns>
        Task DeleteWidgetAsync(int widgetId);
    }

    public partial interface IPtPortfolioWidgetsClient : IPtPortfolioWidgetsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPtPortfolioWidgetsClient, IPtPortfolioWidgetsClientForUser, IPtPortfolioWidgetsClientForOrganization>
    {
    }

    public interface IPtPortfolioWidgetsClientForUser : IPtPortfolioWidgetsClientByContextKeyApiMethods, IClientByContext<IPtPortfolioWidgetsClientForUser, IPtPortfolioWidgetsClientForOrganization>
    {
    }

    public interface IPtPortfolioWidgetsClientForOrganization : IPtPortfolioWidgetsClientByOrganizationApiMethods
    {
    }

    public partial class PtPortfolioWidgetsClient : BaseClient<IPtPortfolioWidgetsClient, IPtPortfolioWidgetsClientForUser, IPtPortfolioWidgetsClientForOrganization, PtPortfolioWidgetsClient>, IPtPortfolioWidgetsClient, IPtPortfolioWidgetsClientForUser, IPtPortfolioWidgetsClientForOrganization
    {
        /// <summary>
        /// Get list of widgets by portfolio ID.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to load widgets.</param>
        /// <returns>List of widgets for specified portfolio.</returns>
        public List<PtWidgetContract> GetWidgetsByPortfolio(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets/by-portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PtWidgetContract>>(request);
        }

        /// <summary>
        /// Get list of widgets by portfolio ID.
        /// </summary>
        /// <param name="portfolioId">Portfolio ID to load widgets.</param>
        /// <returns>List of widgets for specified portfolio.</returns>
        public async Task<List<PtWidgetContract>> GetWidgetsByPortfolioAsync(int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets/by-portfolio/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PtWidgetContract>>(request);
        }

        /// <summary>
        /// Get widget by ID.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <returns>Widget that was found by ID or null in case if nothing was found.</returns>
        public PtWidgetContract GetWidget(int widgetId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets/{widgetId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PtWidgetContract>(request);
        }

        /// <summary>
        /// Get widget by ID.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <returns>Widget that was found by ID or null in case if nothing was found.</returns>
        public async Task<PtWidgetContract> GetWidgetAsync(int widgetId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets/{widgetId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PtWidgetContract>(request);
        }

        /// <summary>
        /// Get widget by GUID.
        /// </summary>
        /// <param name="widgetGuid">ID of the widget.</param>
        /// <returns>Widget that was found by GUID or null in case if nothing was found.</returns>
        public PtWidgetContract GetWidgetByGuid(Guid widgetGuid)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets/{widgetGuid}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PtWidgetContract>(request);
        }

        /// <summary>
        /// Get widget by GUID.
        /// </summary>
        /// <param name="widgetGuid">ID of the widget.</param>
        /// <returns>Widget that was found by GUID or null in case if nothing was found.</returns>
        public async Task<PtWidgetContract> GetWidgetByGuidAsync(Guid widgetGuid)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets/{widgetGuid}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PtWidgetContract>(request);
        }

        /// <summary>
        /// Create a widget that will be used on Publisher's website.
        /// </summary>
        /// <param name="contract">Parameters to create widget.</param>
        /// <returns>Instance of created widget.</returns>
        public PtWidgetContract CreateWidget(CreatePtWidgetContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PtWidgetContract>(request);
        }

        /// <summary>
        /// Create a widget that will be used on Publisher's website.
        /// </summary>
        /// <param name="contract">Parameters to create widget.</param>
        /// <returns>Instance of created widget.</returns>
        public async Task<PtWidgetContract> CreateWidgetAsync(CreatePtWidgetContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PtWidgetContract>(request);
        }

        /// <summary>
        /// Edit existing widget.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <param name="contract">Parameters to edit widget.</param>
        /// <returns>Instance of the edited widget.</returns>
        public PtWidgetContract EditWidget(int widgetId, EditPtWidgetContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets/{widgetId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PtWidgetContract>(request);
        }

        /// <summary>
        /// Edit existing widget.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <param name="contract">Parameters to edit widget.</param>
        /// <returns>Instance of the edited widget.</returns>
        public async Task<PtWidgetContract> EditWidgetAsync(int widgetId, EditPtWidgetContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets/{widgetId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PtWidgetContract>(request);
        }

        /// <summary>
        /// Delete widget from the database.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <returns>HTTP status code 200 (OK) in case of success.</returns>
        public void DeleteWidget(int widgetId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets/{widgetId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete widget from the database.
        /// </summary>
        /// <param name="widgetId">ID of the widget.</param>
        /// <returns>HTTP status code 200 (OK) in case of success.</returns>
        public async Task DeleteWidgetAsync(int widgetId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/widgets/{widgetId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }
    }

    public interface IPtPositionTriggersClientByLicenseKeyApiMethods
    {
    }

    public interface IPtPositionTriggersClientByContextKeyApiMethods : IPtPositionTriggersClientByLicenseKeyApiMethods
    {
    }

    public interface IPtPositionTriggersClientByOrganizationApiMethods
    {
        /// <summary>
        /// Get grid data for show Position Triggers.
        /// </summary>
        /// <param name="contract">Grid data contract.</param>
        /// <returns>The method returns contract with Position Triggers and total Portfolio values.</returns>
        PtAlertsGridDataContract GetAlertsGridData(GetAlertsGridDataContract contract);

        /// <summary>
        /// Get grid data for show Position Triggers.
        /// </summary>
        /// <param name="contract">Grid data contract.</param>
        /// <returns>The method returns contract with Position Triggers and total Portfolio values.</returns>
        Task<PtAlertsGridDataContract> GetAlertsGridDataAsync(GetAlertsGridDataContract contract);

        /// <summary>
        /// Get a Position Trigger by its ID.
        /// </summary>
        /// <param name="positionTriggerId">Position Trigger ID</param>
        /// <returns>The method returns the Position Trigger contract by the requested ID.</returns>
        PtPositionTriggerContract GetPositionTrigger(int positionTriggerId);

        /// <summary>
        /// Get a Position Trigger by its ID.
        /// </summary>
        /// <param name="positionTriggerId">Position Trigger ID</param>
        /// <returns>The method returns the Position Trigger contract by the requested ID.</returns>
        Task<PtPositionTriggerContract> GetPositionTriggerAsync(int positionTriggerId);

        List<PtPositionTriggerContract> GetPositionTriggers(List<int> positionTriggerIds);

        Task<List<PtPositionTriggerContract>> GetPositionTriggersAsync(List<int> positionTriggerIds);

        /// <summary>
        /// Get an array of active Position Triggers created for the requested position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of Position Trigger contracts by the requested position ID.</returns>
        List<PtPositionTriggerContract> GetPositionTriggersByPosition(int positionId);

        /// <summary>
        /// Get an array of active Position Triggers created for the requested position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of Position Trigger contracts by the requested position ID.</returns>
        Task<List<PtPositionTriggerContract>> GetPositionTriggersByPositionAsync(int positionId);

        List<PtPositionTriggerContract> GetPositionTriggersByPositionIds(List<int> positionIds);

        Task<List<PtPositionTriggerContract>> GetPositionTriggersByPositionIdsAsync(List<int> positionIds);

        void DeletePositionTriggers(List<int> triggerIds);

        Task DeletePositionTriggersAsync(List<int> triggerIds);

        /// <summary>
        /// Edit a specific Position Trigger by the Position Trigger ID and input parameters.
        /// </summary>
        /// <param name="positionTriggerId">ID of the Position Trigger to edit.</param>
        /// <param name="contract">Position trigger values to edit.</param>
        /// <returns>Edited position trigger contract.</returns>
        PtPositionTriggerContract EditPositionTrigger(int positionTriggerId, EditPtPositionTriggerContract contract);

        /// <summary>
        /// Edit a specific Position Trigger by the Position Trigger ID and input parameters.
        /// </summary>
        /// <param name="positionTriggerId">ID of the Position Trigger to edit.</param>
        /// <param name="contract">Position trigger values to edit.</param>
        /// <returns>Edited position trigger contract.</returns>
        Task<PtPositionTriggerContract> EditPositionTriggerAsync(int positionTriggerId, EditPtPositionTriggerContract contract);

        /// <summary>
        /// Update Start Date and Start Price for alerts from the same position values. You can use this method to update Position Triggers when you edit those values for positions.
        /// Position Triggers that depend on Start Date and Start Price are the following:
        /// TrailingStopsPercentTrigger ;
        /// VolatilityQuotinentTrigger ;
        /// UnStockVolatilityQuotinentTrigger;
        /// UnStockTrailingStopsPercentTrigger .
        /// </summary>
        /// <param name="positionId">Position Id.</param>
        /// <returns>The method returns trigger contract for TrailingStopsPercentTrigger , VolatilityQuotinentTrigger , UnStockVolatilityQuotinentTrigger, UnStockTrailingStopsPercentTrigger .</returns>
        List<PtPositionTriggerContract> UpdateStartDateAndPriceFromPosition(int positionId);

        /// <summary>
        /// Update Start Date and Start Price for alerts from the same position values. You can use this method to update Position Triggers when you edit those values for positions.
        /// Position Triggers that depend on Start Date and Start Price are the following:
        /// TrailingStopsPercentTrigger ;
        /// VolatilityQuotinentTrigger ;
        /// UnStockVolatilityQuotinentTrigger;
        /// UnStockTrailingStopsPercentTrigger .
        /// </summary>
        /// <param name="positionId">Position Id.</param>
        /// <returns>The method returns trigger contract for TrailingStopsPercentTrigger , VolatilityQuotinentTrigger , UnStockVolatilityQuotinentTrigger, UnStockTrailingStopsPercentTrigger .</returns>
        Task<List<PtPositionTriggerContract>> UpdateStartDateAndPriceFromPositionAsync(int positionId);

        Dictionary<int,List<PtPositionTriggerContract>> UpdateStartDateAndPriceFromPositions(List<int> positionIds);

        Task<Dictionary<int,List<PtPositionTriggerContract>>> UpdateStartDateAndPriceFromPositionsAsync(List<int> positionIds);

        /// <summary>
        /// Create a specific Position Trigger based on the requested parameters.
        /// </summary>
        /// <param name="positionId">Position ID for creating a Position Trigger.</param>
        /// <param name="contract">Position trigger contract to create a trigger.</param>
        /// <returns>Method returns contract for newly created position trigger.</returns>
        PtPositionTriggerContract CreatePositionTrigger(int positionId, TriggerFieldsContract contract);

        /// <summary>
        /// Create a specific Position Trigger based on the requested parameters.
        /// </summary>
        /// <param name="positionId">Position ID for creating a Position Trigger.</param>
        /// <param name="contract">Position trigger contract to create a trigger.</param>
        /// <returns>Method returns contract for newly created position trigger.</returns>
        Task<PtPositionTriggerContract> CreatePositionTriggerAsync(int positionId, TriggerFieldsContract contract);

        BulkCreatePtPositionTriggersResultContract BulkCreatePositionTriggers(List<BulkCreatePositionTriggerContract> contracts);

        Task<BulkCreatePtPositionTriggersResultContract> BulkCreatePositionTriggersAsync(List<BulkCreatePositionTriggerContract> contracts);
    }

    public partial interface IPtPositionTriggersClient : IPtPositionTriggersClientByLicenseKeyApiMethods, IClientByLicenseKey<IPtPositionTriggersClient, IPtPositionTriggersClientForUser, IPtPositionTriggersClientForOrganization>
    {
    }

    public interface IPtPositionTriggersClientForUser : IPtPositionTriggersClientByContextKeyApiMethods, IClientByContext<IPtPositionTriggersClientForUser, IPtPositionTriggersClientForOrganization>
    {
    }

    public interface IPtPositionTriggersClientForOrganization : IPtPositionTriggersClientByOrganizationApiMethods
    {
    }

    public partial class PtPositionTriggersClient : BaseClient<IPtPositionTriggersClient, IPtPositionTriggersClientForUser, IPtPositionTriggersClientForOrganization, PtPositionTriggersClient>, IPtPositionTriggersClient, IPtPositionTriggersClientForUser, IPtPositionTriggersClientForOrganization
    {
        /// <summary>
        /// Get grid data for show Position Triggers.
        /// </summary>
        /// <param name="contract">Grid data contract.</param>
        /// <returns>The method returns contract with Position Triggers and total Portfolio values.</returns>
        public PtAlertsGridDataContract GetAlertsGridData(GetAlertsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/alerts-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PtAlertsGridDataContract>(request);
        }

        /// <summary>
        /// Get grid data for show Position Triggers.
        /// </summary>
        /// <param name="contract">Grid data contract.</param>
        /// <returns>The method returns contract with Position Triggers and total Portfolio values.</returns>
        public async Task<PtAlertsGridDataContract> GetAlertsGridDataAsync(GetAlertsGridDataContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/alerts-grid",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PtAlertsGridDataContract>(request);
        }

        /// <summary>
        /// Get a Position Trigger by its ID.
        /// </summary>
        /// <param name="positionTriggerId">Position Trigger ID</param>
        /// <returns>The method returns the Position Trigger contract by the requested ID.</returns>
        public PtPositionTriggerContract GetPositionTrigger(int positionTriggerId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/{positionTriggerId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PtPositionTriggerContract>(request);
        }

        /// <summary>
        /// Get a Position Trigger by its ID.
        /// </summary>
        /// <param name="positionTriggerId">Position Trigger ID</param>
        /// <returns>The method returns the Position Trigger contract by the requested ID.</returns>
        public async Task<PtPositionTriggerContract> GetPositionTriggerAsync(int positionTriggerId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/{positionTriggerId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PtPositionTriggerContract>(request);
        }

        public List<PtPositionTriggerContract> GetPositionTriggers(List<int> positionTriggerIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionTriggerIds);

            return PerformRequest<List<PtPositionTriggerContract>>(request);
        }

        public async Task<List<PtPositionTriggerContract>> GetPositionTriggersAsync(List<int> positionTriggerIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionTriggerIds);

            return await PerformRequestAsync<List<PtPositionTriggerContract>>(request);
        }

        /// <summary>
        /// Get an array of active Position Triggers created for the requested position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of Position Trigger contracts by the requested position ID.</returns>
        public List<PtPositionTriggerContract> GetPositionTriggersByPosition(int positionId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/position/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PtPositionTriggerContract>>(request);
        }

        /// <summary>
        /// Get an array of active Position Triggers created for the requested position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns an array of Position Trigger contracts by the requested position ID.</returns>
        public async Task<List<PtPositionTriggerContract>> GetPositionTriggersByPositionAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/position/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PtPositionTriggerContract>>(request);
        }

        public List<PtPositionTriggerContract> GetPositionTriggersByPositionIds(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/by-position-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return PerformRequest<List<PtPositionTriggerContract>>(request);
        }

        public async Task<List<PtPositionTriggerContract>> GetPositionTriggersByPositionIdsAsync(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/by-position-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(positionIds);

            return await PerformRequestAsync<List<PtPositionTriggerContract>>(request);
        }

        public void DeletePositionTriggers(List<int> triggerIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers",
                Method = HttpMethod.Delete,
            };

            request.SetBody(triggerIds);

            PerformRequest(request);
        }

        public async Task DeletePositionTriggersAsync(List<int> triggerIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers",
                Method = HttpMethod.Delete,
            };

            request.SetBody(triggerIds);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Edit a specific Position Trigger by the Position Trigger ID and input parameters.
        /// </summary>
        /// <param name="positionTriggerId">ID of the Position Trigger to edit.</param>
        /// <param name="contract">Position trigger values to edit.</param>
        /// <returns>Edited position trigger contract.</returns>
        public PtPositionTriggerContract EditPositionTrigger(int positionTriggerId, EditPtPositionTriggerContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/{positionTriggerId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PtPositionTriggerContract>(request);
        }

        /// <summary>
        /// Edit a specific Position Trigger by the Position Trigger ID and input parameters.
        /// </summary>
        /// <param name="positionTriggerId">ID of the Position Trigger to edit.</param>
        /// <param name="contract">Position trigger values to edit.</param>
        /// <returns>Edited position trigger contract.</returns>
        public async Task<PtPositionTriggerContract> EditPositionTriggerAsync(int positionTriggerId, EditPtPositionTriggerContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/{positionTriggerId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PtPositionTriggerContract>(request);
        }

        /// <summary>
        /// Update Start Date and Start Price for alerts from the same position values. You can use this method to update Position Triggers when you edit those values for positions.
        /// Position Triggers that depend on Start Date and Start Price are the following:
        /// TrailingStopsPercentTrigger ;
        /// VolatilityQuotinentTrigger ;
        /// UnStockVolatilityQuotinentTrigger;
        /// UnStockTrailingStopsPercentTrigger .
        /// </summary>
        /// <param name="positionId">Position Id.</param>
        /// <returns>The method returns trigger contract for TrailingStopsPercentTrigger , VolatilityQuotinentTrigger , UnStockVolatilityQuotinentTrigger, UnStockTrailingStopsPercentTrigger .</returns>
        public List<PtPositionTriggerContract> UpdateStartDateAndPriceFromPosition(int positionId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/update-start-date-and-price-from-position/{positionId}",
                Method = HttpMethod.Put,
            };

            return PerformRequest<List<PtPositionTriggerContract>>(request);
        }

        /// <summary>
        /// Update Start Date and Start Price for alerts from the same position values. You can use this method to update Position Triggers when you edit those values for positions.
        /// Position Triggers that depend on Start Date and Start Price are the following:
        /// TrailingStopsPercentTrigger ;
        /// VolatilityQuotinentTrigger ;
        /// UnStockVolatilityQuotinentTrigger;
        /// UnStockTrailingStopsPercentTrigger .
        /// </summary>
        /// <param name="positionId">Position Id.</param>
        /// <returns>The method returns trigger contract for TrailingStopsPercentTrigger , VolatilityQuotinentTrigger , UnStockVolatilityQuotinentTrigger, UnStockTrailingStopsPercentTrigger .</returns>
        public async Task<List<PtPositionTriggerContract>> UpdateStartDateAndPriceFromPositionAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/update-start-date-and-price-from-position/{positionId}",
                Method = HttpMethod.Put,
            };

            return await PerformRequestAsync<List<PtPositionTriggerContract>>(request);
        }

        public Dictionary<int,List<PtPositionTriggerContract>> UpdateStartDateAndPriceFromPositions(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/update-start-date-and-price-from-positions",
                Method = HttpMethod.Put,
            };

            request.SetBody(positionIds);

            return PerformRequest<Dictionary<int,List<PtPositionTriggerContract>>>(request);
        }

        public async Task<Dictionary<int,List<PtPositionTriggerContract>>> UpdateStartDateAndPriceFromPositionsAsync(List<int> positionIds)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/update-start-date-and-price-from-positions",
                Method = HttpMethod.Put,
            };

            request.SetBody(positionIds);

            return await PerformRequestAsync<Dictionary<int,List<PtPositionTriggerContract>>>(request);
        }

        /// <summary>
        /// Create a specific Position Trigger based on the requested parameters.
        /// </summary>
        /// <param name="positionId">Position ID for creating a Position Trigger.</param>
        /// <param name="contract">Position trigger contract to create a trigger.</param>
        /// <returns>Method returns contract for newly created position trigger.</returns>
        public PtPositionTriggerContract CreatePositionTrigger(int positionId, TriggerFieldsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/position/{positionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PtPositionTriggerContract>(request);
        }

        /// <summary>
        /// Create a specific Position Trigger based on the requested parameters.
        /// </summary>
        /// <param name="positionId">Position ID for creating a Position Trigger.</param>
        /// <param name="contract">Position trigger contract to create a trigger.</param>
        /// <returns>Method returns contract for newly created position trigger.</returns>
        public async Task<PtPositionTriggerContract> CreatePositionTriggerAsync(int positionId, TriggerFieldsContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/position/{positionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PtPositionTriggerContract>(request);
        }

        public BulkCreatePtPositionTriggersResultContract BulkCreatePositionTriggers(List<BulkCreatePositionTriggerContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return PerformRequest<BulkCreatePtPositionTriggersResultContract>(request);
        }

        public async Task<BulkCreatePtPositionTriggersResultContract> BulkCreatePositionTriggersAsync(List<BulkCreatePositionTriggerContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/position-triggers/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return await PerformRequestAsync<BulkCreatePtPositionTriggersResultContract>(request);
        }
    }

    public interface IPtPublishClientByLicenseKeyApiMethods
    {
    }

    public interface IPtPublishClientByContextKeyApiMethods : IPtPublishClientByLicenseKeyApiMethods
    {
    }

    public interface IPtPublishClientByOrganizationApiMethods
    {
        /// <summary>
        /// Publish portfolio with positions and necessary view columns.
        /// </summary>
        /// <param name="contract">Parameters to publish portfolio.</param>
        /// <returns>HTTP Status 200 Ok in case of successful publish.</returns>
        void PublishPortfolio(PublishPtPortfolioContract contract);

        /// <summary>
        /// Publish portfolio with positions and necessary view columns.
        /// </summary>
        /// <param name="contract">Parameters to publish portfolio.</param>
        /// <returns>HTTP Status 200 Ok in case of successful publish.</returns>
        Task PublishPortfolioAsync(PublishPtPortfolioContract contract);

        void PublishPositions(List<PublishPtPositionContract> contracts);

        Task PublishPositionsAsync(List<PublishPtPositionContract> contracts);
    }

    public partial interface IPtPublishClient : IPtPublishClientByLicenseKeyApiMethods, IClientByLicenseKey<IPtPublishClient, IPtPublishClientForUser, IPtPublishClientForOrganization>
    {
    }

    public interface IPtPublishClientForUser : IPtPublishClientByContextKeyApiMethods, IClientByContext<IPtPublishClientForUser, IPtPublishClientForOrganization>
    {
    }

    public interface IPtPublishClientForOrganization : IPtPublishClientByOrganizationApiMethods
    {
    }

    public partial class PtPublishClient : BaseClient<IPtPublishClient, IPtPublishClientForUser, IPtPublishClientForOrganization, PtPublishClient>, IPtPublishClient, IPtPublishClientForUser, IPtPublishClientForOrganization
    {
        /// <summary>
        /// Publish portfolio with positions and necessary view columns.
        /// </summary>
        /// <param name="contract">Parameters to publish portfolio.</param>
        /// <returns>HTTP Status 200 Ok in case of successful publish.</returns>
        public void PublishPortfolio(PublishPtPortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/publish-portfolio",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Publish portfolio with positions and necessary view columns.
        /// </summary>
        /// <param name="contract">Parameters to publish portfolio.</param>
        /// <returns>HTTP Status 200 Ok in case of successful publish.</returns>
        public async Task PublishPortfolioAsync(PublishPtPortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/publish-portfolio",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public void PublishPositions(List<PublishPtPositionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/publish-position",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            PerformRequest(request);
        }

        public async Task PublishPositionsAsync(List<PublishPtPositionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/publish-position",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            await PerformRequestAsync(request);
        }
    }

    public interface IPtSubtradesClientByLicenseKeyApiMethods
    {
    }

    public interface IPtSubtradesClientByContextKeyApiMethods : IPtSubtradesClientByLicenseKeyApiMethods
    {
    }

    public interface IPtSubtradesClientByOrganizationApiMethods
    {
        /// <summary>
        /// Edit subtrade.
        /// </summary>
        /// <param name="subtradeId">Subtrade Id to edit</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited subtrade.</returns>
        PtSubtradeContract EditSubtrade(int subtradeId, EditPtSubtradeContract contract);

        /// <summary>
        /// Edit subtrade.
        /// </summary>
        /// <param name="subtradeId">Subtrade Id to edit</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited subtrade.</returns>
        Task<PtSubtradeContract> EditSubtradeAsync(int subtradeId, EditPtSubtradeContract contract);
    }

    public partial interface IPtSubtradesClient : IPtSubtradesClientByLicenseKeyApiMethods, IClientByLicenseKey<IPtSubtradesClient, IPtSubtradesClientForUser, IPtSubtradesClientForOrganization>
    {
    }

    public interface IPtSubtradesClientForUser : IPtSubtradesClientByContextKeyApiMethods, IClientByContext<IPtSubtradesClientForUser, IPtSubtradesClientForOrganization>
    {
    }

    public interface IPtSubtradesClientForOrganization : IPtSubtradesClientByOrganizationApiMethods
    {
    }

    public partial class PtSubtradesClient : BaseClient<IPtSubtradesClient, IPtSubtradesClientForUser, IPtSubtradesClientForOrganization, PtSubtradesClient>, IPtSubtradesClient, IPtSubtradesClientForUser, IPtSubtradesClientForOrganization
    {
        /// <summary>
        /// Edit subtrade.
        /// </summary>
        /// <param name="subtradeId">Subtrade Id to edit</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited subtrade.</returns>
        public PtSubtradeContract EditSubtrade(int subtradeId, EditPtSubtradeContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/subtrades/edit/{subtradeId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PtSubtradeContract>(request);
        }

        /// <summary>
        /// Edit subtrade.
        /// </summary>
        /// <param name="subtradeId">Subtrade Id to edit</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited subtrade.</returns>
        public async Task<PtSubtradeContract> EditSubtradeAsync(int subtradeId, EditPtSubtradeContract contract)
        {
            var request = new RequestData
            {
                Url = $"portfolio-tracker/subtrades/edit/{subtradeId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PtSubtradeContract>(request);
        }
    }

    public interface IPublicationsClientByLicenseKeyApiMethods
    {
    }

    public interface IPublicationsClientByContextKeyApiMethods : IPublicationsClientByLicenseKeyApiMethods
    {
        List<PublicationContract> Search(SearchPublicationsForUserContract contract);

        Task<List<PublicationContract>> SearchAsync(SearchPublicationsForUserContract contract);

        PublicationReportContract GetPdfReport(int publicationId);

        Task<PublicationReportContract> GetPdfReportAsync(int publicationId);
    }

    public interface IPublicationsClientByOrganizationApiMethods
    {
    }

    public partial interface IPublicationsClient : IPublicationsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublicationsClient, IPublicationsClientForUser, IPublicationsClientForOrganization>
    {
    }

    public interface IPublicationsClientForUser : IPublicationsClientByContextKeyApiMethods, IClientByContext<IPublicationsClientForUser, IPublicationsClientForOrganization>
    {
    }

    public interface IPublicationsClientForOrganization : IPublicationsClientByOrganizationApiMethods
    {
    }

    public partial class PublicationsClient : BaseClient<IPublicationsClient, IPublicationsClientForUser, IPublicationsClientForOrganization, PublicationsClient>, IPublicationsClient, IPublicationsClientForUser, IPublicationsClientForOrganization
    {
        public List<PublicationContract> Search(SearchPublicationsForUserContract contract)
        {
            var request = new RequestData
            {
                Url = $"publications/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PublicationContract>>(request);
        }

        public async Task<List<PublicationContract>> SearchAsync(SearchPublicationsForUserContract contract)
        {
            var request = new RequestData
            {
                Url = $"publications/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PublicationContract>>(request);
        }

        public PublicationReportContract GetPdfReport(int publicationId)
        {
            var request = new RequestData
            {
                Url = $"publications/{publicationId}/pdfreport",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublicationReportContract>(request);
        }

        public async Task<PublicationReportContract> GetPdfReportAsync(int publicationId)
        {
            var request = new RequestData
            {
                Url = $"publications/{publicationId}/pdfreport",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublicationReportContract>(request);
        }
    }

    public interface IPublishersApiKeysClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Add api key to customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>Created api key contract.</returns>
        PublishersApiKeyContract CreateApiKey(int customerId);

        /// <summary>
        /// Add api key to customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>Created api key contract.</returns>
        Task<PublishersApiKeyContract> CreateApiKeyAsync(int customerId);

        /// <summary>
        /// Delete api key by ID
        /// </summary>
        /// <param name="apiKeyId">Unique api key ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the api key.</returns>
        void DeleteApiKey(int apiKeyId);

        /// <summary>
        /// Delete api key by ID
        /// </summary>
        /// <param name="apiKeyId">Unique api key ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the api key.</returns>
        Task DeleteApiKeyAsync(int apiKeyId);

        /// <summary>
        /// Search api keys range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to api keys.</param>
        /// <returns>The method returns the search result contract..</returns>
        SearchResultContract<PublishersApiKeyContract> SearchApiKeysRange(int customerId, SearchPublishersApiKeysContract searchContract);

        /// <summary>
        /// Search api keys range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to api keys.</param>
        /// <returns>The method returns the search result contract..</returns>
        Task<SearchResultContract<PublishersApiKeyContract>> SearchApiKeysRangeAsync(int customerId, SearchPublishersApiKeysContract searchContract);
    }

    public interface IPublishersApiKeysClientByContextKeyApiMethods : IPublishersApiKeysClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersApiKeysClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersApiKeysClient : IPublishersApiKeysClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersApiKeysClient, IPublishersApiKeysClientForUser, IPublishersApiKeysClientForOrganization>
    {
    }

    public interface IPublishersApiKeysClientForUser : IPublishersApiKeysClientByContextKeyApiMethods, IClientByContext<IPublishersApiKeysClientForUser, IPublishersApiKeysClientForOrganization>
    {
    }

    public interface IPublishersApiKeysClientForOrganization : IPublishersApiKeysClientByOrganizationApiMethods
    {
    }

    public partial class PublishersApiKeysClient : BaseClient<IPublishersApiKeysClient, IPublishersApiKeysClientForUser, IPublishersApiKeysClientForOrganization, PublishersApiKeysClient>, IPublishersApiKeysClient, IPublishersApiKeysClientForUser, IPublishersApiKeysClientForOrganization
    {
        /// <summary>
        /// Add api key to customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>Created api key contract.</returns>
        public PublishersApiKeyContract CreateApiKey(int customerId)
        {
            var request = new RequestData
            {
                Url = $"publishers/api-keys/{customerId}/create",
                Method = HttpMethod.Post,
            };

            return PerformRequest<PublishersApiKeyContract>(request);
        }

        /// <summary>
        /// Add api key to customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>Created api key contract.</returns>
        public async Task<PublishersApiKeyContract> CreateApiKeyAsync(int customerId)
        {
            var request = new RequestData
            {
                Url = $"publishers/api-keys/{customerId}/create",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<PublishersApiKeyContract>(request);
        }

        /// <summary>
        /// Delete api key by ID
        /// </summary>
        /// <param name="apiKeyId">Unique api key ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the api key.</returns>
        public void DeleteApiKey(int apiKeyId)
        {
            var request = new RequestData
            {
                Url = $"publishers/api-keys/{apiKeyId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete api key by ID
        /// </summary>
        /// <param name="apiKeyId">Unique api key ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the api key.</returns>
        public async Task DeleteApiKeyAsync(int apiKeyId)
        {
            var request = new RequestData
            {
                Url = $"publishers/api-keys/{apiKeyId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Search api keys range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to api keys.</param>
        /// <returns>The method returns the search result contract..</returns>
        public SearchResultContract<PublishersApiKeyContract> SearchApiKeysRange(int customerId, SearchPublishersApiKeysContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/api-keys/{customerId}/search-api-keys-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<PublishersApiKeyContract>>(request);
        }

        /// <summary>
        /// Search api keys range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to api keys.</param>
        /// <returns>The method returns the search result contract..</returns>
        public async Task<SearchResultContract<PublishersApiKeyContract>> SearchApiKeysRangeAsync(int customerId, SearchPublishersApiKeysContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/api-keys/{customerId}/search-api-keys-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<PublishersApiKeyContract>>(request);
        }
    }

    public interface IPublishersBusinessesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Business unit to customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create business unit contract.</param>
        /// <returns>The method returns contract for created business unit.</returns>
        PublishersBusinessUnitContract CreateBusinessUnit(int customerId, CreatePublishersBusinessUnitContract contract);

        /// <summary>
        /// Business unit to customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create business unit contract.</param>
        /// <returns>The method returns contract for created business unit.</returns>
        Task<PublishersBusinessUnitContract> CreateBusinessUnitAsync(int customerId, CreatePublishersBusinessUnitContract contract);

        /// <summary>
        /// Edit business unit. All values of business unit contract should be always specified.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit business unit contract.</param>
        /// <returns>The method returns contract for updated business unit.</returns>
        PublishersBusinessUnitContract EditBusinessUnit(int customerId, EditPublishersBusinessUnitContract contract);

        /// <summary>
        /// Edit business unit. All values of business unit contract should be always specified.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit business unit contract.</param>
        /// <returns>The method returns contract for updated business unit.</returns>
        Task<PublishersBusinessUnitContract> EditBusinessUnitAsync(int customerId, EditPublishersBusinessUnitContract contract);

        /// <summary>
        /// Search business units range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract for search business units.</param>
        /// <returns>The method returns the search result contract.</returns>
        SearchResultContract<PublishersBusinessUnitContract> SearchBusinessUnitsRange(int customerId, SearchPublishersBusinessUnitsContract searchContract);

        /// <summary>
        /// Search business units range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract for search business units.</param>
        /// <returns>The method returns the search result contract.</returns>
        Task<SearchResultContract<PublishersBusinessUnitContract>> SearchBusinessUnitsRangeAsync(int customerId, SearchPublishersBusinessUnitsContract searchContract);

        /// <summary>
        /// Search business unit names.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract for search business unit names.</param>
        /// <returns>The method returns business unit names by query.</returns>
        List<PublishersBusinessNameContract> SearchBusinessUnitNames(int customerId, SearchPublishersBusinessUnitNamesContract contract);

        /// <summary>
        /// Search business unit names.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract for search business unit names.</param>
        /// <returns>The method returns business unit names by query.</returns>
        Task<List<PublishersBusinessNameContract>> SearchBusinessUnitNamesAsync(int customerId, SearchPublishersBusinessUnitNamesContract contract);

        /// <summary>
        /// Get the business unit by its ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="businessUnitId">Unique business unit ID.</param>
        /// <returns>The method returns the business unit.</returns>
        PublishersBusinessUnitContract GetBusinessUnit(int customerId, int businessUnitId);

        /// <summary>
        /// Get the business unit by its ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="businessUnitId">Unique business unit ID.</param>
        /// <returns>The method returns the business unit.</returns>
        Task<PublishersBusinessUnitContract> GetBusinessUnitAsync(int customerId, int businessUnitId);

        /// <summary>
        /// Get all business units for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>The method returns list business units for customer.</returns>
        List<PublishersBusinessUnitContract> GetAllBusinessUnitsForCustomer(int customerId);

        /// <summary>
        /// Get all business units for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>The method returns list business units for customer.</returns>
        Task<List<PublishersBusinessUnitContract>> GetAllBusinessUnitsForCustomerAsync(int customerId);
    }

    public interface IPublishersBusinessesClientByContextKeyApiMethods : IPublishersBusinessesClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersBusinessesClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersBusinessesClient : IPublishersBusinessesClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersBusinessesClient, IPublishersBusinessesClientForUser, IPublishersBusinessesClientForOrganization>
    {
    }

    public interface IPublishersBusinessesClientForUser : IPublishersBusinessesClientByContextKeyApiMethods, IClientByContext<IPublishersBusinessesClientForUser, IPublishersBusinessesClientForOrganization>
    {
    }

    public interface IPublishersBusinessesClientForOrganization : IPublishersBusinessesClientByOrganizationApiMethods
    {
    }

    public partial class PublishersBusinessesClient : BaseClient<IPublishersBusinessesClient, IPublishersBusinessesClientForUser, IPublishersBusinessesClientForOrganization, PublishersBusinessesClient>, IPublishersBusinessesClient, IPublishersBusinessesClientForUser, IPublishersBusinessesClientForOrganization
    {
        /// <summary>
        /// Business unit to customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create business unit contract.</param>
        /// <returns>The method returns contract for created business unit.</returns>
        public PublishersBusinessUnitContract CreateBusinessUnit(int customerId, CreatePublishersBusinessUnitContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersBusinessUnitContract>(request);
        }

        /// <summary>
        /// Business unit to customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create business unit contract.</param>
        /// <returns>The method returns contract for created business unit.</returns>
        public async Task<PublishersBusinessUnitContract> CreateBusinessUnitAsync(int customerId, CreatePublishersBusinessUnitContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersBusinessUnitContract>(request);
        }

        /// <summary>
        /// Edit business unit. All values of business unit contract should be always specified.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit business unit contract.</param>
        /// <returns>The method returns contract for updated business unit.</returns>
        public PublishersBusinessUnitContract EditBusinessUnit(int customerId, EditPublishersBusinessUnitContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersBusinessUnitContract>(request);
        }

        /// <summary>
        /// Edit business unit. All values of business unit contract should be always specified.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit business unit contract.</param>
        /// <returns>The method returns contract for updated business unit.</returns>
        public async Task<PublishersBusinessUnitContract> EditBusinessUnitAsync(int customerId, EditPublishersBusinessUnitContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersBusinessUnitContract>(request);
        }

        /// <summary>
        /// Search business units range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract for search business units.</param>
        /// <returns>The method returns the search result contract.</returns>
        public SearchResultContract<PublishersBusinessUnitContract> SearchBusinessUnitsRange(int customerId, SearchPublishersBusinessUnitsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}/search-businesses-units-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<PublishersBusinessUnitContract>>(request);
        }

        /// <summary>
        /// Search business units range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract for search business units.</param>
        /// <returns>The method returns the search result contract.</returns>
        public async Task<SearchResultContract<PublishersBusinessUnitContract>> SearchBusinessUnitsRangeAsync(int customerId, SearchPublishersBusinessUnitsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}/search-businesses-units-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<PublishersBusinessUnitContract>>(request);
        }

        /// <summary>
        /// Search business unit names.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract for search business unit names.</param>
        /// <returns>The method returns business unit names by query.</returns>
        public List<PublishersBusinessNameContract> SearchBusinessUnitNames(int customerId, SearchPublishersBusinessUnitNamesContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}/search-businesses-unit-names",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PublishersBusinessNameContract>>(request);
        }

        /// <summary>
        /// Search business unit names.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract for search business unit names.</param>
        /// <returns>The method returns business unit names by query.</returns>
        public async Task<List<PublishersBusinessNameContract>> SearchBusinessUnitNamesAsync(int customerId, SearchPublishersBusinessUnitNamesContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}/search-businesses-unit-names",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PublishersBusinessNameContract>>(request);
        }

        /// <summary>
        /// Get the business unit by its ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="businessUnitId">Unique business unit ID.</param>
        /// <returns>The method returns the business unit.</returns>
        public PublishersBusinessUnitContract GetBusinessUnit(int customerId, int businessUnitId)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}/{businessUnitId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublishersBusinessUnitContract>(request);
        }

        /// <summary>
        /// Get the business unit by its ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="businessUnitId">Unique business unit ID.</param>
        /// <returns>The method returns the business unit.</returns>
        public async Task<PublishersBusinessUnitContract> GetBusinessUnitAsync(int customerId, int businessUnitId)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}/{businessUnitId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublishersBusinessUnitContract>(request);
        }

        /// <summary>
        /// Get all business units for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>The method returns list business units for customer.</returns>
        public List<PublishersBusinessUnitContract> GetAllBusinessUnitsForCustomer(int customerId)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PublishersBusinessUnitContract>>(request);
        }

        /// <summary>
        /// Get all business units for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>The method returns list business units for customer.</returns>
        public async Task<List<PublishersBusinessUnitContract>> GetAllBusinessUnitsForCustomerAsync(int customerId)
        {
            var request = new RequestData
            {
                Url = $"publishers/businesses/{customerId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PublishersBusinessUnitContract>>(request);
        }
    }

    public interface IPublishersCustomDividendsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create custom dividend.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom dividend contract.</param>
        /// <returns>Created custom dividend.</returns>
        PublishersCustomDividendContract CreateCustomDividend(int customerId, CreatePublishersCustomDividendContract contract);

        /// <summary>
        /// Create custom dividend.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom dividend contract.</param>
        /// <returns>Created custom dividend.</returns>
        Task<PublishersCustomDividendContract> CreateCustomDividendAsync(int customerId, CreatePublishersCustomDividendContract contract);

        /// <summary>
        /// Edit custom dividend. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomDividendId. This field is a identifier of a custom dividend. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom dividend contract.</param>
        /// <returns>The method returns contract for updated custom dividend.</returns>
        PublishersCustomDividendContract EditCustomDividend(int customerId, EditPublishersCustomDividendContract contract);

        /// <summary>
        /// Edit custom dividend. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomDividendId. This field is a identifier of a custom dividend. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom dividend contract.</param>
        /// <returns>The method returns contract for updated custom dividend.</returns>
        Task<PublishersCustomDividendContract> EditCustomDividendAsync(int customerId, EditPublishersCustomDividendContract contract);

        /// <summary>
        /// Delete custom dividend by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customDividendId">Unique custom dividend ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom dividend.</returns>
        void DeleteСustomDividend(int customerId, int customDividendId);

        /// <summary>
        /// Delete custom dividend by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customDividendId">Unique custom dividend ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom dividend.</returns>
        Task DeleteСustomDividendAsync(int customerId, int customDividendId);

        /// <summary>
        /// Search custom dividends range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom dividends.</param>
        /// <returns>The method returns the search result contract.</returns>
        SearchResultContract<PublishersCustomDividendContract> SearchСustomDividendsRange(int customerId, SearchPublishersCustomDividendsContract searchContract);

        /// <summary>
        /// Search custom dividends range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom dividends.</param>
        /// <returns>The method returns the search result contract.</returns>
        Task<SearchResultContract<PublishersCustomDividendContract>> SearchСustomDividendsRangeAsync(int customerId, SearchPublishersCustomDividendsContract searchContract);
    }

    public interface IPublishersCustomDividendsClientByContextKeyApiMethods : IPublishersCustomDividendsClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersCustomDividendsClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersCustomDividendsClient : IPublishersCustomDividendsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersCustomDividendsClient, IPublishersCustomDividendsClientForUser, IPublishersCustomDividendsClientForOrganization>
    {
    }

    public interface IPublishersCustomDividendsClientForUser : IPublishersCustomDividendsClientByContextKeyApiMethods, IClientByContext<IPublishersCustomDividendsClientForUser, IPublishersCustomDividendsClientForOrganization>
    {
    }

    public interface IPublishersCustomDividendsClientForOrganization : IPublishersCustomDividendsClientByOrganizationApiMethods
    {
    }

    public partial class PublishersCustomDividendsClient : BaseClient<IPublishersCustomDividendsClient, IPublishersCustomDividendsClientForUser, IPublishersCustomDividendsClientForOrganization, PublishersCustomDividendsClient>, IPublishersCustomDividendsClient, IPublishersCustomDividendsClientForUser, IPublishersCustomDividendsClientForOrganization
    {
        /// <summary>
        /// Create custom dividend.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom dividend contract.</param>
        /// <returns>Created custom dividend.</returns>
        public PublishersCustomDividendContract CreateCustomDividend(int customerId, CreatePublishersCustomDividendContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-dividends/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersCustomDividendContract>(request);
        }

        /// <summary>
        /// Create custom dividend.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom dividend contract.</param>
        /// <returns>Created custom dividend.</returns>
        public async Task<PublishersCustomDividendContract> CreateCustomDividendAsync(int customerId, CreatePublishersCustomDividendContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-dividends/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersCustomDividendContract>(request);
        }

        /// <summary>
        /// Edit custom dividend. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomDividendId. This field is a identifier of a custom dividend. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom dividend contract.</param>
        /// <returns>The method returns contract for updated custom dividend.</returns>
        public PublishersCustomDividendContract EditCustomDividend(int customerId, EditPublishersCustomDividendContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-dividends/{customerId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersCustomDividendContract>(request);
        }

        /// <summary>
        /// Edit custom dividend. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomDividendId. This field is a identifier of a custom dividend. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom dividend contract.</param>
        /// <returns>The method returns contract for updated custom dividend.</returns>
        public async Task<PublishersCustomDividendContract> EditCustomDividendAsync(int customerId, EditPublishersCustomDividendContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-dividends/{customerId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersCustomDividendContract>(request);
        }

        /// <summary>
        /// Delete custom dividend by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customDividendId">Unique custom dividend ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom dividend.</returns>
        public void DeleteСustomDividend(int customerId, int customDividendId)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-dividends/{customerId}/{customDividendId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete custom dividend by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customDividendId">Unique custom dividend ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom dividend.</returns>
        public async Task DeleteСustomDividendAsync(int customerId, int customDividendId)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-dividends/{customerId}/{customDividendId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Search custom dividends range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom dividends.</param>
        /// <returns>The method returns the search result contract.</returns>
        public SearchResultContract<PublishersCustomDividendContract> SearchСustomDividendsRange(int customerId, SearchPublishersCustomDividendsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-dividends/{customerId}/search-custom-dividends-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<PublishersCustomDividendContract>>(request);
        }

        /// <summary>
        /// Search custom dividends range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom dividends.</param>
        /// <returns>The method returns the search result contract.</returns>
        public async Task<SearchResultContract<PublishersCustomDividendContract>> SearchСustomDividendsRangeAsync(int customerId, SearchPublishersCustomDividendsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-dividends/{customerId}/search-custom-dividends-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<PublishersCustomDividendContract>>(request);
        }
    }

    public interface IPublishersCustomPricesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create custom price.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom price contract.</param>
        /// <returns>Created custom price contract.</returns>
        PublishersCustomPriceContract CreateCustomPrice(int customerId, CreatePublishersCustomPriceContract contract);

        /// <summary>
        /// Create custom price.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom price contract.</param>
        /// <returns>Created custom price contract.</returns>
        Task<PublishersCustomPriceContract> CreateCustomPriceAsync(int customerId, CreatePublishersCustomPriceContract contract);

        List<PublishersCustomPriceContract> CreateCustomPrices(int customerId, List<CreatePublishersCustomPriceContract> prices);

        Task<List<PublishersCustomPriceContract>> CreateCustomPricesAsync(int customerId, List<CreatePublishersCustomPriceContract> prices);

        /// <summary>
        /// Edit custom price. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomPriceId. This field is a identifier of a custom price. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom price contract.</param>
        /// <returns>The method returns contract for updated custom price.</returns>
        PublishersCustomPriceContract EditCustomPrice(int customerId, EditPublishersCustomPriceContract contract);

        /// <summary>
        /// Edit custom price. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomPriceId. This field is a identifier of a custom price. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom price contract.</param>
        /// <returns>The method returns contract for updated custom price.</returns>
        Task<PublishersCustomPriceContract> EditCustomPriceAsync(int customerId, EditPublishersCustomPriceContract contract);

        /// <summary>
        /// Get custom price by the custom price ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customPriceId">Unique custom price ID.</param>
        /// <returns>The method returns the custom price contract.</returns>
        PublishersCustomPriceContract GetCustomPrice(int customerId, int customPriceId);

        /// <summary>
        /// Get custom price by the custom price ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customPriceId">Unique custom price ID.</param>
        /// <returns>The method returns the custom price contract.</returns>
        Task<PublishersCustomPriceContract> GetCustomPriceAsync(int customerId, int customPriceId);

        /// <summary>
        /// Get custom price for custom symbol on a specific trade date.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customSymbolId">Custom symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-11)</param>
        /// <returns>The method returns the contract of custom price.</returns>
        PublishersCustomPriceContract GetLatestCustomPrice(int customerId, int customSymbolId, DateTime tradeDate);

        /// <summary>
        /// Get custom price for custom symbol on a specific trade date.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customSymbolId">Custom symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-11)</param>
        /// <returns>The method returns the contract of custom price.</returns>
        Task<PublishersCustomPriceContract> GetLatestCustomPriceAsync(int customerId, int customSymbolId, DateTime tradeDate);

        /// <summary>
        /// Delete custom price by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customPriceId">Unique custom price ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom price.</returns>
        void DeleteCustomPrice(int customerId, int customPriceId);

        /// <summary>
        /// Delete custom price by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customPriceId">Unique custom price ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom price.</returns>
        Task DeleteCustomPriceAsync(int customerId, int customPriceId);

        /// <summary>
        /// Search custom prices range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom prices.</param>
        /// <returns>The method returns the search result contract.</returns>
        SearchResultContract<PublishersCustomPriceContract> SearchСustomPricesRange(int customerId, SearchPublishersCustomPricesContract searchContract);

        /// <summary>
        /// Search custom prices range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom prices.</param>
        /// <returns>The method returns the search result contract.</returns>
        Task<SearchResultContract<PublishersCustomPriceContract>> SearchСustomPricesRangeAsync(int customerId, SearchPublishersCustomPricesContract searchContract);
    }

    public interface IPublishersCustomPricesClientByContextKeyApiMethods : IPublishersCustomPricesClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersCustomPricesClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersCustomPricesClient : IPublishersCustomPricesClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersCustomPricesClient, IPublishersCustomPricesClientForUser, IPublishersCustomPricesClientForOrganization>
    {
    }

    public interface IPublishersCustomPricesClientForUser : IPublishersCustomPricesClientByContextKeyApiMethods, IClientByContext<IPublishersCustomPricesClientForUser, IPublishersCustomPricesClientForOrganization>
    {
    }

    public interface IPublishersCustomPricesClientForOrganization : IPublishersCustomPricesClientByOrganizationApiMethods
    {
    }

    public partial class PublishersCustomPricesClient : BaseClient<IPublishersCustomPricesClient, IPublishersCustomPricesClientForUser, IPublishersCustomPricesClientForOrganization, PublishersCustomPricesClient>, IPublishersCustomPricesClient, IPublishersCustomPricesClientForUser, IPublishersCustomPricesClientForOrganization
    {
        /// <summary>
        /// Create custom price.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom price contract.</param>
        /// <returns>Created custom price contract.</returns>
        public PublishersCustomPriceContract CreateCustomPrice(int customerId, CreatePublishersCustomPriceContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersCustomPriceContract>(request);
        }

        /// <summary>
        /// Create custom price.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom price contract.</param>
        /// <returns>Created custom price contract.</returns>
        public async Task<PublishersCustomPriceContract> CreateCustomPriceAsync(int customerId, CreatePublishersCustomPriceContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersCustomPriceContract>(request);
        }

        public List<PublishersCustomPriceContract> CreateCustomPrices(int customerId, List<CreatePublishersCustomPriceContract> prices)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(prices);

            return PerformRequest<List<PublishersCustomPriceContract>>(request);
        }

        public async Task<List<PublishersCustomPriceContract>> CreateCustomPricesAsync(int customerId, List<CreatePublishersCustomPriceContract> prices)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(prices);

            return await PerformRequestAsync<List<PublishersCustomPriceContract>>(request);
        }

        /// <summary>
        /// Edit custom price. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomPriceId. This field is a identifier of a custom price. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom price contract.</param>
        /// <returns>The method returns contract for updated custom price.</returns>
        public PublishersCustomPriceContract EditCustomPrice(int customerId, EditPublishersCustomPriceContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersCustomPriceContract>(request);
        }

        /// <summary>
        /// Edit custom price. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomPriceId. This field is a identifier of a custom price. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom price contract.</param>
        /// <returns>The method returns contract for updated custom price.</returns>
        public async Task<PublishersCustomPriceContract> EditCustomPriceAsync(int customerId, EditPublishersCustomPriceContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersCustomPriceContract>(request);
        }

        /// <summary>
        /// Get custom price by the custom price ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customPriceId">Unique custom price ID.</param>
        /// <returns>The method returns the custom price contract.</returns>
        public PublishersCustomPriceContract GetCustomPrice(int customerId, int customPriceId)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/{customPriceId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublishersCustomPriceContract>(request);
        }

        /// <summary>
        /// Get custom price by the custom price ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customPriceId">Unique custom price ID.</param>
        /// <returns>The method returns the custom price contract.</returns>
        public async Task<PublishersCustomPriceContract> GetCustomPriceAsync(int customerId, int customPriceId)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/{customPriceId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublishersCustomPriceContract>(request);
        }

        /// <summary>
        /// Get custom price for custom symbol on a specific trade date.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customSymbolId">Custom symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-11)</param>
        /// <returns>The method returns the contract of custom price.</returns>
        public PublishersCustomPriceContract GetLatestCustomPrice(int customerId, int customSymbolId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/{customSymbolId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublishersCustomPriceContract>(request);
        }

        /// <summary>
        /// Get custom price for custom symbol on a specific trade date.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customSymbolId">Custom symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-11)</param>
        /// <returns>The method returns the contract of custom price.</returns>
        public async Task<PublishersCustomPriceContract> GetLatestCustomPriceAsync(int customerId, int customSymbolId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/{customSymbolId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublishersCustomPriceContract>(request);
        }

        /// <summary>
        /// Delete custom price by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customPriceId">Unique custom price ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom price.</returns>
        public void DeleteCustomPrice(int customerId, int customPriceId)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/{customPriceId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete custom price by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customPriceId">Unique custom price ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom price.</returns>
        public async Task DeleteCustomPriceAsync(int customerId, int customPriceId)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/{customPriceId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Search custom prices range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom prices.</param>
        /// <returns>The method returns the search result contract.</returns>
        public SearchResultContract<PublishersCustomPriceContract> SearchСustomPricesRange(int customerId, SearchPublishersCustomPricesContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/search-custom-prices-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<PublishersCustomPriceContract>>(request);
        }

        /// <summary>
        /// Search custom prices range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom prices.</param>
        /// <returns>The method returns the search result contract.</returns>
        public async Task<SearchResultContract<PublishersCustomPriceContract>> SearchСustomPricesRangeAsync(int customerId, SearchPublishersCustomPricesContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-prices/{customerId}/search-custom-prices-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<PublishersCustomPriceContract>>(request);
        }
    }

    public interface IPublishersCustomSymbolsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create custom symbol.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom symbol contract.</param>
        /// <returns>Created custom symbol.</returns>
        PublishersCustomSymbolContract CreateCustomSymbol(int customerId, CreatePublishersCustomSymbolContract contract);

        /// <summary>
        /// Create custom symbol.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom symbol contract.</param>
        /// <returns>Created custom symbol.</returns>
        Task<PublishersCustomSymbolContract> CreateCustomSymbolAsync(int customerId, CreatePublishersCustomSymbolContract contract);

        /// <summary>
        /// Get user’s custom symbol by the custom symbol ID.
        /// </summary>
        /// <param name="customerId">Owner of custom symbol.</param>
        /// <param name="customSymbolId">Unique custom symbol ID.</param>
        /// <returns>The method returns the custom symbol.</returns>
        PublishersCustomSymbolContract GetCustomSymbol(int customerId, int customSymbolId);

        /// <summary>
        /// Get user’s custom symbol by the custom symbol ID.
        /// </summary>
        /// <param name="customerId">Owner of custom symbol.</param>
        /// <param name="customSymbolId">Unique custom symbol ID.</param>
        /// <returns>The method returns the custom symbol.</returns>
        Task<PublishersCustomSymbolContract> GetCustomSymbolAsync(int customerId, int customSymbolId);

        /// <summary>
        /// Edit custom symbol. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomSymbolId. This field is a identifier of a custom symbol. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom symbol contract.</param>
        /// <returns>The method returns contract for updated custom symbol.</returns>
        PublishersCustomSymbolContract EditCustomSymbol(int customerId, EditPublishersCustomSymbolContract contract);

        /// <summary>
        /// Edit custom symbol. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomSymbolId. This field is a identifier of a custom symbol. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom symbol contract.</param>
        /// <returns>The method returns contract for updated custom symbol.</returns>
        Task<PublishersCustomSymbolContract> EditCustomSymbolAsync(int customerId, EditPublishersCustomSymbolContract contract);

        /// <summary>
        /// Delete custom symbol by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customSymbolId">Unique custom symbol ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom symbol.</returns>
        void DeleteСustomSymbol(int customerId, int customSymbolId);

        /// <summary>
        /// Delete custom symbol by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customSymbolId">Unique custom symbol ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom symbol.</returns>
        Task DeleteСustomSymbolAsync(int customerId, int customSymbolId);

        /// <summary>
        /// Search custom symbols range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom symbols.</param>
        /// <returns>The method returns the search result contract.</returns>
        SearchResultContract<PublishersCustomSymbolContract> SearchСustomSymbolsRange(int customerId, SearchPublishersCustomSymbolsContract searchContract);

        /// <summary>
        /// Search custom symbols range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom symbols.</param>
        /// <returns>The method returns the search result contract.</returns>
        Task<SearchResultContract<PublishersCustomSymbolContract>> SearchСustomSymbolsRangeAsync(int customerId, SearchPublishersCustomSymbolsContract searchContract);

        /// <summary>
        /// Search all custom symbols for customer by a symbol ticker.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract to search custom symbols.</param>
        /// <returns>The method returns symbol contracts.</returns>
        IList<PublishersCustomSymbolContract> SearchСustomSymbolsByTicker(int customerId, SearchPublishersCustomSymbolsByTickerContract contract);

        /// <summary>
        /// Search all custom symbols for customer by a symbol ticker.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract to search custom symbols.</param>
        /// <returns>The method returns symbol contracts.</returns>
        Task<IList<PublishersCustomSymbolContract>> SearchСustomSymbolsByTickerAsync(int customerId, SearchPublishersCustomSymbolsByTickerContract contract);
    }

    public interface IPublishersCustomSymbolsClientByContextKeyApiMethods : IPublishersCustomSymbolsClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersCustomSymbolsClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersCustomSymbolsClient : IPublishersCustomSymbolsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersCustomSymbolsClient, IPublishersCustomSymbolsClientForUser, IPublishersCustomSymbolsClientForOrganization>
    {
    }

    public interface IPublishersCustomSymbolsClientForUser : IPublishersCustomSymbolsClientByContextKeyApiMethods, IClientByContext<IPublishersCustomSymbolsClientForUser, IPublishersCustomSymbolsClientForOrganization>
    {
    }

    public interface IPublishersCustomSymbolsClientForOrganization : IPublishersCustomSymbolsClientByOrganizationApiMethods
    {
    }

    public partial class PublishersCustomSymbolsClient : BaseClient<IPublishersCustomSymbolsClient, IPublishersCustomSymbolsClientForUser, IPublishersCustomSymbolsClientForOrganization, PublishersCustomSymbolsClient>, IPublishersCustomSymbolsClient, IPublishersCustomSymbolsClientForUser, IPublishersCustomSymbolsClientForOrganization
    {
        /// <summary>
        /// Create custom symbol.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom symbol contract.</param>
        /// <returns>Created custom symbol.</returns>
        public PublishersCustomSymbolContract CreateCustomSymbol(int customerId, CreatePublishersCustomSymbolContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersCustomSymbolContract>(request);
        }

        /// <summary>
        /// Create custom symbol.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create custom symbol contract.</param>
        /// <returns>Created custom symbol.</returns>
        public async Task<PublishersCustomSymbolContract> CreateCustomSymbolAsync(int customerId, CreatePublishersCustomSymbolContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersCustomSymbolContract>(request);
        }

        /// <summary>
        /// Get user’s custom symbol by the custom symbol ID.
        /// </summary>
        /// <param name="customerId">Owner of custom symbol.</param>
        /// <param name="customSymbolId">Unique custom symbol ID.</param>
        /// <returns>The method returns the custom symbol.</returns>
        public PublishersCustomSymbolContract GetCustomSymbol(int customerId, int customSymbolId)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/{customSymbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublishersCustomSymbolContract>(request);
        }

        /// <summary>
        /// Get user’s custom symbol by the custom symbol ID.
        /// </summary>
        /// <param name="customerId">Owner of custom symbol.</param>
        /// <param name="customSymbolId">Unique custom symbol ID.</param>
        /// <returns>The method returns the custom symbol.</returns>
        public async Task<PublishersCustomSymbolContract> GetCustomSymbolAsync(int customerId, int customSymbolId)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/{customSymbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublishersCustomSymbolContract>(request);
        }

        /// <summary>
        /// Edit custom symbol. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomSymbolId. This field is a identifier of a custom symbol. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom symbol contract.</param>
        /// <returns>The method returns contract for updated custom symbol.</returns>
        public PublishersCustomSymbolContract EditCustomSymbol(int customerId, EditPublishersCustomSymbolContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersCustomSymbolContract>(request);
        }

        /// <summary>
        /// Edit custom symbol. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except CustomSymbolId. This field is a identifier of a custom symbol. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit custom symbol contract.</param>
        /// <returns>The method returns contract for updated custom symbol.</returns>
        public async Task<PublishersCustomSymbolContract> EditCustomSymbolAsync(int customerId, EditPublishersCustomSymbolContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersCustomSymbolContract>(request);
        }

        /// <summary>
        /// Delete custom symbol by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customSymbolId">Unique custom symbol ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom symbol.</returns>
        public void DeleteСustomSymbol(int customerId, int customSymbolId)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/{customSymbolId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete custom symbol by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="customSymbolId">Unique custom symbol ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the custom symbol.</returns>
        public async Task DeleteСustomSymbolAsync(int customerId, int customSymbolId)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/{customSymbolId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Search custom symbols range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom symbols.</param>
        /// <returns>The method returns the search result contract.</returns>
        public SearchResultContract<PublishersCustomSymbolContract> SearchСustomSymbolsRange(int customerId, SearchPublishersCustomSymbolsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/search-custom-symbols-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<PublishersCustomSymbolContract>>(request);
        }

        /// <summary>
        /// Search custom symbols range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search custom symbols.</param>
        /// <returns>The method returns the search result contract.</returns>
        public async Task<SearchResultContract<PublishersCustomSymbolContract>> SearchСustomSymbolsRangeAsync(int customerId, SearchPublishersCustomSymbolsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/search-custom-symbols-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<PublishersCustomSymbolContract>>(request);
        }

        /// <summary>
        /// Search all custom symbols for customer by a symbol ticker.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract to search custom symbols.</param>
        /// <returns>The method returns symbol contracts.</returns>
        public IList<PublishersCustomSymbolContract> SearchСustomSymbolsByTicker(int customerId, SearchPublishersCustomSymbolsByTickerContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/search-custom-symbols-by-ticker",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<IList<PublishersCustomSymbolContract>>(request);
        }

        /// <summary>
        /// Search all custom symbols for customer by a symbol ticker.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract to search custom symbols.</param>
        /// <returns>The method returns symbol contracts.</returns>
        public async Task<IList<PublishersCustomSymbolContract>> SearchСustomSymbolsByTickerAsync(int customerId, SearchPublishersCustomSymbolsByTickerContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/custom-symbols/{customerId}/search-custom-symbols-by-ticker",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<IList<PublishersCustomSymbolContract>>(request);
        }
    }

    public interface IPublishersDividendsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create dividend.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create dividend contract.</param>
        /// <returns>Created dividend.</returns>
        PublishersDividendContract CreateDividend(int customerId, CreatePublishersDividendContract contract);

        /// <summary>
        /// Create dividend.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create dividend contract.</param>
        /// <returns>Created dividend.</returns>
        Task<PublishersDividendContract> CreateDividendAsync(int customerId, CreatePublishersDividendContract contract);

        /// <summary>
        /// Get dividend by id.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="dividendId">Unique dividend ID.</param>
        /// <returns>The method returns the dividend.</returns>
        PublishersDividendContract GetDividend(int customerId, int dividendId);

        /// <summary>
        /// Get dividend by id.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="dividendId">Unique dividend ID.</param>
        /// <returns>The method returns the dividend.</returns>
        Task<PublishersDividendContract> GetDividendAsync(int customerId, int dividendId);

        /// <summary>
        /// Edit dividend. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except DividendId. This field is an identifier of the dividend. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit dividend contract.</param>
        /// <returns>The method returns contract for updated dividend.</returns>
        PublishersDividendContract EditDividend(int customerId, EditPublishersDividendContract contract);

        /// <summary>
        /// Edit dividend. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except DividendId. This field is an identifier of the dividend. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit dividend contract.</param>
        /// <returns>The method returns contract for updated dividend.</returns>
        Task<PublishersDividendContract> EditDividendAsync(int customerId, EditPublishersDividendContract contract);

        /// <summary>
        /// Delete dividend by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="dividendId">Unique dividend ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the dividend.</returns>
        void DeleteDividend(int customerId, int dividendId);

        /// <summary>
        /// Delete dividend by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="dividendId">Unique dividend ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the dividend.</returns>
        Task DeleteDividendAsync(int customerId, int dividendId);

        /// <summary>
        /// Search dividends range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search dividends.</param>
        /// <returns>The method returns the search result contract.</returns>
        SearchResultContract<PublishersDividendContract> SearchDividendsRange(int customerId, SearchPublishersDividendsContract searchContract);

        /// <summary>
        /// Search dividends range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search dividends.</param>
        /// <returns>The method returns the search result contract.</returns>
        Task<SearchResultContract<PublishersDividendContract>> SearchDividendsRangeAsync(int customerId, SearchPublishersDividendsContract searchContract);
    }

    public interface IPublishersDividendsClientByContextKeyApiMethods : IPublishersDividendsClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersDividendsClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersDividendsClient : IPublishersDividendsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersDividendsClient, IPublishersDividendsClientForUser, IPublishersDividendsClientForOrganization>
    {
    }

    public interface IPublishersDividendsClientForUser : IPublishersDividendsClientByContextKeyApiMethods, IClientByContext<IPublishersDividendsClientForUser, IPublishersDividendsClientForOrganization>
    {
    }

    public interface IPublishersDividendsClientForOrganization : IPublishersDividendsClientByOrganizationApiMethods
    {
    }

    public partial class PublishersDividendsClient : BaseClient<IPublishersDividendsClient, IPublishersDividendsClientForUser, IPublishersDividendsClientForOrganization, PublishersDividendsClient>, IPublishersDividendsClient, IPublishersDividendsClientForUser, IPublishersDividendsClientForOrganization
    {
        /// <summary>
        /// Create dividend.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create dividend contract.</param>
        /// <returns>Created dividend.</returns>
        public PublishersDividendContract CreateDividend(int customerId, CreatePublishersDividendContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/dividends/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersDividendContract>(request);
        }

        /// <summary>
        /// Create dividend.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create dividend contract.</param>
        /// <returns>Created dividend.</returns>
        public async Task<PublishersDividendContract> CreateDividendAsync(int customerId, CreatePublishersDividendContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/dividends/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersDividendContract>(request);
        }

        /// <summary>
        /// Get dividend by id.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="dividendId">Unique dividend ID.</param>
        /// <returns>The method returns the dividend.</returns>
        public PublishersDividendContract GetDividend(int customerId, int dividendId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/dividends/{dividendId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublishersDividendContract>(request);
        }

        /// <summary>
        /// Get dividend by id.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="dividendId">Unique dividend ID.</param>
        /// <returns>The method returns the dividend.</returns>
        public async Task<PublishersDividendContract> GetDividendAsync(int customerId, int dividendId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/dividends/{dividendId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublishersDividendContract>(request);
        }

        /// <summary>
        /// Edit dividend. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except DividendId. This field is an identifier of the dividend. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit dividend contract.</param>
        /// <returns>The method returns contract for updated dividend.</returns>
        public PublishersDividendContract EditDividend(int customerId, EditPublishersDividendContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/dividends/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersDividendContract>(request);
        }

        /// <summary>
        /// Edit dividend. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except DividendId. This field is an identifier of the dividend. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit dividend contract.</param>
        /// <returns>The method returns contract for updated dividend.</returns>
        public async Task<PublishersDividendContract> EditDividendAsync(int customerId, EditPublishersDividendContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/dividends/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersDividendContract>(request);
        }

        /// <summary>
        /// Delete dividend by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="dividendId">Unique dividend ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the dividend.</returns>
        public void DeleteDividend(int customerId, int dividendId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/dividends/{dividendId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete dividend by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="dividendId">Unique dividend ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the dividend.</returns>
        public async Task DeleteDividendAsync(int customerId, int dividendId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/dividends/{dividendId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Search dividends range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search dividends.</param>
        /// <returns>The method returns the search result contract.</returns>
        public SearchResultContract<PublishersDividendContract> SearchDividendsRange(int customerId, SearchPublishersDividendsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/dividends/search-dividends-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<PublishersDividendContract>>(request);
        }

        /// <summary>
        /// Search dividends range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search dividends.</param>
        /// <returns>The method returns the search result contract.</returns>
        public async Task<SearchResultContract<PublishersDividendContract>> SearchDividendsRangeAsync(int customerId, SearchPublishersDividendsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/dividends/search-dividends-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<PublishersDividendContract>>(request);
        }
    }

    public interface IPublishersPortfoliosClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create portfolio.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create portfolio contract.</param>
        /// <returns>The method returns information about the newly created portfolio.</returns>
        PublishersPortfolioContract CreatePortfolio(int customerId, CreatePublishersPortfolioContract contract);

        /// <summary>
        /// Create portfolio.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create portfolio contract.</param>
        /// <returns>The method returns information about the newly created portfolio.</returns>
        Task<PublishersPortfolioContract> CreatePortfolioAsync(int customerId, CreatePublishersPortfolioContract contract);

        /// <summary>
        /// Edit portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed portfolio.</returns>
        PublishersPortfolioContract EditPortfolio(int customerId, int portfolioId, EditPublishersPortfolioContract contract);

        /// <summary>
        /// Edit portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed portfolio.</returns>
        Task<PublishersPortfolioContract> EditPortfolioAsync(int customerId, int portfolioId, EditPublishersPortfolioContract contract);

        void DeletePortfoliosByIds(int customerId, List<int> portfolioIds);

        Task DeletePortfoliosByIdsAsync(int customerId, List<int> portfolioIds);

        /// <summary>
        /// Get customer's portfolio by the portfolio Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the portfolio data.</returns>
        PublishersPortfolioContract GetPortfolio(int customerId, int portfolioId);

        /// <summary>
        /// Get customer's portfolio by the portfolio Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the portfolio data.</returns>
        Task<PublishersPortfolioContract> GetPortfolioAsync(int customerId, int portfolioId);

        /// <summary>
        /// Get the list of customer's portfolios.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <returns>The method returns the portfolio list.</returns>
        List<PublishersPortfolioContract> GetСustomerPortfolios(int customerId);

        /// <summary>
        /// Get the list of customer's portfolios.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <returns>The method returns the portfolio list.</returns>
        Task<List<PublishersPortfolioContract>> GetСustomerPortfoliosAsync(int customerId);

        /// <summary>
        /// Get specific portfolio parameters such as average gain among of all positions, percent of wins, available cash.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the statistic portfolio data.</returns>
        PublishersPortfolioStatsContract GetPortfolioStats(int customerId, int portfolioId);

        /// <summary>
        /// Get specific portfolio parameters such as average gain among of all positions, percent of wins, available cash.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the statistic portfolio data.</returns>
        Task<PublishersPortfolioStatsContract> GetPortfolioStatsAsync(int customerId, int portfolioId);

        /// <summary>
        /// Update specific portfolio parameters such as average gain among of all positions, percent of wins, available cash.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the updated statistic portfolio data.</returns>
        PublishersPortfolioStatsContract UpdatePortfolioStats(int customerId, int portfolioId);

        /// <summary>
        /// Update specific portfolio parameters such as average gain among of all positions, percent of wins, available cash.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the updated statistic portfolio data.</returns>
        Task<PublishersPortfolioStatsContract> UpdatePortfolioStatsAsync(int customerId, int portfolioId);

        void UpdatePortfoliosStatsByCustomSymbols(int customerId, List<int> customSymbolIds);

        Task UpdatePortfoliosStatsByCustomSymbolsAsync(int customerId, List<int> customSymbolIds);

        /// <summary>
        /// Check the possibility or completeness of converting the portfolio to another currency.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Check portfolio conversion contract.</param>
        /// <returns>The method returns the result of checking.</returns>
        CheckPublishersPortfolioConversionResultContract CheckPortfolioConversion(int customerId, CheckPublishersPortfolioConversionContract contract);

        /// <summary>
        /// Check the possibility or completeness of converting the portfolio to another currency.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Check portfolio conversion contract.</param>
        /// <returns>The method returns the result of checking.</returns>
        Task<CheckPublishersPortfolioConversionResultContract> CheckPortfolioConversionAsync(int customerId, CheckPublishersPortfolioConversionContract contract);
    }

    public interface IPublishersPortfoliosClientByContextKeyApiMethods : IPublishersPortfoliosClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersPortfoliosClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersPortfoliosClient : IPublishersPortfoliosClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersPortfoliosClient, IPublishersPortfoliosClientForUser, IPublishersPortfoliosClientForOrganization>
    {
    }

    public interface IPublishersPortfoliosClientForUser : IPublishersPortfoliosClientByContextKeyApiMethods, IClientByContext<IPublishersPortfoliosClientForUser, IPublishersPortfoliosClientForOrganization>
    {
    }

    public interface IPublishersPortfoliosClientForOrganization : IPublishersPortfoliosClientByOrganizationApiMethods
    {
    }

    public partial class PublishersPortfoliosClient : BaseClient<IPublishersPortfoliosClient, IPublishersPortfoliosClientForUser, IPublishersPortfoliosClientForOrganization, PublishersPortfoliosClient>, IPublishersPortfoliosClient, IPublishersPortfoliosClientForUser, IPublishersPortfoliosClientForOrganization
    {
        /// <summary>
        /// Create portfolio.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create portfolio contract.</param>
        /// <returns>The method returns information about the newly created portfolio.</returns>
        public PublishersPortfolioContract CreatePortfolio(int customerId, CreatePublishersPortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersPortfolioContract>(request);
        }

        /// <summary>
        /// Create portfolio.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create portfolio contract.</param>
        /// <returns>The method returns information about the newly created portfolio.</returns>
        public async Task<PublishersPortfolioContract> CreatePortfolioAsync(int customerId, CreatePublishersPortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersPortfolioContract>(request);
        }

        /// <summary>
        /// Edit portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed portfolio.</returns>
        public PublishersPortfolioContract EditPortfolio(int customerId, int portfolioId, EditPublishersPortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/edit/{portfolioId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersPortfolioContract>(request);
        }

        /// <summary>
        /// Edit portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed portfolio.</returns>
        public async Task<PublishersPortfolioContract> EditPortfolioAsync(int customerId, int portfolioId, EditPublishersPortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/edit/{portfolioId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersPortfolioContract>(request);
        }

        public void DeletePortfoliosByIds(int customerId, List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/delete-portfolios-by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(portfolioIds);

            PerformRequest(request);
        }

        public async Task DeletePortfoliosByIdsAsync(int customerId, List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/delete-portfolios-by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(portfolioIds);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get customer's portfolio by the portfolio Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the portfolio data.</returns>
        public PublishersPortfolioContract GetPortfolio(int customerId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublishersPortfolioContract>(request);
        }

        /// <summary>
        /// Get customer's portfolio by the portfolio Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the portfolio data.</returns>
        public async Task<PublishersPortfolioContract> GetPortfolioAsync(int customerId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublishersPortfolioContract>(request);
        }

        /// <summary>
        /// Get the list of customer's portfolios.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <returns>The method returns the portfolio list.</returns>
        public List<PublishersPortfolioContract> GetСustomerPortfolios(int customerId)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PublishersPortfolioContract>>(request);
        }

        /// <summary>
        /// Get the list of customer's portfolios.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <returns>The method returns the portfolio list.</returns>
        public async Task<List<PublishersPortfolioContract>> GetСustomerPortfoliosAsync(int customerId)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PublishersPortfolioContract>>(request);
        }

        /// <summary>
        /// Get specific portfolio parameters such as average gain among of all positions, percent of wins, available cash.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the statistic portfolio data.</returns>
        public PublishersPortfolioStatsContract GetPortfolioStats(int customerId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/get-portfolio-stats/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublishersPortfolioStatsContract>(request);
        }

        /// <summary>
        /// Get specific portfolio parameters such as average gain among of all positions, percent of wins, available cash.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the statistic portfolio data.</returns>
        public async Task<PublishersPortfolioStatsContract> GetPortfolioStatsAsync(int customerId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/get-portfolio-stats/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublishersPortfolioStatsContract>(request);
        }

        /// <summary>
        /// Update specific portfolio parameters such as average gain among of all positions, percent of wins, available cash.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the updated statistic portfolio data.</returns>
        public PublishersPortfolioStatsContract UpdatePortfolioStats(int customerId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/update-portfolio-stats/{portfolioId}",
                Method = HttpMethod.Put,
            };

            return PerformRequest<PublishersPortfolioStatsContract>(request);
        }

        /// <summary>
        /// Update specific portfolio parameters such as average gain among of all positions, percent of wins, available cash.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the updated statistic portfolio data.</returns>
        public async Task<PublishersPortfolioStatsContract> UpdatePortfolioStatsAsync(int customerId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/update-portfolio-stats/{portfolioId}",
                Method = HttpMethod.Put,
            };

            return await PerformRequestAsync<PublishersPortfolioStatsContract>(request);
        }

        public void UpdatePortfoliosStatsByCustomSymbols(int customerId, List<int> customSymbolIds)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/update-portfolios-stats-by-custom-symbols",
                Method = HttpMethod.Put,
            };

            request.SetBody(customSymbolIds);

            PerformRequest(request);
        }

        public async Task UpdatePortfoliosStatsByCustomSymbolsAsync(int customerId, List<int> customSymbolIds)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/update-portfolios-stats-by-custom-symbols",
                Method = HttpMethod.Put,
            };

            request.SetBody(customSymbolIds);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Check the possibility or completeness of converting the portfolio to another currency.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Check portfolio conversion contract.</param>
        /// <returns>The method returns the result of checking.</returns>
        public CheckPublishersPortfolioConversionResultContract CheckPortfolioConversion(int customerId, CheckPublishersPortfolioConversionContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/check-portfolio-conversion",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<CheckPublishersPortfolioConversionResultContract>(request);
        }

        /// <summary>
        /// Check the possibility or completeness of converting the portfolio to another currency.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Check portfolio conversion contract.</param>
        /// <returns>The method returns the result of checking.</returns>
        public async Task<CheckPublishersPortfolioConversionResultContract> CheckPortfolioConversionAsync(int customerId, CheckPublishersPortfolioConversionContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/portfolios/{customerId}/check-portfolio-conversion",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<CheckPublishersPortfolioConversionResultContract>(request);
        }
    }

    public interface IPublishersPubCodesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create pub code for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create pub code contract.</param>
        /// <returns>The method returns created pub code contract.</returns>
        PublishersPubCodeContract CreatePubCode(int customerId, CreatePublishersPubCodeContract contract);

        /// <summary>
        /// Create pub code for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create pub code contract.</param>
        /// <returns>The method returns created pub code contract.</returns>
        Task<PublishersPubCodeContract> CreatePubCodeAsync(int customerId, CreatePublishersPubCodeContract contract);

        /// <summary>
        /// Search pub code categories.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract for search pub code categories.</param>
        /// <returns>The method returns pub code categories by query.</returns>
        List<PublishersPubCodeCategoryContract> SearchPubCodeCategories(int customerId, SearchPublishersPubCodeCategoriesContract contract);

        /// <summary>
        /// Search pub code categories.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract for search pub code categories.</param>
        /// <returns>The method returns pub code categories by query.</returns>
        Task<List<PublishersPubCodeCategoryContract>> SearchPubCodeCategoriesAsync(int customerId, SearchPublishersPubCodeCategoriesContract contract);

        /// <summary>
        /// Edit pub code. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except PubCodeId. This field is a identifier of a pub code. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit pub code contract.</param>
        /// <returns>The method returns contract for updated pub code.</returns>
        PublishersPubCodeContract EditPubCode(int customerId, EditPublishersPubCodeContract contract);

        /// <summary>
        /// Edit pub code. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except PubCodeId. This field is a identifier of a pub code. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit pub code contract.</param>
        /// <returns>The method returns contract for updated pub code.</returns>
        Task<PublishersPubCodeContract> EditPubCodeAsync(int customerId, EditPublishersPubCodeContract contract);

        /// <summary>
        /// Search pub codes range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to pub codes.</param>
        /// <returns>The method returns the search result contract.</returns>
        SearchResultContract<PublishersPubCodeContract> SearchPubCodesRange(int customerId, SearchPublishersPubCodesContract searchContract);

        /// <summary>
        /// Search pub codes range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to pub codes.</param>
        /// <returns>The method returns the search result contract.</returns>
        Task<SearchResultContract<PublishersPubCodeContract>> SearchPubCodesRangeAsync(int customerId, SearchPublishersPubCodesContract searchContract);

        /// <summary>
        /// Get the pub code by its ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="pubCodeId">Unique pub code ID.</param>
        /// <returns>The method returns the pub code.</returns>
        PublishersPubCodeContract GetPubCode(int customerId, int pubCodeId);

        /// <summary>
        /// Get the pub code by its ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="pubCodeId">Unique pub code ID.</param>
        /// <returns>The method returns the pub code.</returns>
        Task<PublishersPubCodeContract> GetPubCodeAsync(int customerId, int pubCodeId);

        /// <summary>
        /// Get all pub codes for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>The method returns list pub codes for customer.</returns>
        List<PublishersPubCodeContract> GetAllPubCodesForCustomer(int customerId);

        /// <summary>
        /// Get all pub codes for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>The method returns list pub codes for customer.</returns>
        Task<List<PublishersPubCodeContract>> GetAllPubCodesForCustomerAsync(int customerId);
    }

    public interface IPublishersPubCodesClientByContextKeyApiMethods : IPublishersPubCodesClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersPubCodesClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersPubCodesClient : IPublishersPubCodesClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersPubCodesClient, IPublishersPubCodesClientForUser, IPublishersPubCodesClientForOrganization>
    {
    }

    public interface IPublishersPubCodesClientForUser : IPublishersPubCodesClientByContextKeyApiMethods, IClientByContext<IPublishersPubCodesClientForUser, IPublishersPubCodesClientForOrganization>
    {
    }

    public interface IPublishersPubCodesClientForOrganization : IPublishersPubCodesClientByOrganizationApiMethods
    {
    }

    public partial class PublishersPubCodesClient : BaseClient<IPublishersPubCodesClient, IPublishersPubCodesClientForUser, IPublishersPubCodesClientForOrganization, PublishersPubCodesClient>, IPublishersPubCodesClient, IPublishersPubCodesClientForUser, IPublishersPubCodesClientForOrganization
    {
        /// <summary>
        /// Create pub code for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create pub code contract.</param>
        /// <returns>The method returns created pub code contract.</returns>
        public PublishersPubCodeContract CreatePubCode(int customerId, CreatePublishersPubCodeContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersPubCodeContract>(request);
        }

        /// <summary>
        /// Create pub code for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create pub code contract.</param>
        /// <returns>The method returns created pub code contract.</returns>
        public async Task<PublishersPubCodeContract> CreatePubCodeAsync(int customerId, CreatePublishersPubCodeContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersPubCodeContract>(request);
        }

        /// <summary>
        /// Search pub code categories.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract for search pub code categories.</param>
        /// <returns>The method returns pub code categories by query.</returns>
        public List<PublishersPubCodeCategoryContract> SearchPubCodeCategories(int customerId, SearchPublishersPubCodeCategoriesContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}/search-pub-code-categories",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PublishersPubCodeCategoryContract>>(request);
        }

        /// <summary>
        /// Search pub code categories.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Contract for search pub code categories.</param>
        /// <returns>The method returns pub code categories by query.</returns>
        public async Task<List<PublishersPubCodeCategoryContract>> SearchPubCodeCategoriesAsync(int customerId, SearchPublishersPubCodeCategoriesContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}/search-pub-code-categories",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PublishersPubCodeCategoryContract>>(request);
        }

        /// <summary>
        /// Edit pub code. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except PubCodeId. This field is a identifier of a pub code. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit pub code contract.</param>
        /// <returns>The method returns contract for updated pub code.</returns>
        public PublishersPubCodeContract EditPubCode(int customerId, EditPublishersPubCodeContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersPubCodeContract>(request);
        }

        /// <summary>
        /// Edit pub code. You can choose the fields to include in the request. Each field from a request payload can be omitted,
        /// except PubCodeId. This field is a identifier of a pub code. Only the fields present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Edit pub code contract.</param>
        /// <returns>The method returns contract for updated pub code.</returns>
        public async Task<PublishersPubCodeContract> EditPubCodeAsync(int customerId, EditPublishersPubCodeContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersPubCodeContract>(request);
        }

        /// <summary>
        /// Search pub codes range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to pub codes.</param>
        /// <returns>The method returns the search result contract.</returns>
        public SearchResultContract<PublishersPubCodeContract> SearchPubCodesRange(int customerId, SearchPublishersPubCodesContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}/search-pub-codes-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<PublishersPubCodeContract>>(request);
        }

        /// <summary>
        /// Search pub codes range.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to pub codes.</param>
        /// <returns>The method returns the search result contract.</returns>
        public async Task<SearchResultContract<PublishersPubCodeContract>> SearchPubCodesRangeAsync(int customerId, SearchPublishersPubCodesContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}/search-pub-codes-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<PublishersPubCodeContract>>(request);
        }

        /// <summary>
        /// Get the pub code by its ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="pubCodeId">Unique pub code ID.</param>
        /// <returns>The method returns the pub code.</returns>
        public PublishersPubCodeContract GetPubCode(int customerId, int pubCodeId)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}/{pubCodeId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublishersPubCodeContract>(request);
        }

        /// <summary>
        /// Get the pub code by its ID.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="pubCodeId">Unique pub code ID.</param>
        /// <returns>The method returns the pub code.</returns>
        public async Task<PublishersPubCodeContract> GetPubCodeAsync(int customerId, int pubCodeId)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}/{pubCodeId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublishersPubCodeContract>(request);
        }

        /// <summary>
        /// Get all pub codes for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>The method returns list pub codes for customer.</returns>
        public List<PublishersPubCodeContract> GetAllPubCodesForCustomer(int customerId)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PublishersPubCodeContract>>(request);
        }

        /// <summary>
        /// Get all pub codes for customer.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <returns>The method returns list pub codes for customer.</returns>
        public async Task<List<PublishersPubCodeContract>> GetAllPubCodesForCustomerAsync(int customerId)
        {
            var request = new RequestData
            {
                Url = $"publishers/pub-codes/{customerId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PublishersPubCodeContract>>(request);
        }
    }

    public interface IPublishersTradeGroupsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create trade group.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create trade group contract.</param>
        /// <returns>Created trade group.</returns>
        PublishersTradeGroupContract CreateTradeGroup(int customerId, CreatePublishersTradeGroupContract contract);

        /// <summary>
        /// Create trade group.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create trade group contract.</param>
        /// <returns>Created trade group.</returns>
        Task<PublishersTradeGroupContract> CreateTradeGroupAsync(int customerId, CreatePublishersTradeGroupContract contract);

        /// <summary>
        /// Edit trade group.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="tradeGroupId">Unique trade group ID.</param>
        /// <param name="contract">Edit ctrade group contract.</param>
        /// <returns>The method returns contract for updated trade group.</returns>
        PublishersTradeGroupContract EditTradeGroup(int customerId, int tradeGroupId, EditPublishersTradeGroupContract contract);

        /// <summary>
        /// Edit trade group.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="tradeGroupId">Unique trade group ID.</param>
        /// <param name="contract">Edit ctrade group contract.</param>
        /// <returns>The method returns contract for updated trade group.</returns>
        Task<PublishersTradeGroupContract> EditTradeGroupAsync(int customerId, int tradeGroupId, EditPublishersTradeGroupContract contract);

        /// <summary>
        /// Delete trade group by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="tradeGroupId">Unique trade group ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the trade group.</returns>
        void DeleteTradeGroup(int customerId, int tradeGroupId);

        /// <summary>
        /// Delete trade group by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="tradeGroupId">Unique trade group ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the trade group.</returns>
        Task DeleteTradeGroupAsync(int customerId, int tradeGroupId);

        /// <summary>
        /// Search trade groups for grid.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search trade groups.</param>
        /// <returns>The method returns the search result contract.</returns>
        SearchResultContract<PublishersTradeGroupContract> SearchTradeGroupsRange(int customerId, SearchPublishersTradeGroupsContract searchContract);

        /// <summary>
        /// Search trade groups for grid.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search trade groups.</param>
        /// <returns>The method returns the search result contract.</returns>
        Task<SearchResultContract<PublishersTradeGroupContract>> SearchTradeGroupsRangeAsync(int customerId, SearchPublishersTradeGroupsContract searchContract);

        /// <summary>
        /// Change trade group order.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="changeContract">Contract to change trade group order.</param>
        /// <returns>The method returns HTTP status code 200 after the change trade group order.</returns>
        void ChangeGroupOrder(int customerId, ChangePublishersTradeGroupOrderContract changeContract);

        /// <summary>
        /// Change trade group order.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="changeContract">Contract to change trade group order.</param>
        /// <returns>The method returns HTTP status code 200 after the change trade group order.</returns>
        Task ChangeGroupOrderAsync(int customerId, ChangePublishersTradeGroupOrderContract changeContract);
    }

    public interface IPublishersTradeGroupsClientByContextKeyApiMethods : IPublishersTradeGroupsClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersTradeGroupsClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersTradeGroupsClient : IPublishersTradeGroupsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersTradeGroupsClient, IPublishersTradeGroupsClientForUser, IPublishersTradeGroupsClientForOrganization>
    {
    }

    public interface IPublishersTradeGroupsClientForUser : IPublishersTradeGroupsClientByContextKeyApiMethods, IClientByContext<IPublishersTradeGroupsClientForUser, IPublishersTradeGroupsClientForOrganization>
    {
    }

    public interface IPublishersTradeGroupsClientForOrganization : IPublishersTradeGroupsClientByOrganizationApiMethods
    {
    }

    public partial class PublishersTradeGroupsClient : BaseClient<IPublishersTradeGroupsClient, IPublishersTradeGroupsClientForUser, IPublishersTradeGroupsClientForOrganization, PublishersTradeGroupsClient>, IPublishersTradeGroupsClient, IPublishersTradeGroupsClientForUser, IPublishersTradeGroupsClientForOrganization
    {
        /// <summary>
        /// Create trade group.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create trade group contract.</param>
        /// <returns>Created trade group.</returns>
        public PublishersTradeGroupContract CreateTradeGroup(int customerId, CreatePublishersTradeGroupContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/trade-groups/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersTradeGroupContract>(request);
        }

        /// <summary>
        /// Create trade group.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="contract">Create trade group contract.</param>
        /// <returns>Created trade group.</returns>
        public async Task<PublishersTradeGroupContract> CreateTradeGroupAsync(int customerId, CreatePublishersTradeGroupContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/trade-groups/{customerId}/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersTradeGroupContract>(request);
        }

        /// <summary>
        /// Edit trade group.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="tradeGroupId">Unique trade group ID.</param>
        /// <param name="contract">Edit ctrade group contract.</param>
        /// <returns>The method returns contract for updated trade group.</returns>
        public PublishersTradeGroupContract EditTradeGroup(int customerId, int tradeGroupId, EditPublishersTradeGroupContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/trade-groups/{customerId}/edit/{tradeGroupId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersTradeGroupContract>(request);
        }

        /// <summary>
        /// Edit trade group.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="tradeGroupId">Unique trade group ID.</param>
        /// <param name="contract">Edit ctrade group contract.</param>
        /// <returns>The method returns contract for updated trade group.</returns>
        public async Task<PublishersTradeGroupContract> EditTradeGroupAsync(int customerId, int tradeGroupId, EditPublishersTradeGroupContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/trade-groups/{customerId}/edit/{tradeGroupId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersTradeGroupContract>(request);
        }

        /// <summary>
        /// Delete trade group by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="tradeGroupId">Unique trade group ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the trade group.</returns>
        public void DeleteTradeGroup(int customerId, int tradeGroupId)
        {
            var request = new RequestData
            {
                Url = $"publishers/trade-groups/{customerId}/{tradeGroupId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete trade group by ID
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="tradeGroupId">Unique trade group ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the trade group.</returns>
        public async Task DeleteTradeGroupAsync(int customerId, int tradeGroupId)
        {
            var request = new RequestData
            {
                Url = $"publishers/trade-groups/{customerId}/{tradeGroupId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Search trade groups for grid.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search trade groups.</param>
        /// <returns>The method returns the search result contract.</returns>
        public SearchResultContract<PublishersTradeGroupContract> SearchTradeGroupsRange(int customerId, SearchPublishersTradeGroupsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/trade-groups/{customerId}/search-trade-groups",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return PerformRequest<SearchResultContract<PublishersTradeGroupContract>>(request);
        }

        /// <summary>
        /// Search trade groups for grid.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="searchContract">Contract to search trade groups.</param>
        /// <returns>The method returns the search result contract.</returns>
        public async Task<SearchResultContract<PublishersTradeGroupContract>> SearchTradeGroupsRangeAsync(int customerId, SearchPublishersTradeGroupsContract searchContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/trade-groups/{customerId}/search-trade-groups",
                Method = HttpMethod.Post,
            };

            request.SetBody(searchContract);

            return await PerformRequestAsync<SearchResultContract<PublishersTradeGroupContract>>(request);
        }

        /// <summary>
        /// Change trade group order.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="changeContract">Contract to change trade group order.</param>
        /// <returns>The method returns HTTP status code 200 after the change trade group order.</returns>
        public void ChangeGroupOrder(int customerId, ChangePublishersTradeGroupOrderContract changeContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/trade-groups/{customerId}/change-trade-group-order",
                Method = HttpMethod.Post,
            };

            request.SetBody(changeContract);

            PerformRequest(request);
        }

        /// <summary>
        /// Change trade group order.
        /// </summary>
        /// <param name="customerId">Unique customer ID.</param>
        /// <param name="changeContract">Contract to change trade group order.</param>
        /// <returns>The method returns HTTP status code 200 after the change trade group order.</returns>
        public async Task ChangeGroupOrderAsync(int customerId, ChangePublishersTradeGroupOrderContract changeContract)
        {
            var request = new RequestData
            {
                Url = $"publishers/trade-groups/{customerId}/change-trade-group-order",
                Method = HttpMethod.Post,
            };

            request.SetBody(changeContract);

            await PerformRequestAsync(request);
        }
    }

    public interface IPublishersViewsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create view.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create view contract.</param>
        /// <returns>The method returns created view contract.</returns>
        PublishersViewContract CreateView(int customerId, CreatePublishersViewContract contract);

        /// <summary>
        /// Create view.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create view contract.</param>
        /// <returns>The method returns created view contract.</returns>
        Task<PublishersViewContract> CreateViewAsync(int customerId, CreatePublishersViewContract contract);

        /// <summary>
        /// Edit view. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed view.</returns>
        PublishersViewContract EditView(int customerId, int viewId, EditPublishersViewContract contract);

        /// <summary>
        /// Edit view. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed view.</returns>
        Task<PublishersViewContract> EditViewAsync(int customerId, int viewId, EditPublishersViewContract contract);

        /// <summary>
        /// Get view by the view Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id.</param>
        /// <returns>The method returns the view data.</returns>
        PublishersViewContract GetView(int customerId, int viewId);

        /// <summary>
        /// Get view by the view Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id.</param>
        /// <returns>The method returns the view data.</returns>
        Task<PublishersViewContract> GetViewAsync(int customerId, int viewId);

        /// <summary>
        /// Delete view by Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id to delete.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        void DeleteView(int customerId, int viewId);

        /// <summary>
        /// Delete view by Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id to delete.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        Task DeleteViewAsync(int customerId, int viewId);

        /// <summary>
        /// Get the list of portfolio's views.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the view list.</returns>
        List<PublishersViewContract> GetPortfolioViews(int customerId, int portfolioId);

        /// <summary>
        /// Get the list of portfolio's views.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the view list.</returns>
        Task<List<PublishersViewContract>> GetPortfolioViewsAsync(int customerId, int portfolioId);
    }

    public interface IPublishersViewsClientByContextKeyApiMethods : IPublishersViewsClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersViewsClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersViewsClient : IPublishersViewsClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersViewsClient, IPublishersViewsClientForUser, IPublishersViewsClientForOrganization>
    {
    }

    public interface IPublishersViewsClientForUser : IPublishersViewsClientByContextKeyApiMethods, IClientByContext<IPublishersViewsClientForUser, IPublishersViewsClientForOrganization>
    {
    }

    public interface IPublishersViewsClientForOrganization : IPublishersViewsClientByOrganizationApiMethods
    {
    }

    public partial class PublishersViewsClient : BaseClient<IPublishersViewsClient, IPublishersViewsClientForUser, IPublishersViewsClientForOrganization, PublishersViewsClient>, IPublishersViewsClient, IPublishersViewsClientForUser, IPublishersViewsClientForOrganization
    {
        /// <summary>
        /// Create view.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create view contract.</param>
        /// <returns>The method returns created view contract.</returns>
        public PublishersViewContract CreateView(int customerId, CreatePublishersViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/views",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersViewContract>(request);
        }

        /// <summary>
        /// Create view.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create view contract.</param>
        /// <returns>The method returns created view contract.</returns>
        public async Task<PublishersViewContract> CreateViewAsync(int customerId, CreatePublishersViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/views",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersViewContract>(request);
        }

        /// <summary>
        /// Edit view. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed view.</returns>
        public PublishersViewContract EditView(int customerId, int viewId, EditPublishersViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/views/{viewId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersViewContract>(request);
        }

        /// <summary>
        /// Edit view. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed view.</returns>
        public async Task<PublishersViewContract> EditViewAsync(int customerId, int viewId, EditPublishersViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/views/{viewId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersViewContract>(request);
        }

        /// <summary>
        /// Get view by the view Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id.</param>
        /// <returns>The method returns the view data.</returns>
        public PublishersViewContract GetView(int customerId, int viewId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/views/{viewId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublishersViewContract>(request);
        }

        /// <summary>
        /// Get view by the view Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id.</param>
        /// <returns>The method returns the view data.</returns>
        public async Task<PublishersViewContract> GetViewAsync(int customerId, int viewId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/views/{viewId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublishersViewContract>(request);
        }

        /// <summary>
        /// Delete view by Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id to delete.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        public void DeleteView(int customerId, int viewId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/views/{viewId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete view by Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewId">Unique view Id to delete.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        public async Task DeleteViewAsync(int customerId, int viewId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/views/{viewId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get the list of portfolio's views.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the view list.</returns>
        public List<PublishersViewContract> GetPortfolioViews(int customerId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/views/get-by-portfolio-id/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PublishersViewContract>>(request);
        }

        /// <summary>
        /// Get the list of portfolio's views.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="portfolioId">Unique portfolio Id.</param>
        /// <returns>The method returns the view list.</returns>
        public async Task<List<PublishersViewContract>> GetPortfolioViewsAsync(int customerId, int portfolioId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/views/get-by-portfolio-id/{portfolioId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PublishersViewContract>>(request);
        }
    }

    public interface IPublishersViewTemplatesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create view template.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create view template contract.</param>
        /// <returns>The method returns created view template contract.</returns>
        PublishersViewTemplateContract CreateViewTemplate(int customerId, CreatePublishersViewTemplateContract contract);

        /// <summary>
        /// Create view template.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create view template contract.</param>
        /// <returns>The method returns created view template contract.</returns>
        Task<PublishersViewTemplateContract> CreateViewTemplateAsync(int customerId, CreatePublishersViewTemplateContract contract);

        /// <summary>
        /// Edit view template. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed view template.</returns>
        PublishersViewTemplateContract EditViewTemplate(int customerId, int viewTemplateId, EditPublishersViewTemplateContract contract);

        /// <summary>
        /// Edit view template. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed view template.</returns>
        Task<PublishersViewTemplateContract> EditViewTemplateAsync(int customerId, int viewTemplateId, EditPublishersViewTemplateContract contract);

        /// <summary>
        /// Delete view template by Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view template.</returns>
        void DeleteViewTemplate(int customerId, int viewTemplateId);

        /// <summary>
        /// Delete view template by Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view template.</returns>
        Task DeleteViewTemplateAsync(int customerId, int viewTemplateId);

        /// <summary>
        /// Get view template by view template Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <returns>The method returns the view template data.</returns>
        PublishersViewTemplateContract GetViewTemplate(int customerId, int viewTemplateId);

        /// <summary>
        /// Get view template by view template Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <returns>The method returns the view template data.</returns>
        Task<PublishersViewTemplateContract> GetViewTemplateAsync(int customerId, int viewTemplateId);

        /// <summary>
        /// Get the list of customer's view templates.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <returns>The method returns the view templates list.</returns>
        List<PublishersViewTemplateContract> GetViewTemplatesByCustomerId(int customerId);

        /// <summary>
        /// Get the list of customer's view templates.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <returns>The method returns the view templates list.</returns>
        Task<List<PublishersViewTemplateContract>> GetViewTemplatesByCustomerIdAsync(int customerId);
    }

    public interface IPublishersViewTemplatesClientByContextKeyApiMethods : IPublishersViewTemplatesClientByLicenseKeyApiMethods
    {
    }

    public interface IPublishersViewTemplatesClientByOrganizationApiMethods
    {
    }

    public partial interface IPublishersViewTemplatesClient : IPublishersViewTemplatesClientByLicenseKeyApiMethods, IClientByLicenseKey<IPublishersViewTemplatesClient, IPublishersViewTemplatesClientForUser, IPublishersViewTemplatesClientForOrganization>
    {
    }

    public interface IPublishersViewTemplatesClientForUser : IPublishersViewTemplatesClientByContextKeyApiMethods, IClientByContext<IPublishersViewTemplatesClientForUser, IPublishersViewTemplatesClientForOrganization>
    {
    }

    public interface IPublishersViewTemplatesClientForOrganization : IPublishersViewTemplatesClientByOrganizationApiMethods
    {
    }

    public partial class PublishersViewTemplatesClient : BaseClient<IPublishersViewTemplatesClient, IPublishersViewTemplatesClientForUser, IPublishersViewTemplatesClientForOrganization, PublishersViewTemplatesClient>, IPublishersViewTemplatesClient, IPublishersViewTemplatesClientForUser, IPublishersViewTemplatesClientForOrganization
    {
        /// <summary>
        /// Create view template.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create view template contract.</param>
        /// <returns>The method returns created view template contract.</returns>
        public PublishersViewTemplateContract CreateViewTemplate(int customerId, CreatePublishersViewTemplateContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/view-templates",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersViewTemplateContract>(request);
        }

        /// <summary>
        /// Create view template.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="contract">Create view template contract.</param>
        /// <returns>The method returns created view template contract.</returns>
        public async Task<PublishersViewTemplateContract> CreateViewTemplateAsync(int customerId, CreatePublishersViewTemplateContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/view-templates",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersViewTemplateContract>(request);
        }

        /// <summary>
        /// Edit view template. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed view template.</returns>
        public PublishersViewTemplateContract EditViewTemplate(int customerId, int viewTemplateId, EditPublishersViewTemplateContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/view-templates/{viewTemplateId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<PublishersViewTemplateContract>(request);
        }

        /// <summary>
        /// Edit view template. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the refreshed view template.</returns>
        public async Task<PublishersViewTemplateContract> EditViewTemplateAsync(int customerId, int viewTemplateId, EditPublishersViewTemplateContract contract)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/view-templates/{viewTemplateId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<PublishersViewTemplateContract>(request);
        }

        /// <summary>
        /// Delete view template by Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view template.</returns>
        public void DeleteViewTemplate(int customerId, int viewTemplateId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/view-templates/{viewTemplateId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete view template by Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view template.</returns>
        public async Task DeleteViewTemplateAsync(int customerId, int viewTemplateId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/view-templates/{viewTemplateId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get view template by view template Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <returns>The method returns the view template data.</returns>
        public PublishersViewTemplateContract GetViewTemplate(int customerId, int viewTemplateId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/view-templates/{viewTemplateId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PublishersViewTemplateContract>(request);
        }

        /// <summary>
        /// Get view template by view template Id.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <param name="viewTemplateId">Unique view template Id.</param>
        /// <returns>The method returns the view template data.</returns>
        public async Task<PublishersViewTemplateContract> GetViewTemplateAsync(int customerId, int viewTemplateId)
        {
            var request = new RequestData
            {
                Url = $"publishers/{customerId}/view-templates/{viewTemplateId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PublishersViewTemplateContract>(request);
        }

        /// <summary>
        /// Get the list of customer's view templates.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <returns>The method returns the view templates list.</returns>
        public List<PublishersViewTemplateContract> GetViewTemplatesByCustomerId(int customerId)
        {
            var request = new RequestData
            {
                Url = $"publishers/view-templates/get-by-customer-id/{customerId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PublishersViewTemplateContract>>(request);
        }

        /// <summary>
        /// Get the list of customer's view templates.
        /// </summary>
        /// <param name="customerId">Unique customer Id.</param>
        /// <returns>The method returns the view templates list.</returns>
        public async Task<List<PublishersViewTemplateContract>> GetViewTemplatesByCustomerIdAsync(int customerId)
        {
            var request = new RequestData
            {
                Url = $"publishers/view-templates/get-by-customer-id/{customerId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PublishersViewTemplateContract>>(request);
        }
    }

    public interface IResearchClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the calculated Volatility Quotient for selected positions. This method can be used to calculate Portfolio VQ.
        /// </summary>
        /// <param name="contract">Contract to get combined VQ.</param>
        /// <returns>The method returns the combined Volatility Quotient based on selected parameters.</returns>
        decimal? GetCombinedVq(GetCombinedVqContract contract);

        /// <summary>
        /// Get the calculated Volatility Quotient for selected positions. This method can be used to calculate Portfolio VQ.
        /// </summary>
        /// <param name="contract">Contract to get combined VQ.</param>
        /// <returns>The method returns the combined Volatility Quotient based on selected parameters.</returns>
        Task<decimal?> GetCombinedVqAsync(GetCombinedVqContract contract);

        /// <summary>
        /// Get the Volatility Quotient (VQ) for the symbol from the historical data on a specific trade date.
        /// This method returns the VQ value for the requested date or for the nearest available day before it if there are no VQ values for the required date.
        /// The VQ% tells you how volatile a stock is - in other words, how much room you can give a stock in order to not get stopped out too early.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-10).</param>
        /// <returns>The method returns a decimal VQ value. If no VQ value is available for the requested SymbolId, the method returns null.</returns>
        decimal? GetLatestVq(int symbolId, DateTime tradeDate);

        /// <summary>
        /// Get the Volatility Quotient (VQ) for the symbol from the historical data on a specific trade date.
        /// This method returns the VQ value for the requested date or for the nearest available day before it if there are no VQ values for the required date.
        /// The VQ% tells you how volatile a stock is - in other words, how much room you can give a stock in order to not get stopped out too early.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-10).</param>
        /// <returns>The method returns a decimal VQ value. If no VQ value is available for the requested SymbolId, the method returns null.</returns>
        Task<decimal?> GetLatestVqAsync(int symbolId, DateTime tradeDate);

        List<VqValueContract> GetLatestVqValues(List<int> symbolIds);

        Task<List<VqValueContract>> GetLatestVqValuesAsync(List<int> symbolIds);

        /// <summary>
        /// Get the Volatility Quotient (VQ) for the symbols in the specified date range
        /// This method returns the VQ values for the current date or for the nearest available day before it if there are no VQ values for the current date.
        /// The VQ% tells you how volatile a stock is - in other words, how much room you can give a stock in order to not get stopped out too early.
        /// </summary>
        /// <param name="contract">Parameters to load VQ values</param>
        /// <returns>The method returns a list of VQ values. If no VQ value is available for the requested SymbolId, then item with corresponding VQ value will be missing in the returned list.</returns>
        List<VqValueContract> GetMultipleVqValues(GetVqValuesContract contract);

        /// <summary>
        /// Get the Volatility Quotient (VQ) for the symbols in the specified date range
        /// This method returns the VQ values for the current date or for the nearest available day before it if there are no VQ values for the current date.
        /// The VQ% tells you how volatile a stock is - in other words, how much room you can give a stock in order to not get stopped out too early.
        /// </summary>
        /// <param name="contract">Parameters to load VQ values</param>
        /// <returns>The method returns a list of VQ values. If no VQ value is available for the requested SymbolId, then item with corresponding VQ value will be missing in the returned list.</returns>
        Task<List<VqValueContract>> GetMultipleVqValuesAsync(GetVqValuesContract contract);

        /// <summary>
        /// Get symbol global rank and ranks for all criteria
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Symbol global rank with data by all criteria</returns>
        GlobalRankContract GetGlobalRank(int symbolId);

        /// <summary>
        /// Get symbol global rank and ranks for all criteria
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Symbol global rank with data by all criteria</returns>
        Task<GlobalRankContract> GetGlobalRankAsync(int symbolId);

        List<GlobalRankContract> GetGlobalRanks(List<int> symbolIds);

        Task<List<GlobalRankContract>> GetGlobalRanksAsync(List<int> symbolIds);

        /// <summary>
        /// The method prepares positions research data (prices, VQ, SSI etc.) required to run Risk Rebalancer.
        /// </summary>
        /// <param name="contract">Contract to prepare positions.</param>
        /// <returns>The method returns contract ready to run Risk Rebalancer.</returns>
        RiskRebalancePositionsResultContract PreparePositions(RiskRebalanceInputContract contract);

        /// <summary>
        /// The method prepares positions research data (prices, VQ, SSI etc.) required to run Risk Rebalancer.
        /// </summary>
        /// <param name="contract">Contract to prepare positions.</param>
        /// <returns>The method returns contract ready to run Risk Rebalancer.</returns>
        Task<RiskRebalancePositionsResultContract> PreparePositionsAsync(RiskRebalanceInputContract contract);

        List<SsiCurrentValueContract> GetSsiValues(List<int> symbolIds);

        Task<List<SsiCurrentValueContract>> GetSsiValuesAsync(List<int> symbolIds);

        /// <summary>
        /// Get first historical SSI value by provided symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID</param>
        /// <returns>Historical SSI value</returns>
        SsiHistoryValueContract GetSsiFirstPoint(int symbolId);

        /// <summary>
        /// Get first historical SSI value by provided symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID</param>
        /// <returns>Historical SSI value</returns>
        Task<SsiHistoryValueContract> GetSsiFirstPointAsync(int symbolId);

        /// <summary>
        /// Get historical SSI values for the symbols in the specified date range
        /// </summary>
        /// <param name="contract">Parameters to get SSI history values</param>
        /// <returns>List of historical SSI values</returns>
        List<SsiHistoryValueContract> GetMultipleSsiHistoryValues(GetSsiHistoryValuesContract contract);

        /// <summary>
        /// Get historical SSI values for the symbols in the specified date range
        /// </summary>
        /// <param name="contract">Parameters to get SSI history values</param>
        /// <returns>List of historical SSI values</returns>
        Task<List<SsiHistoryValueContract>> GetMultipleSsiHistoryValuesAsync(GetSsiHistoryValuesContract contract);

        /// <summary>
        /// Get the current State Stock Indicator (SSI) value for the symbol. The value indicates the current health of the stock (performing well, in a period of correction, or stopped out). If an SSI is not available by the symbol ID, the method returns null value.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the contract with SSI values for Long and Short positions adjusted by dividends.</returns>
        SsiCurrentValueContract GetSsi(int symbolId);

        /// <summary>
        /// Get the current State Stock Indicator (SSI) value for the symbol. The value indicates the current health of the stock (performing well, in a period of correction, or stopped out). If an SSI is not available by the symbol ID, the method returns null value.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the contract with SSI values for Long and Short positions adjusted by dividends.</returns>
        Task<SsiCurrentValueContract> GetSsiAsync(int symbolId);

        /// <summary>
        /// The method provides a possibility to calculate the position size based on how much money you are willing to lose on this position.
        /// </summary>
        /// <param name="input">Contract to calculate position size.</param>
        /// <returns>The method returns the contract with recommended investment values.</returns>
        PositionSizeByRiskContract CalculatePositionSizeByRisk(CalculatePositionSizeByRiskContract input);

        /// <summary>
        /// The method provides a possibility to calculate the position size based on how much money you are willing to lose on this position.
        /// </summary>
        /// <param name="input">Contract to calculate position size.</param>
        /// <returns>The method returns the contract with recommended investment values.</returns>
        Task<PositionSizeByRiskContract> CalculatePositionSizeByRiskAsync(CalculatePositionSizeByRiskContract input);

        /// <summary>
        /// The method provides a possibility to calculate the risk based on the position investment amount. This method is available only for long positions
        /// </summary>
        /// <param name="input">Contract to calculate position size.</param>
        /// <returns>Position investment amount.</returns>
        PositionSizeByInvestmentContract CalculatePositionSizeByInvestment(CalculatePositionSizeByInvestmentContract input);

        /// <summary>
        /// The method provides a possibility to calculate the risk based on the position investment amount. This method is available only for long positions
        /// </summary>
        /// <param name="input">Contract to calculate position size.</param>
        /// <returns>Position investment amount.</returns>
        Task<PositionSizeByInvestmentContract> CalculatePositionSizeByInvestmentAsync(CalculatePositionSizeByInvestmentContract input);

        /// <summary>
        /// Get equity performance (% change) line for portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        object CalculatePortfoliosPerformanceLineExtended(CalculatePortfoliosPerfomanceLineContract contract);

        /// <summary>
        /// Get equity performance (% change) line for portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        Task<object> CalculatePortfoliosPerformanceLineExtendedAsync(CalculatePortfoliosPerfomanceLineContract contract);

        /// <summary>
        /// Get equity performance (% change) line for symbols
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        List<PortfolioPerformanceResultEquityContract> CalculateSymbolsPerformanceLine(CalculateSymbolsPerformanceLineContract contract);

        /// <summary>
        /// Get equity performance (% change) line for symbols
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        Task<List<PortfolioPerformanceResultEquityContract>> CalculateSymbolsPerformanceLineAsync(CalculateSymbolsPerformanceLineContract contract);

        /// <summary>
        /// Get equity performance line (% change) for positions
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        List<PortfolioPerformanceResultEquityContract> CalculatePositionsPerformanceLine(CalculatePositionsPerfomanceLineContract contract);

        /// <summary>
        /// Get equity performance line (% change) for positions
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        Task<List<PortfolioPerformanceResultEquityContract>> CalculatePositionsPerformanceLineAsync(CalculatePositionsPerfomanceLineContract contract);

        /// <summary>
        /// Get the current (latest) Roc (Rate of Change)
        /// This method returns the contract for latest Roc (Rate of Change) value
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-10).</param>
        /// <param name="isAdjusted">Adjusted</param>
        /// <returns>Contract for latest Roc value</returns>
        RocValueContract GetLatestRocValue(int symbolId, DateTime tradeDate, bool isAdjusted);

        /// <summary>
        /// Get the current (latest) Roc (Rate of Change)
        /// This method returns the contract for latest Roc (Rate of Change) value
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-10).</param>
        /// <param name="isAdjusted">Adjusted</param>
        /// <returns>Contract for latest Roc value</returns>
        Task<RocValueContract> GetLatestRocValueAsync(int symbolId, DateTime tradeDate, bool isAdjusted);

        /// <summary>
        /// Get the current (latest) Roc (Rate of Change)
        /// This method returns contracts for latest Roc values
        /// </summary>
        /// <param name="contract">Contract for getting RocValueContracts</param>
        /// <returns>Contract for latest Roc values</returns>
        List<RocValueContract> GetLatestRocValues(GetRocValuesContract contract);

        /// <summary>
        /// Get the current (latest) Roc (Rate of Change)
        /// This method returns contracts for latest Roc values
        /// </summary>
        /// <param name="contract">Contract for getting RocValueContracts</param>
        /// <returns>Contract for latest Roc values</returns>
        Task<List<RocValueContract>> GetLatestRocValuesAsync(GetRocValuesContract contract);

        List<BullBearIndicatorContract> GetBullBearIndicators(List<int> symbolIds);

        Task<List<BullBearIndicatorContract>> GetBullBearIndicatorsAsync(List<int> symbolIds);

        /// <summary>
        /// Search instrument ratings.
        /// </summary>
        /// <param name="contract">Contract to search instrument ratings.</param>
        /// <returns>The method returns the search result contract.</returns>
        SearchResultContract<InstrumentRatingContract> SearchInstrumentRatings(SearchInstrumentRatingsContract contract);

        /// <summary>
        /// Search instrument ratings.
        /// </summary>
        /// <param name="contract">Contract to search instrument ratings.</param>
        /// <returns>The method returns the search result contract.</returns>
        Task<SearchResultContract<InstrumentRatingContract>> SearchInstrumentRatingsAsync(SearchInstrumentRatingsContract contract);

        /// <summary>
        /// Get symbols ranked by Smith Rank.
        /// </summary>
        /// <param name="contract">Contract to get Smith Rank.</param>
        /// <returns>Returns a list of ranked symbol.</returns>
        List<SmithRankContract> GetSmithRanks(GetSmithRankContract contract);

        /// <summary>
        /// Get symbols ranked by Smith Rank.
        /// </summary>
        /// <param name="contract">Contract to get Smith Rank.</param>
        /// <returns>Returns a list of ranked symbol.</returns>
        Task<List<SmithRankContract>> GetSmithRanksAsync(GetSmithRankContract contract);

        /// <summary>
        /// Get symbol fun facts.
        /// </summary>
        /// <param name="contract">Contract to get fun facts.</param>
        /// <returns>Fun facts on the symbol.</returns>
        FunFactsContract GetFunFacts(GetFunFactsContract contract);

        /// <summary>
        /// Get symbol fun facts.
        /// </summary>
        /// <param name="contract">Contract to get fun facts.</param>
        /// <returns>Fun facts on the symbol.</returns>
        Task<FunFactsContract> GetFunFactsAsync(GetFunFactsContract contract);

        /// <summary>
        /// Get option research statistic, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get option research statistic.</param>
        /// <returns>Option research statistic by symbol.</returns>
        OptionResearchStatisticContract GetOptionResearchStatistic(GetOptionResearchStatisticContract contract);

        /// <summary>
        /// Get option research statistic, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get option research statistic.</param>
        /// <returns>Option research statistic by symbol.</returns>
        Task<OptionResearchStatisticContract> GetOptionResearchStatisticAsync(GetOptionResearchStatisticContract contract);

        /// <summary>
        /// Get option research statistics, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get bulk option research statistic.</param>
        /// <returns>Option research statistics by symbols.</returns>
        List<OptionResearchStatisticContract> GetOptionResearchStatistics(GetBulkOptionResearchStatisticContract contract);

        /// <summary>
        /// Get option research statistics, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get bulk option research statistic.</param>
        /// <returns>Option research statistics by symbols.</returns>
        Task<List<OptionResearchStatisticContract>> GetOptionResearchStatisticsAsync(GetBulkOptionResearchStatisticContract contract);

        /// <summary>
        /// Search option research statistic, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get filtered option research statistic.</param>
        /// <returns>Search option research statistic</returns>
        List<OptionResearchStatisticContract> SearchOptionResearchStatistic(SearchOptionResearchStatisticsContract contract);

        /// <summary>
        /// Search option research statistic, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get filtered option research statistic.</param>
        /// <returns>Search option research statistic</returns>
        Task<List<OptionResearchStatisticContract>> SearchOptionResearchStatisticAsync(SearchOptionResearchStatisticsContract contract);

        /// <summary>
        /// Get all current distributions of a symbol group.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Current distributions of a symbol group.</returns>
        SymbolGroupDistributionsContract GetSymbolGroupDistributions(int symbolId);

        /// <summary>
        /// Get all current distributions of a symbol group.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Current distributions of a symbol group.</returns>
        Task<SymbolGroupDistributionsContract> GetSymbolGroupDistributionsAsync(int symbolId);
    }

    public interface IResearchClientByContextKeyApiMethods : IResearchClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the calculated Volatility Quotient for a pair trade position.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <param name="tradeDate">Trade Date (example: 2018-03-05 ).</param>
        /// <returns>The method returns the combined Volatility Quotient based on the selected pair trade position.</returns>
        decimal? GetLatestPairTradeVq(int positionId, DateTime tradeDate);

        /// <summary>
        /// Get the calculated Volatility Quotient for a pair trade position.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <param name="tradeDate">Trade Date (example: 2018-03-05 ).</param>
        /// <returns>The method returns the combined Volatility Quotient based on the selected pair trade position.</returns>
        Task<decimal?> GetLatestPairTradeVqAsync(int positionId, DateTime tradeDate);

        RiskRebalancerPortfolioDataContract GetRiskRebalancerPortfoliosData(List<int> portfolioIds);

        Task<RiskRebalancerPortfolioDataContract> GetRiskRebalancerPortfoliosDataAsync(List<int> portfolioIds);

        /// <summary>
        /// The method runs the Risk Rebalancer to allocate more capital to less volatile equities and less capital to your more volatile equities using the proprietary volatility metric, the Volatility Quotient (VQ) for the requested positions.
        /// </summary>
        /// <param name="contract">Contract to make a rebalance for positions.</param>
        /// <returns>The method returns the rebalanced positions of the selected portfolios.</returns>
        RiskRebalancePositionsResultContract RiskRebalancePositions(RiskRebalanceInputContract contract);

        /// <summary>
        /// The method runs the Risk Rebalancer to allocate more capital to less volatile equities and less capital to your more volatile equities using the proprietary volatility metric, the Volatility Quotient (VQ) for the requested positions.
        /// </summary>
        /// <param name="contract">Contract to make a rebalance for positions.</param>
        /// <returns>The method returns the rebalanced positions of the selected portfolios.</returns>
        Task<RiskRebalancePositionsResultContract> RiskRebalancePositionsAsync(RiskRebalanceInputContract contract);

        /// <summary>
        /// The method runs the Risk Rebalancer to allocate more capital to less volatile equities and less capital to your more volatile equities using the proprietary volatility metric, the Volatility Quotient (VQ) for the selected portfolios.
        /// </summary>
        /// <param name="contract">Contract to make a rebalance for portfolio.</param>
        /// <returns>The method returns the rebalanced portfolio information.</returns>
        RiskRebalancePortfolioResultContract RiskRebalancePortfolio(RiskRebalancePortfolioContract contract);

        /// <summary>
        /// The method runs the Risk Rebalancer to allocate more capital to less volatile equities and less capital to your more volatile equities using the proprietary volatility metric, the Volatility Quotient (VQ) for the selected portfolios.
        /// </summary>
        /// <param name="contract">Contract to make a rebalance for portfolio.</param>
        /// <returns>The method returns the rebalanced portfolio information.</returns>
        Task<RiskRebalancePortfolioResultContract> RiskRebalancePortfolioAsync(RiskRebalancePortfolioContract contract);

        /// <summary>
        /// Get the portfolio VQ allocation for the requested portfolios.
        /// </summary>
        /// <param name="contract">Contract to get VQ allocation by portfolio.</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        VqAllocationContract GetVqAllocation(GetVqAllocationByPortfolioContract contract);

        /// <summary>
        /// Get the portfolio VQ allocation for the requested portfolios.
        /// </summary>
        /// <param name="contract">Contract to get VQ allocation by portfolio.</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        Task<VqAllocationContract> GetVqAllocationAsync(GetVqAllocationByPortfolioContract contract);

        List<GlobalRankAllocationContract> GetGlobalRankAllocation(List<int> portfolioIds);

        Task<List<GlobalRankAllocationContract>> GetGlobalRankAllocationAsync(List<int> portfolioIds);

        AssetAllocationContract GetAssetAllocation(List<int> portfolioIds);

        Task<AssetAllocationContract> GetAssetAllocationAsync(List<int> portfolioIds);

        /// <summary>
        /// Get the value allocations grouped by symbols for the requested portfolio IDs.
        /// </summary>
        /// <param name="contract">Contract for getting allocations.</param>
        /// <returns>The method returns the contract with the common allocations for the requested portfolios.</returns>
        ValueAllocationContract GetValueAllocation(GetValueAllocationContract contract);

        /// <summary>
        /// Get the value allocations grouped by symbols for the requested portfolio IDs.
        /// </summary>
        /// <param name="contract">Contract for getting allocations.</param>
        /// <returns>The method returns the contract with the common allocations for the requested portfolios.</returns>
        Task<ValueAllocationContract> GetValueAllocationAsync(GetValueAllocationContract contract);

        SsiDistributionContract GetSsiDistributionByPortfolioIds(List<int> portfolioIds);

        Task<SsiDistributionContract> GetSsiDistributionByPortfolioIdsAsync(List<int> portfolioIds);

        /// <summary>
        /// Get SSI distribution history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate distribution</param>
        /// <returns>Contract with percentage values for each SSI status or null if calculation not possible.</returns>
        List<SsiHistoricalDistributionContract> GetHistoricalSsiDistributionByPortfolioIds(GetHistoricalSsiDistributionByPortfolioIdsContract contract);

        /// <summary>
        /// Get SSI distribution history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate distribution</param>
        /// <returns>Contract with percentage values for each SSI status or null if calculation not possible.</returns>
        Task<List<SsiHistoricalDistributionContract>> GetHistoricalSsiDistributionByPortfolioIdsAsync(GetHistoricalSsiDistributionByPortfolioIdsContract contract);

        /// <summary>
        /// Get SSI Trend distribution history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate distribution</param>
        /// <returns>Contract with percentage values for each SSI Trend status or null if calculation not possible.</returns>
        List<SsiTrendHistoricalDistributionContract> GetHistoricalSsiTrendDistributionByPortfolioIds(GetHistoricalSsiTrendDistributionByPortfolioIdsContract contract);

        /// <summary>
        /// Get SSI Trend distribution history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate distribution</param>
        /// <returns>Contract with percentage values for each SSI Trend status or null if calculation not possible.</returns>
        Task<List<SsiTrendHistoricalDistributionContract>> GetHistoricalSsiTrendDistributionByPortfolioIdsAsync(GetHistoricalSsiTrendDistributionByPortfolioIdsContract contract);

        /// <summary>
        /// The method to calculate position for the list of symbols.
        /// </summary>
        /// <param name="contract">Contract to calculate position size with list of symbols.</param>
        /// <returns>List of positions after applied position size algorithm.</returns>
        List<BulkPositionSizeResultContract> CalculateBulkPositionSize(CalculateBulkPositionSizeContract contract);

        /// <summary>
        /// The method to calculate position for the list of symbols.
        /// </summary>
        /// <param name="contract">Contract to calculate position size with list of symbols.</param>
        /// <returns>List of positions after applied position size algorithm.</returns>
        Task<List<BulkPositionSizeResultContract>> CalculateBulkPositionSizeAsync(CalculateBulkPositionSizeContract contract);

        /// <summary>
        /// The method will count number of input positions that will be passed to Pure Quant algorithm.
        /// </summary>
        /// <param name="input">Contract to run QuantTool.</param>
        /// <returns>Number of input positions that will be passed to Pure Quant algorithm.</returns>
        int GetNumberOfInputPositionsForQuantTool(QuantToolInputContract input);

        /// <summary>
        /// The method will count number of input positions that will be passed to Pure Quant algorithm.
        /// </summary>
        /// <param name="input">Contract to run QuantTool.</param>
        /// <returns>Number of input positions that will be passed to Pure Quant algorithm.</returns>
        Task<int> GetNumberOfInputPositionsForQuantToolAsync(QuantToolInputContract input);

        /// <summary>
        /// The method runs the QuantTool for the provided set of positions and returns recommendations according to the internal TradeStops algorithm.
        /// </summary>
        /// <param name="input">Contract to run QuantTool.</param>
        /// <returns>The method returns an array of statistics and recommendations for the positions based on the input conditions.</returns>
        List<QuantToolResultPositionContract> QuantTool(QuantToolInputContract input);

        /// <summary>
        /// The method runs the QuantTool for the provided set of positions and returns recommendations according to the internal TradeStops algorithm.
        /// </summary>
        /// <param name="input">Contract to run QuantTool.</param>
        /// <returns>The method returns an array of statistics and recommendations for the positions based on the input conditions.</returns>
        Task<List<QuantToolResultPositionContract>> QuantToolAsync(QuantToolInputContract input);

        /// <summary>
        /// Get equity performance (% change) line for portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        List<PortfolioPerformanceResultEquityContract> CalculatePortfoliosPerformanceLine(CalculatePortfoliosPerfomanceLineContract contract);

        /// <summary>
        /// Get equity performance (% change) line for portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        Task<List<PortfolioPerformanceResultEquityContract>> CalculatePortfoliosPerformanceLineAsync(CalculatePortfoliosPerfomanceLineContract contract);

        /// <summary>
        /// Get equity performance (% change) line for newsletter portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        List<PortfolioPerformanceResultEquityContract> CalculateNewsletterPortfoliosPerformanceLine(CalculateNewsletterPortfoliosPerfomanceLineContract contract);

        /// <summary>
        /// Get equity performance (% change) line for newsletter portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        Task<List<PortfolioPerformanceResultEquityContract>> CalculateNewsletterPortfoliosPerformanceLineAsync(CalculateNewsletterPortfoliosPerfomanceLineContract contract);

        /// <summary>
        /// Get diversification ratio by portfolio Ids.
        /// </summary>
        /// <param name="contract">Contract with parameters to get diversification ratio</param>
        /// <returns>Diversification ratio for given portfolio Ids with corresponding Portfolio Volatility Quotient or null if calculation not possible</returns>
        DiversificationRatioContract GetDiversificationRatioByPortfolioIds(GetDiversificationRatioByPortfolioIdsContract contract);

        /// <summary>
        /// Get diversification ratio by portfolio Ids.
        /// </summary>
        /// <param name="contract">Contract with parameters to get diversification ratio</param>
        /// <returns>Diversification ratio for given portfolio Ids with corresponding Portfolio Volatility Quotient or null if calculation not possible</returns>
        Task<DiversificationRatioContract> GetDiversificationRatioByPortfolioIdsAsync(GetDiversificationRatioByPortfolioIdsContract contract);

        /// <summary>
        /// Get Portfolio VQ by list of portfolio Ids
        /// </summary>
        /// <param name="contract">Contract with parameters to get Portfolio VQ</param>
        /// <returns>Diversification ratio for given portfolio Ids or null if calculation not possible</returns>
        decimal? GetPortfoliosVq(GetPortfoliosVqContract contract);

        /// <summary>
        /// Get Portfolio VQ by list of portfolio Ids
        /// </summary>
        /// <param name="contract">Contract with parameters to get Portfolio VQ</param>
        /// <returns>Diversification ratio for given portfolio Ids or null if calculation not possible</returns>
        Task<decimal?> GetPortfoliosVqAsync(GetPortfoliosVqContract contract);

        /// <summary>
        /// Get Global Rank allocation history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate allocation</param>
        /// <returns>Contract with percentage values for each Global Rank status or null if calculation not possible.</returns>
        List<GlobalRankHistoricalAllocationContract> GetHistoricalGlobalRankAllocation(GetHistoricalGlobalRankAllocationContract contract);

        /// <summary>
        /// Get Global Rank allocation history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate allocation</param>
        /// <returns>Contract with percentage values for each Global Rank status or null if calculation not possible.</returns>
        Task<List<GlobalRankHistoricalAllocationContract>> GetHistoricalGlobalRankAllocationAsync(GetHistoricalGlobalRankAllocationContract contract);
    }

    public interface IResearchClientByOrganizationApiMethods
    {
    }

    public partial interface IResearchClient : IResearchClientByLicenseKeyApiMethods, IClientByLicenseKey<IResearchClient, IResearchClientForUser, IResearchClientForOrganization>
    {
    }

    public interface IResearchClientForUser : IResearchClientByContextKeyApiMethods, IClientByContext<IResearchClientForUser, IResearchClientForOrganization>
    {
    }

    public interface IResearchClientForOrganization : IResearchClientByOrganizationApiMethods
    {
    }

    public partial class ResearchClient : BaseClient<IResearchClient, IResearchClientForUser, IResearchClientForOrganization, ResearchClient>, IResearchClient, IResearchClientForUser, IResearchClientForOrganization
    {
        /// <summary>
        /// Get the calculated Volatility Quotient for selected positions. This method can be used to calculate Portfolio VQ.
        /// </summary>
        /// <param name="contract">Contract to get combined VQ.</param>
        /// <returns>The method returns the combined Volatility Quotient based on selected parameters.</returns>
        public decimal? GetCombinedVq(GetCombinedVqContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/combined-vq",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<decimal?>(request);
        }

        /// <summary>
        /// Get the calculated Volatility Quotient for selected positions. This method can be used to calculate Portfolio VQ.
        /// </summary>
        /// <param name="contract">Contract to get combined VQ.</param>
        /// <returns>The method returns the combined Volatility Quotient based on selected parameters.</returns>
        public async Task<decimal?> GetCombinedVqAsync(GetCombinedVqContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/combined-vq",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<decimal?>(request);
        }

        /// <summary>
        /// Get the calculated Volatility Quotient for a pair trade position.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <param name="tradeDate">Trade Date (example: 2018-03-05 ).</param>
        /// <returns>The method returns the combined Volatility Quotient based on the selected pair trade position.</returns>
        public decimal? GetLatestPairTradeVq(int positionId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"research/pair-trade-latest-vq/{positionId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<decimal?>(request);
        }

        /// <summary>
        /// Get the calculated Volatility Quotient for a pair trade position.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <param name="tradeDate">Trade Date (example: 2018-03-05 ).</param>
        /// <returns>The method returns the combined Volatility Quotient based on the selected pair trade position.</returns>
        public async Task<decimal?> GetLatestPairTradeVqAsync(int positionId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"research/pair-trade-latest-vq/{positionId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<decimal?>(request);
        }

        /// <summary>
        /// Get the Volatility Quotient (VQ) for the symbol from the historical data on a specific trade date.
        /// This method returns the VQ value for the requested date or for the nearest available day before it if there are no VQ values for the required date.
        /// The VQ% tells you how volatile a stock is - in other words, how much room you can give a stock in order to not get stopped out too early.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-10).</param>
        /// <returns>The method returns a decimal VQ value. If no VQ value is available for the requested SymbolId, the method returns null.</returns>
        public decimal? GetLatestVq(int symbolId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"research/latest-vq/{symbolId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<decimal?>(request);
        }

        /// <summary>
        /// Get the Volatility Quotient (VQ) for the symbol from the historical data on a specific trade date.
        /// This method returns the VQ value for the requested date or for the nearest available day before it if there are no VQ values for the required date.
        /// The VQ% tells you how volatile a stock is - in other words, how much room you can give a stock in order to not get stopped out too early.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-10).</param>
        /// <returns>The method returns a decimal VQ value. If no VQ value is available for the requested SymbolId, the method returns null.</returns>
        public async Task<decimal?> GetLatestVqAsync(int symbolId, DateTime tradeDate)
        {
            var request = new RequestData
            {
                Url = $"research/latest-vq/{symbolId}/{tradeDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<decimal?>(request);
        }

        public List<VqValueContract> GetLatestVqValues(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"research/latest-vq/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<VqValueContract>>(request);
        }

        public async Task<List<VqValueContract>> GetLatestVqValuesAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"research/latest-vq/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<VqValueContract>>(request);
        }

        /// <summary>
        /// Get the Volatility Quotient (VQ) for the symbols in the specified date range
        /// This method returns the VQ values for the current date or for the nearest available day before it if there are no VQ values for the current date.
        /// The VQ% tells you how volatile a stock is - in other words, how much room you can give a stock in order to not get stopped out too early.
        /// </summary>
        /// <param name="contract">Parameters to load VQ values</param>
        /// <returns>The method returns a list of VQ values. If no VQ value is available for the requested SymbolId, then item with corresponding VQ value will be missing in the returned list.</returns>
        public List<VqValueContract> GetMultipleVqValues(GetVqValuesContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/latest-vq/get-multiple",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<VqValueContract>>(request);
        }

        /// <summary>
        /// Get the Volatility Quotient (VQ) for the symbols in the specified date range
        /// This method returns the VQ values for the current date or for the nearest available day before it if there are no VQ values for the current date.
        /// The VQ% tells you how volatile a stock is - in other words, how much room you can give a stock in order to not get stopped out too early.
        /// </summary>
        /// <param name="contract">Parameters to load VQ values</param>
        /// <returns>The method returns a list of VQ values. If no VQ value is available for the requested SymbolId, then item with corresponding VQ value will be missing in the returned list.</returns>
        public async Task<List<VqValueContract>> GetMultipleVqValuesAsync(GetVqValuesContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/latest-vq/get-multiple",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<VqValueContract>>(request);
        }

        /// <summary>
        /// Get symbol global rank and ranks for all criteria
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Symbol global rank with data by all criteria</returns>
        public GlobalRankContract GetGlobalRank(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"research/global-rank/{symbolId}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<GlobalRankContract>(request);
        }

        /// <summary>
        /// Get symbol global rank and ranks for all criteria
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Symbol global rank with data by all criteria</returns>
        public async Task<GlobalRankContract> GetGlobalRankAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"research/global-rank/{symbolId}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<GlobalRankContract>(request);
        }

        public List<GlobalRankContract> GetGlobalRanks(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"research/global-rank/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<GlobalRankContract>>(request);
        }

        public async Task<List<GlobalRankContract>> GetGlobalRanksAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"research/global-rank/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<GlobalRankContract>>(request);
        }

        public RiskRebalancerPortfolioDataContract GetRiskRebalancerPortfoliosData(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"research/risk-rebalancer/portfolios-data",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<RiskRebalancerPortfolioDataContract>(request);
        }

        public async Task<RiskRebalancerPortfolioDataContract> GetRiskRebalancerPortfoliosDataAsync(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"research/risk-rebalancer/portfolios-data",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<RiskRebalancerPortfolioDataContract>(request);
        }

        /// <summary>
        /// The method runs the Risk Rebalancer to allocate more capital to less volatile equities and less capital to your more volatile equities using the proprietary volatility metric, the Volatility Quotient (VQ) for the requested positions.
        /// </summary>
        /// <param name="contract">Contract to make a rebalance for positions.</param>
        /// <returns>The method returns the rebalanced positions of the selected portfolios.</returns>
        public RiskRebalancePositionsResultContract RiskRebalancePositions(RiskRebalanceInputContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/risk-rebalancer/positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<RiskRebalancePositionsResultContract>(request);
        }

        /// <summary>
        /// The method runs the Risk Rebalancer to allocate more capital to less volatile equities and less capital to your more volatile equities using the proprietary volatility metric, the Volatility Quotient (VQ) for the requested positions.
        /// </summary>
        /// <param name="contract">Contract to make a rebalance for positions.</param>
        /// <returns>The method returns the rebalanced positions of the selected portfolios.</returns>
        public async Task<RiskRebalancePositionsResultContract> RiskRebalancePositionsAsync(RiskRebalanceInputContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/risk-rebalancer/positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<RiskRebalancePositionsResultContract>(request);
        }

        /// <summary>
        /// The method prepares positions research data (prices, VQ, SSI etc.) required to run Risk Rebalancer.
        /// </summary>
        /// <param name="contract">Contract to prepare positions.</param>
        /// <returns>The method returns contract ready to run Risk Rebalancer.</returns>
        public RiskRebalancePositionsResultContract PreparePositions(RiskRebalanceInputContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/risk-rebalancer/prepare-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<RiskRebalancePositionsResultContract>(request);
        }

        /// <summary>
        /// The method prepares positions research data (prices, VQ, SSI etc.) required to run Risk Rebalancer.
        /// </summary>
        /// <param name="contract">Contract to prepare positions.</param>
        /// <returns>The method returns contract ready to run Risk Rebalancer.</returns>
        public async Task<RiskRebalancePositionsResultContract> PreparePositionsAsync(RiskRebalanceInputContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/risk-rebalancer/prepare-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<RiskRebalancePositionsResultContract>(request);
        }

        /// <summary>
        /// The method runs the Risk Rebalancer to allocate more capital to less volatile equities and less capital to your more volatile equities using the proprietary volatility metric, the Volatility Quotient (VQ) for the selected portfolios.
        /// </summary>
        /// <param name="contract">Contract to make a rebalance for portfolio.</param>
        /// <returns>The method returns the rebalanced portfolio information.</returns>
        public RiskRebalancePortfolioResultContract RiskRebalancePortfolio(RiskRebalancePortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/risk-rebalancer/portfolio",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<RiskRebalancePortfolioResultContract>(request);
        }

        /// <summary>
        /// The method runs the Risk Rebalancer to allocate more capital to less volatile equities and less capital to your more volatile equities using the proprietary volatility metric, the Volatility Quotient (VQ) for the selected portfolios.
        /// </summary>
        /// <param name="contract">Contract to make a rebalance for portfolio.</param>
        /// <returns>The method returns the rebalanced portfolio information.</returns>
        public async Task<RiskRebalancePortfolioResultContract> RiskRebalancePortfolioAsync(RiskRebalancePortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/risk-rebalancer/portfolio",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<RiskRebalancePortfolioResultContract>(request);
        }

        /// <summary>
        /// Get the portfolio VQ allocation for the requested portfolios.
        /// </summary>
        /// <param name="contract">Contract to get VQ allocation by portfolio.</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        public VqAllocationContract GetVqAllocation(GetVqAllocationByPortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/vq-analyzer/portfolio",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<VqAllocationContract>(request);
        }

        /// <summary>
        /// Get the portfolio VQ allocation for the requested portfolios.
        /// </summary>
        /// <param name="contract">Contract to get VQ allocation by portfolio.</param>
        /// <returns>The method returns the percent breakdown by low (below 15%), medium (between 15% and 30%), high (between 30% and 50%), sky high (above 50%) and not determined risk investments.</returns>
        public async Task<VqAllocationContract> GetVqAllocationAsync(GetVqAllocationByPortfolioContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/vq-analyzer/portfolio",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<VqAllocationContract>(request);
        }

        public List<GlobalRankAllocationContract> GetGlobalRankAllocation(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"research/global-rank-allocation",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<List<GlobalRankAllocationContract>>(request);
        }

        public async Task<List<GlobalRankAllocationContract>> GetGlobalRankAllocationAsync(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"research/global-rank-allocation",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<List<GlobalRankAllocationContract>>(request);
        }

        public AssetAllocationContract GetAssetAllocation(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"research/asset-allocation",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<AssetAllocationContract>(request);
        }

        public async Task<AssetAllocationContract> GetAssetAllocationAsync(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"research/asset-allocation",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<AssetAllocationContract>(request);
        }

        /// <summary>
        /// Get the value allocations grouped by symbols for the requested portfolio IDs.
        /// </summary>
        /// <param name="contract">Contract for getting allocations.</param>
        /// <returns>The method returns the contract with the common allocations for the requested portfolios.</returns>
        public ValueAllocationContract GetValueAllocation(GetValueAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/get-value-allocation",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<ValueAllocationContract>(request);
        }

        /// <summary>
        /// Get the value allocations grouped by symbols for the requested portfolio IDs.
        /// </summary>
        /// <param name="contract">Contract for getting allocations.</param>
        /// <returns>The method returns the contract with the common allocations for the requested portfolios.</returns>
        public async Task<ValueAllocationContract> GetValueAllocationAsync(GetValueAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/get-value-allocation",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<ValueAllocationContract>(request);
        }

        public List<SsiCurrentValueContract> GetSsiValues(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"research/ssi/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<SsiCurrentValueContract>>(request);
        }

        public async Task<List<SsiCurrentValueContract>> GetSsiValuesAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"research/ssi/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<SsiCurrentValueContract>>(request);
        }

        /// <summary>
        /// Get first historical SSI value by provided symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID</param>
        /// <returns>Historical SSI value</returns>
        public SsiHistoryValueContract GetSsiFirstPoint(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"research/ssi-history/get-first/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<SsiHistoryValueContract>(request);
        }

        /// <summary>
        /// Get first historical SSI value by provided symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID</param>
        /// <returns>Historical SSI value</returns>
        public async Task<SsiHistoryValueContract> GetSsiFirstPointAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"research/ssi-history/get-first/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<SsiHistoryValueContract>(request);
        }

        /// <summary>
        /// Get historical SSI values for the symbols in the specified date range
        /// </summary>
        /// <param name="contract">Parameters to get SSI history values</param>
        /// <returns>List of historical SSI values</returns>
        public List<SsiHistoryValueContract> GetMultipleSsiHistoryValues(GetSsiHistoryValuesContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/ssi-history/get-multiple",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<SsiHistoryValueContract>>(request);
        }

        /// <summary>
        /// Get historical SSI values for the symbols in the specified date range
        /// </summary>
        /// <param name="contract">Parameters to get SSI history values</param>
        /// <returns>List of historical SSI values</returns>
        public async Task<List<SsiHistoryValueContract>> GetMultipleSsiHistoryValuesAsync(GetSsiHistoryValuesContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/ssi-history/get-multiple",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<SsiHistoryValueContract>>(request);
        }

        /// <summary>
        /// Get the current State Stock Indicator (SSI) value for the symbol. The value indicates the current health of the stock (performing well, in a period of correction, or stopped out). If an SSI is not available by the symbol ID, the method returns null value.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the contract with SSI values for Long and Short positions adjusted by dividends.</returns>
        public SsiCurrentValueContract GetSsi(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"research/ssi/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<SsiCurrentValueContract>(request);
        }

        /// <summary>
        /// Get the current State Stock Indicator (SSI) value for the symbol. The value indicates the current health of the stock (performing well, in a period of correction, or stopped out). If an SSI is not available by the symbol ID, the method returns null value.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the contract with SSI values for Long and Short positions adjusted by dividends.</returns>
        public async Task<SsiCurrentValueContract> GetSsiAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"research/ssi/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<SsiCurrentValueContract>(request);
        }

        public SsiDistributionContract GetSsiDistributionByPortfolioIds(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"research/ssi-distribution/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<SsiDistributionContract>(request);
        }

        public async Task<SsiDistributionContract> GetSsiDistributionByPortfolioIdsAsync(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"research/ssi-distribution/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<SsiDistributionContract>(request);
        }

        /// <summary>
        /// Get SSI distribution history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate distribution</param>
        /// <returns>Contract with percentage values for each SSI status or null if calculation not possible.</returns>
        public List<SsiHistoricalDistributionContract> GetHistoricalSsiDistributionByPortfolioIds(GetHistoricalSsiDistributionByPortfolioIdsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/ssi-distribution-history/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<SsiHistoricalDistributionContract>>(request);
        }

        /// <summary>
        /// Get SSI distribution history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate distribution</param>
        /// <returns>Contract with percentage values for each SSI status or null if calculation not possible.</returns>
        public async Task<List<SsiHistoricalDistributionContract>> GetHistoricalSsiDistributionByPortfolioIdsAsync(GetHistoricalSsiDistributionByPortfolioIdsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/ssi-distribution-history/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<SsiHistoricalDistributionContract>>(request);
        }

        /// <summary>
        /// Get SSI Trend distribution history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate distribution</param>
        /// <returns>Contract with percentage values for each SSI Trend status or null if calculation not possible.</returns>
        public List<SsiTrendHistoricalDistributionContract> GetHistoricalSsiTrendDistributionByPortfolioIds(GetHistoricalSsiTrendDistributionByPortfolioIdsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/ssi-trend-distribution-history/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<SsiTrendHistoricalDistributionContract>>(request);
        }

        /// <summary>
        /// Get SSI Trend distribution history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate distribution</param>
        /// <returns>Contract with percentage values for each SSI Trend status or null if calculation not possible.</returns>
        public async Task<List<SsiTrendHistoricalDistributionContract>> GetHistoricalSsiTrendDistributionByPortfolioIdsAsync(GetHistoricalSsiTrendDistributionByPortfolioIdsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/ssi-trend-distribution-history/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<SsiTrendHistoricalDistributionContract>>(request);
        }

        /// <summary>
        /// The method provides a possibility to calculate the position size based on how much money you are willing to lose on this position.
        /// </summary>
        /// <param name="input">Contract to calculate position size.</param>
        /// <returns>The method returns the contract with recommended investment values.</returns>
        public PositionSizeByRiskContract CalculatePositionSizeByRisk(CalculatePositionSizeByRiskContract input)
        {
            var request = new RequestData
            {
                Url = $"research/position-size/risk",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<PositionSizeByRiskContract>(request);
        }

        /// <summary>
        /// The method provides a possibility to calculate the position size based on how much money you are willing to lose on this position.
        /// </summary>
        /// <param name="input">Contract to calculate position size.</param>
        /// <returns>The method returns the contract with recommended investment values.</returns>
        public async Task<PositionSizeByRiskContract> CalculatePositionSizeByRiskAsync(CalculatePositionSizeByRiskContract input)
        {
            var request = new RequestData
            {
                Url = $"research/position-size/risk",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<PositionSizeByRiskContract>(request);
        }

        /// <summary>
        /// The method provides a possibility to calculate the risk based on the position investment amount. This method is available only for long positions
        /// </summary>
        /// <param name="input">Contract to calculate position size.</param>
        /// <returns>Position investment amount.</returns>
        public PositionSizeByInvestmentContract CalculatePositionSizeByInvestment(CalculatePositionSizeByInvestmentContract input)
        {
            var request = new RequestData
            {
                Url = $"research/position-size/investment",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<PositionSizeByInvestmentContract>(request);
        }

        /// <summary>
        /// The method provides a possibility to calculate the risk based on the position investment amount. This method is available only for long positions
        /// </summary>
        /// <param name="input">Contract to calculate position size.</param>
        /// <returns>Position investment amount.</returns>
        public async Task<PositionSizeByInvestmentContract> CalculatePositionSizeByInvestmentAsync(CalculatePositionSizeByInvestmentContract input)
        {
            var request = new RequestData
            {
                Url = $"research/position-size/investment",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<PositionSizeByInvestmentContract>(request);
        }

        /// <summary>
        /// The method to calculate position for the list of symbols.
        /// </summary>
        /// <param name="contract">Contract to calculate position size with list of symbols.</param>
        /// <returns>List of positions after applied position size algorithm.</returns>
        public List<BulkPositionSizeResultContract> CalculateBulkPositionSize(CalculateBulkPositionSizeContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/position-size/bulk",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<BulkPositionSizeResultContract>>(request);
        }

        /// <summary>
        /// The method to calculate position for the list of symbols.
        /// </summary>
        /// <param name="contract">Contract to calculate position size with list of symbols.</param>
        /// <returns>List of positions after applied position size algorithm.</returns>
        public async Task<List<BulkPositionSizeResultContract>> CalculateBulkPositionSizeAsync(CalculateBulkPositionSizeContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/position-size/bulk",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<BulkPositionSizeResultContract>>(request);
        }

        /// <summary>
        /// The method will count number of input positions that will be passed to Pure Quant algorithm.
        /// </summary>
        /// <param name="input">Contract to run QuantTool.</param>
        /// <returns>Number of input positions that will be passed to Pure Quant algorithm.</returns>
        public int GetNumberOfInputPositionsForQuantTool(QuantToolInputContract input)
        {
            var request = new RequestData
            {
                Url = $"research/quant-tool/get-number-of-input-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<int>(request);
        }

        /// <summary>
        /// The method will count number of input positions that will be passed to Pure Quant algorithm.
        /// </summary>
        /// <param name="input">Contract to run QuantTool.</param>
        /// <returns>Number of input positions that will be passed to Pure Quant algorithm.</returns>
        public async Task<int> GetNumberOfInputPositionsForQuantToolAsync(QuantToolInputContract input)
        {
            var request = new RequestData
            {
                Url = $"research/quant-tool/get-number-of-input-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<int>(request);
        }

        /// <summary>
        /// The method runs the QuantTool for the provided set of positions and returns recommendations according to the internal TradeStops algorithm.
        /// </summary>
        /// <param name="input">Contract to run QuantTool.</param>
        /// <returns>The method returns an array of statistics and recommendations for the positions based on the input conditions.</returns>
        public List<QuantToolResultPositionContract> QuantTool(QuantToolInputContract input)
        {
            var request = new RequestData
            {
                Url = $"research/quant-tool",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return PerformRequest<List<QuantToolResultPositionContract>>(request);
        }

        /// <summary>
        /// The method runs the QuantTool for the provided set of positions and returns recommendations according to the internal TradeStops algorithm.
        /// </summary>
        /// <param name="input">Contract to run QuantTool.</param>
        /// <returns>The method returns an array of statistics and recommendations for the positions based on the input conditions.</returns>
        public async Task<List<QuantToolResultPositionContract>> QuantToolAsync(QuantToolInputContract input)
        {
            var request = new RequestData
            {
                Url = $"research/quant-tool",
                Method = HttpMethod.Post,
            };

            request.SetBody(input);

            return await PerformRequestAsync<List<QuantToolResultPositionContract>>(request);
        }

        /// <summary>
        /// Get equity performance (% change) line for portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        public object CalculatePortfoliosPerformanceLineExtended(CalculatePortfoliosPerfomanceLineContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/portfolios-performance-line-extended/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<object>(request);
        }

        /// <summary>
        /// Get equity performance (% change) line for portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        public async Task<object> CalculatePortfoliosPerformanceLineExtendedAsync(CalculatePortfoliosPerfomanceLineContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/portfolios-performance-line-extended/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<object>(request);
        }

        /// <summary>
        /// Get equity performance (% change) line for portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        public List<PortfolioPerformanceResultEquityContract> CalculatePortfoliosPerformanceLine(CalculatePortfoliosPerfomanceLineContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/portfolios-performance-line/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PortfolioPerformanceResultEquityContract>>(request);
        }

        /// <summary>
        /// Get equity performance (% change) line for portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        public async Task<List<PortfolioPerformanceResultEquityContract>> CalculatePortfoliosPerformanceLineAsync(CalculatePortfoliosPerfomanceLineContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/portfolios-performance-line/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PortfolioPerformanceResultEquityContract>>(request);
        }

        /// <summary>
        /// Get equity performance (% change) line for symbols
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        public List<PortfolioPerformanceResultEquityContract> CalculateSymbolsPerformanceLine(CalculateSymbolsPerformanceLineContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/symbols-performance-line/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PortfolioPerformanceResultEquityContract>>(request);
        }

        /// <summary>
        /// Get equity performance (% change) line for symbols
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        public async Task<List<PortfolioPerformanceResultEquityContract>> CalculateSymbolsPerformanceLineAsync(CalculateSymbolsPerformanceLineContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/symbols-performance-line/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PortfolioPerformanceResultEquityContract>>(request);
        }

        /// <summary>
        /// Get equity performance line (% change) for positions
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        public List<PortfolioPerformanceResultEquityContract> CalculatePositionsPerformanceLine(CalculatePositionsPerfomanceLineContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/positions-performance-line",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PortfolioPerformanceResultEquityContract>>(request);
        }

        /// <summary>
        /// Get equity performance line (% change) for positions
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        public async Task<List<PortfolioPerformanceResultEquityContract>> CalculatePositionsPerformanceLineAsync(CalculatePositionsPerfomanceLineContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/positions-performance-line",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PortfolioPerformanceResultEquityContract>>(request);
        }

        /// <summary>
        /// Get equity performance (% change) line for newsletter portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        public List<PortfolioPerformanceResultEquityContract> CalculateNewsletterPortfoliosPerformanceLine(CalculateNewsletterPortfoliosPerfomanceLineContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/newsletter-portfolios-performance-line/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<PortfolioPerformanceResultEquityContract>>(request);
        }

        /// <summary>
        /// Get equity performance (% change) line for newsletter portfolios
        /// </summary>
        /// <param name="contract">Contract with parameters to get performance line</param>
        /// <returns>List of performance line points</returns>
        public async Task<List<PortfolioPerformanceResultEquityContract>> CalculateNewsletterPortfoliosPerformanceLineAsync(CalculateNewsletterPortfoliosPerfomanceLineContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/newsletter-portfolios-performance-line/",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<PortfolioPerformanceResultEquityContract>>(request);
        }

        /// <summary>
        /// Get diversification ratio by portfolio Ids.
        /// </summary>
        /// <param name="contract">Contract with parameters to get diversification ratio</param>
        /// <returns>Diversification ratio for given portfolio Ids with corresponding Portfolio Volatility Quotient or null if calculation not possible</returns>
        public DiversificationRatioContract GetDiversificationRatioByPortfolioIds(GetDiversificationRatioByPortfolioIdsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/diversification-ratio/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<DiversificationRatioContract>(request);
        }

        /// <summary>
        /// Get diversification ratio by portfolio Ids.
        /// </summary>
        /// <param name="contract">Contract with parameters to get diversification ratio</param>
        /// <returns>Diversification ratio for given portfolio Ids with corresponding Portfolio Volatility Quotient or null if calculation not possible</returns>
        public async Task<DiversificationRatioContract> GetDiversificationRatioByPortfolioIdsAsync(GetDiversificationRatioByPortfolioIdsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/diversification-ratio/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<DiversificationRatioContract>(request);
        }

        /// <summary>
        /// Get Portfolio VQ by list of portfolio Ids
        /// </summary>
        /// <param name="contract">Contract with parameters to get Portfolio VQ</param>
        /// <returns>Diversification ratio for given portfolio Ids or null if calculation not possible</returns>
        public decimal? GetPortfoliosVq(GetPortfoliosVqContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/portfolio-vq/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<decimal?>(request);
        }

        /// <summary>
        /// Get Portfolio VQ by list of portfolio Ids
        /// </summary>
        /// <param name="contract">Contract with parameters to get Portfolio VQ</param>
        /// <returns>Diversification ratio for given portfolio Ids or null if calculation not possible</returns>
        public async Task<decimal?> GetPortfoliosVqAsync(GetPortfoliosVqContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/portfolio-vq/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<decimal?>(request);
        }

        /// <summary>
        /// Get the current (latest) Roc (Rate of Change)
        /// This method returns the contract for latest Roc (Rate of Change) value
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-10).</param>
        /// <param name="isAdjusted">Adjusted</param>
        /// <returns>Contract for latest Roc value</returns>
        public RocValueContract GetLatestRocValue(int symbolId, DateTime tradeDate, bool isAdjusted)
        {
            var request = new RequestData
            {
                Url = $"research/latest-roc/{symbolId}/{tradeDate:yyyy-MM-dd}/{isAdjusted}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<RocValueContract>(request);
        }

        /// <summary>
        /// Get the current (latest) Roc (Rate of Change)
        /// This method returns the contract for latest Roc (Rate of Change) value
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <param name="tradeDate">Trade Date (example: /2017-11-10).</param>
        /// <param name="isAdjusted">Adjusted</param>
        /// <returns>Contract for latest Roc value</returns>
        public async Task<RocValueContract> GetLatestRocValueAsync(int symbolId, DateTime tradeDate, bool isAdjusted)
        {
            var request = new RequestData
            {
                Url = $"research/latest-roc/{symbolId}/{tradeDate:yyyy-MM-dd}/{isAdjusted}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<RocValueContract>(request);
        }

        /// <summary>
        /// Get the current (latest) Roc (Rate of Change)
        /// This method returns contracts for latest Roc values
        /// </summary>
        /// <param name="contract">Contract for getting RocValueContracts</param>
        /// <returns>Contract for latest Roc values</returns>
        public List<RocValueContract> GetLatestRocValues(GetRocValuesContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/latest-roc/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<RocValueContract>>(request);
        }

        /// <summary>
        /// Get the current (latest) Roc (Rate of Change)
        /// This method returns contracts for latest Roc values
        /// </summary>
        /// <param name="contract">Contract for getting RocValueContracts</param>
        /// <returns>Contract for latest Roc values</returns>
        public async Task<List<RocValueContract>> GetLatestRocValuesAsync(GetRocValuesContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/latest-roc/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<RocValueContract>>(request);
        }

        public List<BullBearIndicatorContract> GetBullBearIndicators(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"research/bull-bear-indicators/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<BullBearIndicatorContract>>(request);
        }

        public async Task<List<BullBearIndicatorContract>> GetBullBearIndicatorsAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"research/bull-bear-indicators/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<BullBearIndicatorContract>>(request);
        }

        /// <summary>
        /// Search instrument ratings.
        /// </summary>
        /// <param name="contract">Contract to search instrument ratings.</param>
        /// <returns>The method returns the search result contract.</returns>
        public SearchResultContract<InstrumentRatingContract> SearchInstrumentRatings(SearchInstrumentRatingsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/search-instrument-ratings",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SearchResultContract<InstrumentRatingContract>>(request);
        }

        /// <summary>
        /// Search instrument ratings.
        /// </summary>
        /// <param name="contract">Contract to search instrument ratings.</param>
        /// <returns>The method returns the search result contract.</returns>
        public async Task<SearchResultContract<InstrumentRatingContract>> SearchInstrumentRatingsAsync(SearchInstrumentRatingsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/search-instrument-ratings",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SearchResultContract<InstrumentRatingContract>>(request);
        }

        /// <summary>
        /// Get symbols ranked by Smith Rank.
        /// </summary>
        /// <param name="contract">Contract to get Smith Rank.</param>
        /// <returns>Returns a list of ranked symbol.</returns>
        public List<SmithRankContract> GetSmithRanks(GetSmithRankContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/smith-ranks",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<SmithRankContract>>(request);
        }

        /// <summary>
        /// Get symbols ranked by Smith Rank.
        /// </summary>
        /// <param name="contract">Contract to get Smith Rank.</param>
        /// <returns>Returns a list of ranked symbol.</returns>
        public async Task<List<SmithRankContract>> GetSmithRanksAsync(GetSmithRankContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/smith-ranks",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<SmithRankContract>>(request);
        }

        /// <summary>
        /// Get symbol fun facts.
        /// </summary>
        /// <param name="contract">Contract to get fun facts.</param>
        /// <returns>Fun facts on the symbol.</returns>
        public FunFactsContract GetFunFacts(GetFunFactsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/fun-facts",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<FunFactsContract>(request);
        }

        /// <summary>
        /// Get symbol fun facts.
        /// </summary>
        /// <param name="contract">Contract to get fun facts.</param>
        /// <returns>Fun facts on the symbol.</returns>
        public async Task<FunFactsContract> GetFunFactsAsync(GetFunFactsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/fun-facts",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<FunFactsContract>(request);
        }

        /// <summary>
        /// Get option research statistic, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get option research statistic.</param>
        /// <returns>Option research statistic by symbol.</returns>
        public OptionResearchStatisticContract GetOptionResearchStatistic(GetOptionResearchStatisticContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/option-statistic",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<OptionResearchStatisticContract>(request);
        }

        /// <summary>
        /// Get option research statistic, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get option research statistic.</param>
        /// <returns>Option research statistic by symbol.</returns>
        public async Task<OptionResearchStatisticContract> GetOptionResearchStatisticAsync(GetOptionResearchStatisticContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/option-statistic",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<OptionResearchStatisticContract>(request);
        }

        /// <summary>
        /// Get option research statistics, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get bulk option research statistic.</param>
        /// <returns>Option research statistics by symbols.</returns>
        public List<OptionResearchStatisticContract> GetOptionResearchStatistics(GetBulkOptionResearchStatisticContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/get-option-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<OptionResearchStatisticContract>>(request);
        }

        /// <summary>
        /// Get option research statistics, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get bulk option research statistic.</param>
        /// <returns>Option research statistics by symbols.</returns>
        public async Task<List<OptionResearchStatisticContract>> GetOptionResearchStatisticsAsync(GetBulkOptionResearchStatisticContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/get-option-statistics",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<OptionResearchStatisticContract>>(request);
        }

        /// <summary>
        /// Search option research statistic, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get filtered option research statistic.</param>
        /// <returns>Search option research statistic</returns>
        public List<OptionResearchStatisticContract> SearchOptionResearchStatistic(SearchOptionResearchStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/search-option-statistic",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<OptionResearchStatisticContract>>(request);
        }

        /// <summary>
        /// Search option research statistic, which is periodically calculated based on intraday data.
        /// </summary>
        /// <param name="contract">Contract to get filtered option research statistic.</param>
        /// <returns>Search option research statistic</returns>
        public async Task<List<OptionResearchStatisticContract>> SearchOptionResearchStatisticAsync(SearchOptionResearchStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/search-option-statistic",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<OptionResearchStatisticContract>>(request);
        }

        /// <summary>
        /// Get all current distributions of a symbol group.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Current distributions of a symbol group.</returns>
        public SymbolGroupDistributionsContract GetSymbolGroupDistributions(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"research/symbol-group-distributions/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<SymbolGroupDistributionsContract>(request);
        }

        /// <summary>
        /// Get all current distributions of a symbol group.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Current distributions of a symbol group.</returns>
        public async Task<SymbolGroupDistributionsContract> GetSymbolGroupDistributionsAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"research/symbol-group-distributions/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<SymbolGroupDistributionsContract>(request);
        }

        /// <summary>
        /// Get Global Rank allocation history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate allocation</param>
        /// <returns>Contract with percentage values for each Global Rank status or null if calculation not possible.</returns>
        public List<GlobalRankHistoricalAllocationContract> GetHistoricalGlobalRankAllocation(GetHistoricalGlobalRankAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/global-rank-allocation-history/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<GlobalRankHistoricalAllocationContract>>(request);
        }

        /// <summary>
        /// Get Global Rank allocation history by portfolio IDs.
        /// </summary>
        /// <param name="contract">Parameters to calculate allocation</param>
        /// <returns>Contract with percentage values for each Global Rank status or null if calculation not possible.</returns>
        public async Task<List<GlobalRankHistoricalAllocationContract>> GetHistoricalGlobalRankAllocationAsync(GetHistoricalGlobalRankAllocationContract contract)
        {
            var request = new RequestData
            {
                Url = $"research/global-rank-allocation-history/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<GlobalRankHistoricalAllocationContract>>(request);
        }
    }

    public interface IResetPasswordClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Step 1 of Forgot Password flow.
        /// The method is used to send Reset Password email to user.
        /// </summary>
        /// <param name="contract">User's email and product information.</param>
        /// <returns>The method returns HTTP status 200 OK in case of success.</returns>
        void SendResetPasswordEmail(SendResetPasswordEmailContract contract);

        /// <summary>
        /// Step 1 of Forgot Password flow.
        /// The method is used to send Reset Password email to user.
        /// </summary>
        /// <param name="contract">User's email and product information.</param>
        /// <returns>The method returns HTTP status 200 OK in case of success.</returns>
        Task SendResetPasswordEmailAsync(SendResetPasswordEmailContract contract);

        /// <summary>
        /// Alternative Step 1 of Forgot Password flow, used in case when Reset Password email is generated outside of TS API.
        /// The method creates a security token to to authorize access to the  the password reset of the user account.
        /// </summary>
        /// <param name="contract">Contract to create reset token,</param>
        /// <returns>The method returns the generated token to be used during the process of password reset.</returns>
        ResetPasswordTokenContract CreateResetPasswordToken(CreateResetPasswordTokenContract contract);

        /// <summary>
        /// Alternative Step 1 of Forgot Password flow, used in case when Reset Password email is generated outside of TS API.
        /// The method creates a security token to to authorize access to the  the password reset of the user account.
        /// </summary>
        /// <param name="contract">Contract to create reset token,</param>
        /// <returns>The method returns the generated token to be used during the process of password reset.</returns>
        Task<ResetPasswordTokenContract> CreateResetPasswordTokenAsync(CreateResetPasswordTokenContract contract);

        /// <summary>
        /// Step 2.1 of Forgot Password flow.
        /// The method validates received token due to the method password reset CreateResetPasswordToken .
        /// </summary>
        /// <param name="contract">Contract to validate reset token.</param>
        /// <returns>The method returns HTTP status code 200 after the validation of the token.</returns>
        void ValidateResetPasswordToken(ResetPasswordTokenContract contract);

        /// <summary>
        /// Step 2.1 of Forgot Password flow.
        /// The method validates received token due to the method password reset CreateResetPasswordToken .
        /// </summary>
        /// <param name="contract">Contract to validate reset token.</param>
        /// <returns>The method returns HTTP status code 200 after the validation of the token.</returns>
        Task ValidateResetPasswordTokenAsync(ResetPasswordTokenContract contract);

        /// <summary>
        /// Step 2.2 of Forgot Password flow.
        /// The method returns the user account information.
        /// </summary>
        /// <param name="contract">Reset token contract.</param>
        /// <returns>Information about the user</returns>
        TradeSmithUserContract FindUserByToken(ResetPasswordTokenContract contract);

        /// <summary>
        /// Step 2.2 of Forgot Password flow.
        /// The method returns the user account information.
        /// </summary>
        /// <param name="contract">Reset token contract.</param>
        /// <returns>Information about the user</returns>
        Task<TradeSmithUserContract> FindUserByTokenAsync(ResetPasswordTokenContract contract);

        /// <summary>
        /// Step 3 of Forgot Password Flow.
        /// The method resets the password.
        /// </summary>
        /// <param name="contract">Contract to reset password.</param>
        /// <returns>The method returns HTTP status code 200 after the password resetting.</returns>
        void ResetPassword(ResetPasswordContract contract);

        /// <summary>
        /// Step 3 of Forgot Password Flow.
        /// The method resets the password.
        /// </summary>
        /// <param name="contract">Contract to reset password.</param>
        /// <returns>The method returns HTTP status code 200 after the password resetting.</returns>
        Task ResetPasswordAsync(ResetPasswordContract contract);
    }

    public interface IResetPasswordClientByContextKeyApiMethods : IResetPasswordClientByLicenseKeyApiMethods
    {
    }

    public interface IResetPasswordClientByOrganizationApiMethods
    {
    }

    public partial interface IResetPasswordClient : IResetPasswordClientByLicenseKeyApiMethods, IClientByLicenseKey<IResetPasswordClient, IResetPasswordClientForUser, IResetPasswordClientForOrganization>
    {
    }

    public interface IResetPasswordClientForUser : IResetPasswordClientByContextKeyApiMethods, IClientByContext<IResetPasswordClientForUser, IResetPasswordClientForOrganization>
    {
    }

    public interface IResetPasswordClientForOrganization : IResetPasswordClientByOrganizationApiMethods
    {
    }

    public partial class ResetPasswordClient : BaseClient<IResetPasswordClient, IResetPasswordClientForUser, IResetPasswordClientForOrganization, ResetPasswordClient>, IResetPasswordClient, IResetPasswordClientForUser, IResetPasswordClientForOrganization
    {
        /// <summary>
        /// Step 1 of Forgot Password flow.
        /// The method is used to send Reset Password email to user.
        /// </summary>
        /// <param name="contract">User's email and product information.</param>
        /// <returns>The method returns HTTP status 200 OK in case of success.</returns>
        public void SendResetPasswordEmail(SendResetPasswordEmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"reset-password/send-email",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Step 1 of Forgot Password flow.
        /// The method is used to send Reset Password email to user.
        /// </summary>
        /// <param name="contract">User's email and product information.</param>
        /// <returns>The method returns HTTP status 200 OK in case of success.</returns>
        public async Task SendResetPasswordEmailAsync(SendResetPasswordEmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"reset-password/send-email",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Alternative Step 1 of Forgot Password flow, used in case when Reset Password email is generated outside of TS API.
        /// The method creates a security token to to authorize access to the  the password reset of the user account.
        /// </summary>
        /// <param name="contract">Contract to create reset token,</param>
        /// <returns>The method returns the generated token to be used during the process of password reset.</returns>
        public ResetPasswordTokenContract CreateResetPasswordToken(CreateResetPasswordTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"reset-password/create-token",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<ResetPasswordTokenContract>(request);
        }

        /// <summary>
        /// Alternative Step 1 of Forgot Password flow, used in case when Reset Password email is generated outside of TS API.
        /// The method creates a security token to to authorize access to the  the password reset of the user account.
        /// </summary>
        /// <param name="contract">Contract to create reset token,</param>
        /// <returns>The method returns the generated token to be used during the process of password reset.</returns>
        public async Task<ResetPasswordTokenContract> CreateResetPasswordTokenAsync(CreateResetPasswordTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"reset-password/create-token",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<ResetPasswordTokenContract>(request);
        }

        /// <summary>
        /// Step 2.1 of Forgot Password flow.
        /// The method validates received token due to the method password reset CreateResetPasswordToken .
        /// </summary>
        /// <param name="contract">Contract to validate reset token.</param>
        /// <returns>The method returns HTTP status code 200 after the validation of the token.</returns>
        public void ValidateResetPasswordToken(ResetPasswordTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"reset-password/validate-token",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Step 2.1 of Forgot Password flow.
        /// The method validates received token due to the method password reset CreateResetPasswordToken .
        /// </summary>
        /// <param name="contract">Contract to validate reset token.</param>
        /// <returns>The method returns HTTP status code 200 after the validation of the token.</returns>
        public async Task ValidateResetPasswordTokenAsync(ResetPasswordTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"reset-password/validate-token",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Step 2.2 of Forgot Password flow.
        /// The method returns the user account information.
        /// </summary>
        /// <param name="contract">Reset token contract.</param>
        /// <returns>Information about the user</returns>
        public TradeSmithUserContract FindUserByToken(ResetPasswordTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"reset-password/find-user-by-token",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<TradeSmithUserContract>(request);
        }

        /// <summary>
        /// Step 2.2 of Forgot Password flow.
        /// The method returns the user account information.
        /// </summary>
        /// <param name="contract">Reset token contract.</param>
        /// <returns>Information about the user</returns>
        public async Task<TradeSmithUserContract> FindUserByTokenAsync(ResetPasswordTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"reset-password/find-user-by-token",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }

        /// <summary>
        /// Step 3 of Forgot Password Flow.
        /// The method resets the password.
        /// </summary>
        /// <param name="contract">Contract to reset password.</param>
        /// <returns>The method returns HTTP status code 200 after the password resetting.</returns>
        public void ResetPassword(ResetPasswordContract contract)
        {
            var request = new RequestData
            {
                Url = $"reset-password",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Step 3 of Forgot Password Flow.
        /// The method resets the password.
        /// </summary>
        /// <param name="contract">Contract to reset password.</param>
        /// <returns>The method returns HTTP status code 200 after the password resetting.</returns>
        public async Task ResetPasswordAsync(ResetPasswordContract contract)
        {
            var request = new RequestData
            {
                Url = $"reset-password",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }
    }

    public interface IRightWayChartsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get symbol configurations.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return symbol configurations.</returns>
        List<RwcSymbolConfigurationContract> GetSymbolConfigurations(int symbolId);

        /// <summary>
        /// Get symbol configurations.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return symbol configurations.</returns>
        Task<List<RwcSymbolConfigurationContract>> GetSymbolConfigurationsAsync(int symbolId);

        HttpResponseMessage GetAllSymbolsData();

        Task<HttpResponseMessage> GetAllSymbolsDataAsync();
    }

    public interface IRightWayChartsClientByContextKeyApiMethods : IRightWayChartsClientByLicenseKeyApiMethods
    {
    }

    public interface IRightWayChartsClientByOrganizationApiMethods
    {
    }

    public partial interface IRightWayChartsClient : IRightWayChartsClientByLicenseKeyApiMethods, IClientByLicenseKey<IRightWayChartsClient, IRightWayChartsClientForUser, IRightWayChartsClientForOrganization>
    {
    }

    public interface IRightWayChartsClientForUser : IRightWayChartsClientByContextKeyApiMethods, IClientByContext<IRightWayChartsClientForUser, IRightWayChartsClientForOrganization>
    {
    }

    public interface IRightWayChartsClientForOrganization : IRightWayChartsClientByOrganizationApiMethods
    {
    }

    public partial class RightWayChartsClient : BaseClient<IRightWayChartsClient, IRightWayChartsClientForUser, IRightWayChartsClientForOrganization, RightWayChartsClient>, IRightWayChartsClient, IRightWayChartsClientForUser, IRightWayChartsClientForOrganization
    {
        /// <summary>
        /// Get symbol configurations.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return symbol configurations.</returns>
        public List<RwcSymbolConfigurationContract> GetSymbolConfigurations(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"right-way-charts/symbol-configurations/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<RwcSymbolConfigurationContract>>(request);
        }

        /// <summary>
        /// Get symbol configurations.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return symbol configurations.</returns>
        public async Task<List<RwcSymbolConfigurationContract>> GetSymbolConfigurationsAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"right-way-charts/symbol-configurations/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<RwcSymbolConfigurationContract>>(request);
        }

        public HttpResponseMessage GetAllSymbolsData()
        {
            var request = new RequestData
            {
                Url = $"right-way-charts/download-symbols-data",
                Method = HttpMethod.Get,
            };

            return PerformRequest<HttpResponseMessage>(request);
        }

        public async Task<HttpResponseMessage> GetAllSymbolsDataAsync()
        {
            var request = new RequestData
            {
                Url = $"right-way-charts/download-symbols-data",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<HttpResponseMessage>(request);
        }
    }

    public interface ISectorsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the information about all available Sectors.
        /// </summary>
        /// <returns>The method returns the list of available sectors.</returns>
        List<IndustryClassificationContract> GetAllSectors();

        /// <summary>
        /// Get the information about all available Sectors.
        /// </summary>
        /// <returns>The method returns the list of available sectors.</returns>
        Task<List<IndustryClassificationContract>> GetAllSectorsAsync();
    }

    public interface ISectorsClientByContextKeyApiMethods : ISectorsClientByLicenseKeyApiMethods
    {
    }

    public interface ISectorsClientByOrganizationApiMethods
    {
    }

    public partial interface ISectorsClient : ISectorsClientByLicenseKeyApiMethods, IClientByLicenseKey<ISectorsClient, ISectorsClientForUser, ISectorsClientForOrganization>
    {
    }

    public interface ISectorsClientForUser : ISectorsClientByContextKeyApiMethods, IClientByContext<ISectorsClientForUser, ISectorsClientForOrganization>
    {
    }

    public interface ISectorsClientForOrganization : ISectorsClientByOrganizationApiMethods
    {
    }

    public partial class SectorsClient : BaseClient<ISectorsClient, ISectorsClientForUser, ISectorsClientForOrganization, SectorsClient>, ISectorsClient, ISectorsClientForUser, ISectorsClientForOrganization
    {
        /// <summary>
        /// Get the information about all available Sectors.
        /// </summary>
        /// <returns>The method returns the list of available sectors.</returns>
        public List<IndustryClassificationContract> GetAllSectors()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/sectors",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<IndustryClassificationContract>>(request);
        }

        /// <summary>
        /// Get the information about all available Sectors.
        /// </summary>
        /// <returns>The method returns the list of available sectors.</returns>
        public async Task<List<IndustryClassificationContract>> GetAllSectorsAsync()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/sectors",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<IndustryClassificationContract>>(request);
        }
    }

    public interface IStockFinderClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">ID of the search.</param>
        /// <returns>The method returns stock finder search.</returns>
        StockFinderSearchCommonContract GetStockFinderSearch(int stockFinderSearchId);

        /// <summary>
        /// Get stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">ID of the search.</param>
        /// <returns>The method returns stock finder search.</returns>
        Task<StockFinderSearchCommonContract> GetStockFinderSearchAsync(int stockFinderSearchId);
    }

    public interface IStockFinderClientByContextKeyApiMethods : IStockFinderClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Find stocks corresponding to applied filters. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Stock Finder parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        List<StockFinderResultContract> GetStockFinderResults(StockFinderInputContract contract);

        /// <summary>
        /// Find stocks corresponding to applied filters. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Stock Finder parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        Task<List<StockFinderResultContract>> GetStockFinderResultsAsync(StockFinderInputContract contract);

        /// <summary>
        /// Get stock finder results by saved stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">Saved stock finder search ID.</param>
        /// <returns>The method returns an array of the data containing the results of saved search.</returns>
        List<StockFinderResultContract> GetStockFinderResults(int stockFinderSearchId);

        /// <summary>
        /// Get stock finder results by saved stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">Saved stock finder search ID.</param>
        /// <returns>The method returns an array of the data containing the results of saved search.</returns>
        Task<List<StockFinderResultContract>> GetStockFinderResultsAsync(int stockFinderSearchId);

        /// <summary>
        /// Get stock finder result symbol IDs by saved stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">Saved stock finder search ID.</param>
        /// <returns>The method returns an array of the symbol IDs containing the results of saved search.</returns>
        List<int> GetStockFinderResultSymbolIds(int stockFinderSearchId);

        /// <summary>
        /// Get stock finder result symbol IDs by saved stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">Saved stock finder search ID.</param>
        /// <returns>The method returns an array of the symbol IDs containing the results of saved search.</returns>
        Task<List<int>> GetStockFinderResultSymbolIdsAsync(int stockFinderSearchId);

        /// <summary>
        /// Create stock finder search.
        /// </summary>
        /// <param name="contract">Parameters to create stock finder search.</param>
        /// <returns>The method returns created stock finder search.</returns>
        StockFinderSearchContract CreateStockFinderSearch(CreateStockFinderSearchContract contract);

        /// <summary>
        /// Create stock finder search.
        /// </summary>
        /// <param name="contract">Parameters to create stock finder search.</param>
        /// <returns>The method returns created stock finder search.</returns>
        Task<StockFinderSearchContract> CreateStockFinderSearchAsync(CreateStockFinderSearchContract contract);

        /// <summary>
        /// Delete stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">ID of the search.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the filter.</returns>
        void DeleteStockFinderSearch(int stockFinderSearchId);

        /// <summary>
        /// Delete stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">ID of the search.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the filter.</returns>
        Task DeleteStockFinderSearchAsync(int stockFinderSearchId);

        /// <summary>
        /// Get list of current user's stock finder searches.
        /// </summary>
        /// <returns>The method returns list of current user's stock finder searches.</returns>
        List<StockFinderSearchContract> GetUserStockFinderSearches();

        /// <summary>
        /// Get list of current user's stock finder searches.
        /// </summary>
        /// <returns>The method returns list of current user's stock finder searches.</returns>
        Task<List<StockFinderSearchContract>> GetUserStockFinderSearchesAsync();
    }

    public interface IStockFinderClientByOrganizationApiMethods
    {
    }

    public partial interface IStockFinderClient : IStockFinderClientByLicenseKeyApiMethods, IClientByLicenseKey<IStockFinderClient, IStockFinderClientForUser, IStockFinderClientForOrganization>
    {
    }

    public interface IStockFinderClientForUser : IStockFinderClientByContextKeyApiMethods, IClientByContext<IStockFinderClientForUser, IStockFinderClientForOrganization>
    {
    }

    public interface IStockFinderClientForOrganization : IStockFinderClientByOrganizationApiMethods
    {
    }

    public partial class StockFinderClient : BaseClient<IStockFinderClient, IStockFinderClientForUser, IStockFinderClientForOrganization, StockFinderClient>, IStockFinderClient, IStockFinderClientForUser, IStockFinderClientForOrganization
    {
        /// <summary>
        /// Find stocks corresponding to applied filters. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Stock Finder parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        public List<StockFinderResultContract> GetStockFinderResults(StockFinderInputContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<StockFinderResultContract>>(request);
        }

        /// <summary>
        /// Find stocks corresponding to applied filters. All filters in input contract are optional. If no filters set, then no data will be returned.
        /// </summary>
        /// <param name="contract">Stock Finder parameters to search.</param>
        /// <returns>The method returns an array of the data containing the results of search.</returns>
        public async Task<List<StockFinderResultContract>> GetStockFinderResultsAsync(StockFinderInputContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<StockFinderResultContract>>(request);
        }

        /// <summary>
        /// Get stock finder results by saved stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">Saved stock finder search ID.</param>
        /// <returns>The method returns an array of the data containing the results of saved search.</returns>
        public List<StockFinderResultContract> GetStockFinderResults(int stockFinderSearchId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/{stockFinderSearchId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<StockFinderResultContract>>(request);
        }

        /// <summary>
        /// Get stock finder results by saved stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">Saved stock finder search ID.</param>
        /// <returns>The method returns an array of the data containing the results of saved search.</returns>
        public async Task<List<StockFinderResultContract>> GetStockFinderResultsAsync(int stockFinderSearchId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/{stockFinderSearchId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<StockFinderResultContract>>(request);
        }

        /// <summary>
        /// Get stock finder result symbol IDs by saved stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">Saved stock finder search ID.</param>
        /// <returns>The method returns an array of the symbol IDs containing the results of saved search.</returns>
        public List<int> GetStockFinderResultSymbolIds(int stockFinderSearchId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/symbol-ids/{stockFinderSearchId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<int>>(request);
        }

        /// <summary>
        /// Get stock finder result symbol IDs by saved stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">Saved stock finder search ID.</param>
        /// <returns>The method returns an array of the symbol IDs containing the results of saved search.</returns>
        public async Task<List<int>> GetStockFinderResultSymbolIdsAsync(int stockFinderSearchId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/symbol-ids/{stockFinderSearchId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<int>>(request);
        }

        /// <summary>
        /// Create stock finder search.
        /// </summary>
        /// <param name="contract">Parameters to create stock finder search.</param>
        /// <returns>The method returns created stock finder search.</returns>
        public StockFinderSearchContract CreateStockFinderSearch(CreateStockFinderSearchContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/create-user-search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<StockFinderSearchContract>(request);
        }

        /// <summary>
        /// Create stock finder search.
        /// </summary>
        /// <param name="contract">Parameters to create stock finder search.</param>
        /// <returns>The method returns created stock finder search.</returns>
        public async Task<StockFinderSearchContract> CreateStockFinderSearchAsync(CreateStockFinderSearchContract contract)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/create-user-search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<StockFinderSearchContract>(request);
        }

        /// <summary>
        /// Delete stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">ID of the search.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the filter.</returns>
        public void DeleteStockFinderSearch(int stockFinderSearchId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/delete-user-search/{stockFinderSearchId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">ID of the search.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the filter.</returns>
        public async Task DeleteStockFinderSearchAsync(int stockFinderSearchId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/delete-user-search/{stockFinderSearchId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get list of current user's stock finder searches.
        /// </summary>
        /// <returns>The method returns list of current user's stock finder searches.</returns>
        public List<StockFinderSearchContract> GetUserStockFinderSearches()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/get-user-searches",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<StockFinderSearchContract>>(request);
        }

        /// <summary>
        /// Get list of current user's stock finder searches.
        /// </summary>
        /// <returns>The method returns list of current user's stock finder searches.</returns>
        public async Task<List<StockFinderSearchContract>> GetUserStockFinderSearchesAsync()
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/get-user-searches",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<StockFinderSearchContract>>(request);
        }

        /// <summary>
        /// Get stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">ID of the search.</param>
        /// <returns>The method returns stock finder search.</returns>
        public StockFinderSearchCommonContract GetStockFinderSearch(int stockFinderSearchId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/get-stock-finder-search/{stockFinderSearchId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<StockFinderSearchCommonContract>(request);
        }

        /// <summary>
        /// Get stock finder search.
        /// </summary>
        /// <param name="stockFinderSearchId">ID of the search.</param>
        /// <returns>The method returns stock finder search.</returns>
        public async Task<StockFinderSearchCommonContract> GetStockFinderSearchAsync(int stockFinderSearchId)
        {
            var request = new RequestData
            {
                Url = $"trade-ideas/stock-finder/get-stock-finder-search/{stockFinderSearchId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<StockFinderSearchCommonContract>(request);
        }
    }

    public interface ISymbolGroupsClientByLicenseKeyApiMethods
    {
        List<SymbolGroupContract> GetSymbolGroups(List<SymbolGroupTypes> symbolGroupIds);

        Task<List<SymbolGroupContract>> GetSymbolGroupsAsync(List<SymbolGroupTypes> symbolGroupIds);

        /// <summary>
        /// Get all symbols by symbol group
        /// </summary>
        /// <param name="symbolGroupId">Symbol group ID (enumeration value)</param>
        /// <returns>The method returns the list of symbols</returns>
        List<SymbolContract> GetSymbolsBySymbolGroup(SymbolGroupTypes symbolGroupId);

        /// <summary>
        /// Get all symbols by symbol group
        /// </summary>
        /// <param name="symbolGroupId">Symbol group ID (enumeration value)</param>
        /// <returns>The method returns the list of symbols</returns>
        Task<List<SymbolContract>> GetSymbolsBySymbolGroupAsync(SymbolGroupTypes symbolGroupId);

        List<SymbolWithSymbolGroupContract> GetSymbolsBySymbolGroups(List<SymbolGroupTypes> symbolGroupIds);

        Task<List<SymbolWithSymbolGroupContract>> GetSymbolsBySymbolGroupsAsync(List<SymbolGroupTypes> symbolGroupIds);
    }

    public interface ISymbolGroupsClientByContextKeyApiMethods : ISymbolGroupsClientByLicenseKeyApiMethods
    {
    }

    public interface ISymbolGroupsClientByOrganizationApiMethods
    {
    }

    public partial interface ISymbolGroupsClient : ISymbolGroupsClientByLicenseKeyApiMethods, IClientByLicenseKey<ISymbolGroupsClient, ISymbolGroupsClientForUser, ISymbolGroupsClientForOrganization>
    {
    }

    public interface ISymbolGroupsClientForUser : ISymbolGroupsClientByContextKeyApiMethods, IClientByContext<ISymbolGroupsClientForUser, ISymbolGroupsClientForOrganization>
    {
    }

    public interface ISymbolGroupsClientForOrganization : ISymbolGroupsClientByOrganizationApiMethods
    {
    }

    public partial class SymbolGroupsClient : BaseClient<ISymbolGroupsClient, ISymbolGroupsClientForUser, ISymbolGroupsClientForOrganization, SymbolGroupsClient>, ISymbolGroupsClient, ISymbolGroupsClientForUser, ISymbolGroupsClientForOrganization
    {
        public List<SymbolGroupContract> GetSymbolGroups(List<SymbolGroupTypes> symbolGroupIds)
        {
            var request = new RequestData
            {
                Url = $"symbols-groups/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolGroupIds);

            return PerformRequest<List<SymbolGroupContract>>(request);
        }

        public async Task<List<SymbolGroupContract>> GetSymbolGroupsAsync(List<SymbolGroupTypes> symbolGroupIds)
        {
            var request = new RequestData
            {
                Url = $"symbols-groups/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolGroupIds);

            return await PerformRequestAsync<List<SymbolGroupContract>>(request);
        }

        /// <summary>
        /// Get all symbols by symbol group
        /// </summary>
        /// <param name="symbolGroupId">Symbol group ID (enumeration value)</param>
        /// <returns>The method returns the list of symbols</returns>
        public List<SymbolContract> GetSymbolsBySymbolGroup(SymbolGroupTypes symbolGroupId)
        {
            var request = new RequestData
            {
                Url = $"symbols-groups/get-symbols-by-group/{symbolGroupId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<SymbolContract>>(request);
        }

        /// <summary>
        /// Get all symbols by symbol group
        /// </summary>
        /// <param name="symbolGroupId">Symbol group ID (enumeration value)</param>
        /// <returns>The method returns the list of symbols</returns>
        public async Task<List<SymbolContract>> GetSymbolsBySymbolGroupAsync(SymbolGroupTypes symbolGroupId)
        {
            var request = new RequestData
            {
                Url = $"symbols-groups/get-symbols-by-group/{symbolGroupId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<SymbolContract>>(request);
        }

        public List<SymbolWithSymbolGroupContract> GetSymbolsBySymbolGroups(List<SymbolGroupTypes> symbolGroupIds)
        {
            var request = new RequestData
            {
                Url = $"symbol-groups/get-symbol-ids/by-symbol-group-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolGroupIds);

            return PerformRequest<List<SymbolWithSymbolGroupContract>>(request);
        }

        public async Task<List<SymbolWithSymbolGroupContract>> GetSymbolsBySymbolGroupsAsync(List<SymbolGroupTypes> symbolGroupIds)
        {
            var request = new RequestData
            {
                Url = $"symbol-groups/get-symbol-ids/by-symbol-group-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolGroupIds);

            return await PerformRequestAsync<List<SymbolWithSymbolGroupContract>>(request);
        }
    }

    public interface ISymbolsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the symbol values by its ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns symbol values.</returns>
        SymbolContract Get(int symbolId);

        /// <summary>
        /// Get the symbol values by its ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns symbol values.</returns>
        Task<SymbolContract> GetAsync(int symbolId);

        List<SymbolContract> GetSymbols(List<int> symbolIds);

        Task<List<SymbolContract>> GetSymbolsAsync(List<int> symbolIds);

        /// <summary>
        /// Search symbols by a symbol name or a company name.
        /// </summary>
        /// <param name="contract">Contract to search symbols.</param>
        /// <returns>The method returns symbol contracts.</returns>
        IList<StockContract> Search(SearchSymbolsContract contract);

        /// <summary>
        /// Search symbols by a symbol name or a company name.
        /// </summary>
        /// <param name="contract">Contract to search symbols.</param>
        /// <returns>The method returns symbol contracts.</returns>
        Task<IList<StockContract>> SearchAsync(SearchSymbolsContract contract);

        /// <summary>
        /// Find all symbols (stocks and options) by a symbol ticker.
        /// </summary>
        /// <param name="contract">Contract to search stocks and options.</param>
        /// <returns>The method returns symbol contracts.</returns>
        IList<SymbolContract> FindAllBySymbol(SearchSymbolsByTickerContract contract);

        /// <summary>
        /// Find all symbols (stocks and options) by a symbol ticker.
        /// </summary>
        /// <param name="contract">Contract to search stocks and options.</param>
        /// <returns>The method returns symbol contracts.</returns>
        Task<IList<SymbolContract>> FindAllBySymbolAsync(SearchSymbolsByTickerContract contract);

        /// <summary>
        /// Search symbols range (stocks and options).
        /// </summary>
        /// <param name="contract">Contract to search symbols.</param>
        /// <returns>The method returns the search result contract.</returns>
        SearchResultContract<SymbolRangeContract> SearchSymbolsRange(SearchSymbolsRangeContract contract);

        /// <summary>
        /// Search symbols range (stocks and options).
        /// </summary>
        /// <param name="contract">Contract to search symbols.</param>
        /// <returns>The method returns the search result contract.</returns>
        Task<SearchResultContract<SymbolRangeContract>> SearchSymbolsRangeAsync(SearchSymbolsRangeContract contract);

        List<int> GetSymbolIdsBySectors(List<int> sectorIds);

        Task<List<int>> GetSymbolIdsBySectorsAsync(List<int> sectorIds);

        List<int> GetStockSymbolIdsByCountries(List<ExchangeCountryTypes> exchangeCountries);

        Task<List<int>> GetStockSymbolIdsByCountriesAsync(List<ExchangeCountryTypes> exchangeCountries);

        List<int> GetEtfComponentIdsByParentSymbolIds(List<int> parentSymbolIds);

        Task<List<int>> GetEtfComponentIdsByParentSymbolIdsAsync(List<int> parentSymbolIds);

        /// <summary>
        /// Get the option strike price in specified time range.
        /// </summary>
        /// <param name="parentSymbolId">Underline stock ID.</param>
        /// <param name="expirationDate">Option expiration date.</param>
        /// <param name="includeDelisted">Property to identify whether the deleted options are included on the list or not.</param>
        /// <returns>The method returns an array of the option strike price.</returns>
        IList<StrikePriceContract> GetStrikePrices(int parentSymbolId, DateTime expirationDate, bool includeDelisted);

        /// <summary>
        /// Get the option strike price in specified time range.
        /// </summary>
        /// <param name="parentSymbolId">Underline stock ID.</param>
        /// <param name="expirationDate">Option expiration date.</param>
        /// <param name="includeDelisted">Property to identify whether the deleted options are included on the list or not.</param>
        /// <returns>The method returns an array of the option strike price.</returns>
        Task<IList<StrikePriceContract>> GetStrikePricesAsync(int parentSymbolId, DateTime expirationDate, bool includeDelisted);

        /// <summary>
        /// Get all strike prices of the specified type option in specified time.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns an array of the option strike prices.</returns>
        IList<StrikePriceContract> GetAllStrikePrices(SearchStrikePricesContract contract);

        /// <summary>
        /// Get all strike prices of the specified type option in specified time.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns an array of the option strike prices.</returns>
        Task<IList<StrikePriceContract>> GetAllStrikePricesAsync(SearchStrikePricesContract contract);

        /// <summary>
        /// Get expiration dates for options that have been already expired and delisted.
        /// This method can be used to get the data about delisted options.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <param name="fromDate">Start Date (example: 2017-10-20 ).</param>
        /// <param name="toDate">End Date (example: 2018-11-28 ).</param>
        /// <returns>The method returns an array of expiration dates for already expired and delisted options.</returns>
        IList<DateTime> GetDelistedExpirationDates(int parentSymbolId, DateTime fromDate, DateTime toDate);

        /// <summary>
        /// Get expiration dates for options that have been already expired and delisted.
        /// This method can be used to get the data about delisted options.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <param name="fromDate">Start Date (example: 2017-10-20 ).</param>
        /// <param name="toDate">End Date (example: 2018-11-28 ).</param>
        /// <returns>The method returns an array of expiration dates for already expired and delisted options.</returns>
        Task<IList<DateTime>> GetDelistedExpirationDatesAsync(int parentSymbolId, DateTime fromDate, DateTime toDate);

        /// <summary>
        /// Get options chain by parent symbol ID and expiration date.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <param name="expirationDate">Option expiration date.</param>
        /// <returns>Returns option chain list.</returns>
        List<OptionChainContract> GetOptionsChain(int parentSymbolId, DateTime expirationDate);

        /// <summary>
        /// Get options chain by parent symbol ID and expiration date.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <param name="expirationDate">Option expiration date.</param>
        /// <returns>Returns option chain list.</returns>
        Task<List<OptionChainContract>> GetOptionsChainAsync(int parentSymbolId, DateTime expirationDate);

        /// <summary>
        /// Search options by a symbol IDs.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns the option array of the selected symbol for the current user.</returns>
        List<SymbolContract> SearchOptions(SearchOptionsContract contract);

        /// <summary>
        /// Search options by a symbol IDs.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns the option array of the selected symbol for the current user.</returns>
        Task<List<SymbolContract>> SearchOptionsAsync(SearchOptionsContract contract);

        /// <summary>
        /// Search options.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns the option array.</returns>
        List<SymbolContract> SearchAllOptions(SearchAllOptionsContract contract);

        /// <summary>
        /// Search options.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns the option array.</returns>
        Task<List<SymbolContract>> SearchAllOptionsAsync(SearchAllOptionsContract contract);

        List<SymbolContract> SearchOptionsByTickers(List<string> tickers);

        Task<List<SymbolContract>> SearchOptionsByTickersAsync(List<string> tickers);

        /// <summary>
        /// Get expiration dates of all available active options based on the underlying stock ID.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <returns>The method returns an array of expiration dates of all available active options.</returns>
        IList<DateTime> GetExpirationDates(int parentSymbolId);

        /// <summary>
        /// Get expiration dates of all available active options based on the underlying stock ID.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <returns>The method returns an array of expiration dates of all available active options.</returns>
        Task<IList<DateTime>> GetExpirationDatesAsync(int parentSymbolId);

        /// <summary>
        /// Get expiration dates of all available options of the specified type based on the underlying stock ID.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns an array of expiration dates of all available active options.</returns>
        IList<DateTime> GetAllExpirationDates(SearchExpirationDatesContract contract);

        /// <summary>
        /// Get expiration dates of all available options of the specified type based on the underlying stock ID.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns an array of expiration dates of all available active options.</returns>
        Task<IList<DateTime>> GetAllExpirationDatesAsync(SearchExpirationDatesContract contract);

        /// <summary>
        /// Get option data by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Returns option data.</returns>
        OptionDataContract GetOptionData(int symbolId);

        /// <summary>
        /// Get option data by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Returns option data.</returns>
        Task<OptionDataContract> GetOptionDataAsync(int symbolId);

        /// <summary>
        /// Get options data by underline stock ID.
        /// </summary>
        /// <param name="parentSymbolId">Underline stock ID.</param>
        /// <returns>List of options data.</returns>
        List<OptionDataContract> GetOptionsDataByUnderlineStock(int parentSymbolId);

        /// <summary>
        /// Get options data by underline stock ID.
        /// </summary>
        /// <param name="parentSymbolId">Underline stock ID.</param>
        /// <returns>List of options data.</returns>
        Task<List<OptionDataContract>> GetOptionsDataByUnderlineStockAsync(int parentSymbolId);

        /// <summary>
        /// Get the symbol fundamental data.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the symbol fundamental data.</returns>
        FundamentalDataContract GetFundamentalData(int symbolId);

        /// <summary>
        /// Get the symbol fundamental data.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the symbol fundamental data.</returns>
        Task<FundamentalDataContract> GetFundamentalDataAsync(int symbolId);

        List<FundamentalDataContract> GetFundamentalDataBySymbolIds(List<int> symbolIds);

        Task<List<FundamentalDataContract>> GetFundamentalDataBySymbolIdsAsync(List<int> symbolIds);

        /// <summary>
        /// Get all exchange markets names.
        /// </summary>
        /// <returns>The method returns an array of exchange market contract.</returns>
        List<ExchangeMarketContract> GetAllExchangeMarkets();

        /// <summary>
        /// Get all exchange markets names.
        /// </summary>
        /// <returns>The method returns an array of exchange market contract.</returns>
        Task<List<ExchangeMarketContract>> GetAllExchangeMarketsAsync();

        /// <summary>
        /// Get open hours for exchanges.
        /// </summary>
        /// <param name="exchangeId">Exchange Id</param>
        /// <returns>The method returns the working hours of the exchange.</returns>
        ExchangeDataContract GetExchangeWorkingHours(int exchangeId);

        /// <summary>
        /// Get open hours for exchanges.
        /// </summary>
        /// <param name="exchangeId">Exchange Id</param>
        /// <returns>The method returns the working hours of the exchange.</returns>
        Task<ExchangeDataContract> GetExchangeWorkingHoursAsync(int exchangeId);

        /// <summary>
        /// Get Benzinga earnings.
        /// </summary>
        /// <param name="contract">Contract to get Benzinga earnings.</param>
        /// <returns>The method returns a list of Benzinga earnings.</returns>
        List<BenzingaEarningsContract> GetBenzingaEarnings(GetBenzingaEarningsContract contract);

        /// <summary>
        /// Get Benzinga earnings.
        /// </summary>
        /// <param name="contract">Contract to get Benzinga earnings.</param>
        /// <returns>The method returns a list of Benzinga earnings.</returns>
        Task<List<BenzingaEarningsContract>> GetBenzingaEarningsAsync(GetBenzingaEarningsContract contract);

        List<SymbolStatisticsContract> GetSymbolStatistics(List<int> symbolIds);

        Task<List<SymbolStatisticsContract>> GetSymbolStatisticsAsync(List<int> symbolIds);

        /// <summary>
        /// Get the statistic info by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the statistics for stocks and options.</returns>
        SymbolStatisticsContract GetSymbolStatistics(int symbolId);

        /// <summary>
        /// Get the statistic info by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the statistics for stocks and options.</returns>
        Task<SymbolStatisticsContract> GetSymbolStatisticsAsync(int symbolId);

        List<StockContract> FindBySymbols(List<string> symbols);

        Task<List<StockContract>> FindBySymbolsAsync(List<string> symbols);

        DateTime GetMaxTradeDate(List<int> symbolIds);

        Task<DateTime> GetMaxTradeDateAsync(List<int> symbolIds);

        /// <summary>
        /// Get symbol configurations.
        /// </summary>
        /// <param name="contract">The contract for getting the symbol configuration.</param>
        /// <returns>Return symbol configurations.</returns>
        List<SymbolConfigurationContract> GetSymbolConfigurations(GetSymbolConfigurationContract contract);

        /// <summary>
        /// Get symbol configurations.
        /// </summary>
        /// <param name="contract">The contract for getting the symbol configuration.</param>
        /// <returns>Return symbol configurations.</returns>
        Task<List<SymbolConfigurationContract>> GetSymbolConfigurationsAsync(GetSymbolConfigurationContract contract);

        /// <summary>
        /// Get crypto symbol taxonomy by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return crypto symbol taxonomy.</returns>
        TaxonomyContract GetSymbolTaxonomy(int symbolId);

        /// <summary>
        /// Get crypto symbol taxonomy by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return crypto symbol taxonomy.</returns>
        Task<TaxonomyContract> GetSymbolTaxonomyAsync(int symbolId);

        /// <summary>
        /// Get a company profile.
        /// </summary>
        /// <param name="symbolId">Symbol Id</param>
        /// <returns>Return information about the company.</returns>
        CompanyProfileContract GetCompanyProfile(int symbolId);

        /// <summary>
        /// Get a company profile.
        /// </summary>
        /// <param name="symbolId">Symbol Id</param>
        /// <returns>Return information about the company.</returns>
        Task<CompanyProfileContract> GetCompanyProfileAsync(int symbolId);

        List<BalanceSheetReportContract> SearchBalanceSheetReports(SearchCompanyProfileReportsContract contract);

        Task<List<BalanceSheetReportContract>> SearchBalanceSheetReportsAsync(SearchCompanyProfileReportsContract contract);

        List<IncomeStatementReportContract> SearchIncomeStatementReports(SearchCompanyProfileReportsContract contract);

        Task<List<IncomeStatementReportContract>> SearchIncomeStatementReportsAsync(SearchCompanyProfileReportsContract contract);

        List<CashFlowStatementReportContract> SearchCashFlowStatementReports(SearchCompanyProfileReportsContract contract);

        Task<List<CashFlowStatementReportContract>> SearchCashFlowStatementReportsAsync(SearchCompanyProfileReportsContract contract);

        List<FinancialsRatioReportContract> SearchFinancialsRatioReports(SearchCompanyProfileReportsContract contract);

        Task<List<FinancialsRatioReportContract>> SearchFinancialsRatioReportsAsync(SearchCompanyProfileReportsContract contract);

        /// <summary>
        /// Get all symbol configuration data types.
        /// </summary>
        /// <returns>The method returns an array of symbol configuration data types.</returns>
        List<SymbolConfigurationDataTypeContract> GetAllSymbolConfigurationDataTypes();

        /// <summary>
        /// Get all symbol configuration data types.
        /// </summary>
        /// <returns>The method returns an array of symbol configuration data types.</returns>
        Task<List<SymbolConfigurationDataTypeContract>> GetAllSymbolConfigurationDataTypesAsync();

        /// <summary>
        /// Get all symbol categories.
        /// </summary>
        /// <returns>The method returns an array of symbol categories.</returns>
        List<SymbolCategoryContract> GetAllSymbolCategories();

        /// <summary>
        /// Get all symbol categories.
        /// </summary>
        /// <returns>The method returns an array of symbol categories.</returns>
        Task<List<SymbolCategoryContract>> GetAllSymbolCategoriesAsync();
    }

    public interface ISymbolsClientByContextKeyApiMethods : ISymbolsClientByLicenseKeyApiMethods
    {
    }

    public interface ISymbolsClientByOrganizationApiMethods
    {
    }

    public partial interface ISymbolsClient : ISymbolsClientByLicenseKeyApiMethods, IClientByLicenseKey<ISymbolsClient, ISymbolsClientForUser, ISymbolsClientForOrganization>
    {
    }

    public interface ISymbolsClientForUser : ISymbolsClientByContextKeyApiMethods, IClientByContext<ISymbolsClientForUser, ISymbolsClientForOrganization>
    {
    }

    public interface ISymbolsClientForOrganization : ISymbolsClientByOrganizationApiMethods
    {
    }

    public partial class SymbolsClient : BaseClient<ISymbolsClient, ISymbolsClientForUser, ISymbolsClientForOrganization, SymbolsClient>, ISymbolsClient, ISymbolsClientForUser, ISymbolsClientForOrganization
    {
        /// <summary>
        /// Get the symbol values by its ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns symbol values.</returns>
        public SymbolContract Get(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"symbols/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<SymbolContract>(request);
        }

        /// <summary>
        /// Get the symbol values by its ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns symbol values.</returns>
        public async Task<SymbolContract> GetAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"symbols/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<SymbolContract>(request);
        }

        public List<SymbolContract> GetSymbols(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<SymbolContract>>(request);
        }

        public async Task<List<SymbolContract>> GetSymbolsAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<SymbolContract>>(request);
        }

        /// <summary>
        /// Search symbols by a symbol name or a company name.
        /// </summary>
        /// <param name="contract">Contract to search symbols.</param>
        /// <returns>The method returns symbol contracts.</returns>
        public IList<StockContract> Search(SearchSymbolsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<IList<StockContract>>(request);
        }

        /// <summary>
        /// Search symbols by a symbol name or a company name.
        /// </summary>
        /// <param name="contract">Contract to search symbols.</param>
        /// <returns>The method returns symbol contracts.</returns>
        public async Task<IList<StockContract>> SearchAsync(SearchSymbolsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<IList<StockContract>>(request);
        }

        /// <summary>
        /// Find all symbols (stocks and options) by a symbol ticker.
        /// </summary>
        /// <param name="contract">Contract to search stocks and options.</param>
        /// <returns>The method returns symbol contracts.</returns>
        public IList<SymbolContract> FindAllBySymbol(SearchSymbolsByTickerContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/find-all-by-symbol",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<IList<SymbolContract>>(request);
        }

        /// <summary>
        /// Find all symbols (stocks and options) by a symbol ticker.
        /// </summary>
        /// <param name="contract">Contract to search stocks and options.</param>
        /// <returns>The method returns symbol contracts.</returns>
        public async Task<IList<SymbolContract>> FindAllBySymbolAsync(SearchSymbolsByTickerContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/find-all-by-symbol",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<IList<SymbolContract>>(request);
        }

        /// <summary>
        /// Search symbols range (stocks and options).
        /// </summary>
        /// <param name="contract">Contract to search symbols.</param>
        /// <returns>The method returns the search result contract.</returns>
        public SearchResultContract<SymbolRangeContract> SearchSymbolsRange(SearchSymbolsRangeContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/search-symbols-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<SearchResultContract<SymbolRangeContract>>(request);
        }

        /// <summary>
        /// Search symbols range (stocks and options).
        /// </summary>
        /// <param name="contract">Contract to search symbols.</param>
        /// <returns>The method returns the search result contract.</returns>
        public async Task<SearchResultContract<SymbolRangeContract>> SearchSymbolsRangeAsync(SearchSymbolsRangeContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/search-symbols-range",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<SearchResultContract<SymbolRangeContract>>(request);
        }

        public List<int> GetSymbolIdsBySectors(List<int> sectorIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/get-ids/by-sector-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(sectorIds);

            return PerformRequest<List<int>>(request);
        }

        public async Task<List<int>> GetSymbolIdsBySectorsAsync(List<int> sectorIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/get-ids/by-sector-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(sectorIds);

            return await PerformRequestAsync<List<int>>(request);
        }

        public List<int> GetStockSymbolIdsByCountries(List<ExchangeCountryTypes> exchangeCountries)
        {
            var request = new RequestData
            {
                Url = $"symbols/get-ids/by-exchange-country-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(exchangeCountries);

            return PerformRequest<List<int>>(request);
        }

        public async Task<List<int>> GetStockSymbolIdsByCountriesAsync(List<ExchangeCountryTypes> exchangeCountries)
        {
            var request = new RequestData
            {
                Url = $"symbols/get-ids/by-exchange-country-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(exchangeCountries);

            return await PerformRequestAsync<List<int>>(request);
        }

        public List<int> GetEtfComponentIdsByParentSymbolIds(List<int> parentSymbolIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/get-etf-ids/by-parent-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(parentSymbolIds);

            return PerformRequest<List<int>>(request);
        }

        public async Task<List<int>> GetEtfComponentIdsByParentSymbolIdsAsync(List<int> parentSymbolIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/get-etf-ids/by-parent-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(parentSymbolIds);

            return await PerformRequestAsync<List<int>>(request);
        }

        /// <summary>
        /// Get the option strike price in specified time range.
        /// </summary>
        /// <param name="parentSymbolId">Underline stock ID.</param>
        /// <param name="expirationDate">Option expiration date.</param>
        /// <param name="includeDelisted">Property to identify whether the deleted options are included on the list or not.</param>
        /// <returns>The method returns an array of the option strike price.</returns>
        public IList<StrikePriceContract> GetStrikePrices(int parentSymbolId, DateTime expirationDate, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"options/strikeprices/{parentSymbolId}/{expirationDate:yyyy-MM-dd}/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<IList<StrikePriceContract>>(request);
        }

        /// <summary>
        /// Get the option strike price in specified time range.
        /// </summary>
        /// <param name="parentSymbolId">Underline stock ID.</param>
        /// <param name="expirationDate">Option expiration date.</param>
        /// <param name="includeDelisted">Property to identify whether the deleted options are included on the list or not.</param>
        /// <returns>The method returns an array of the option strike price.</returns>
        public async Task<IList<StrikePriceContract>> GetStrikePricesAsync(int parentSymbolId, DateTime expirationDate, bool includeDelisted)
        {
            var request = new RequestData
            {
                Url = $"options/strikeprices/{parentSymbolId}/{expirationDate:yyyy-MM-dd}/{includeDelisted}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<IList<StrikePriceContract>>(request);
        }

        /// <summary>
        /// Get all strike prices of the specified type option in specified time.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns an array of the option strike prices.</returns>
        public IList<StrikePriceContract> GetAllStrikePrices(SearchStrikePricesContract contract)
        {
            var request = new RequestData
            {
                Url = $"options/strikeprices/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<IList<StrikePriceContract>>(request);
        }

        /// <summary>
        /// Get all strike prices of the specified type option in specified time.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns an array of the option strike prices.</returns>
        public async Task<IList<StrikePriceContract>> GetAllStrikePricesAsync(SearchStrikePricesContract contract)
        {
            var request = new RequestData
            {
                Url = $"options/strikeprices/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<IList<StrikePriceContract>>(request);
        }

        /// <summary>
        /// Get expiration dates for options that have been already expired and delisted.
        /// This method can be used to get the data about delisted options.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <param name="fromDate">Start Date (example: 2017-10-20 ).</param>
        /// <param name="toDate">End Date (example: 2018-11-28 ).</param>
        /// <returns>The method returns an array of expiration dates for already expired and delisted options.</returns>
        public IList<DateTime> GetDelistedExpirationDates(int parentSymbolId, DateTime fromDate, DateTime toDate)
        {
            var request = new RequestData
            {
                Url = $"options/expirationdates/delisted/{parentSymbolId}/{fromDate:yyyy-MM-dd}/{toDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<IList<DateTime>>(request);
        }

        /// <summary>
        /// Get expiration dates for options that have been already expired and delisted.
        /// This method can be used to get the data about delisted options.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <param name="fromDate">Start Date (example: 2017-10-20 ).</param>
        /// <param name="toDate">End Date (example: 2018-11-28 ).</param>
        /// <returns>The method returns an array of expiration dates for already expired and delisted options.</returns>
        public async Task<IList<DateTime>> GetDelistedExpirationDatesAsync(int parentSymbolId, DateTime fromDate, DateTime toDate)
        {
            var request = new RequestData
            {
                Url = $"options/expirationdates/delisted/{parentSymbolId}/{fromDate:yyyy-MM-dd}/{toDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<IList<DateTime>>(request);
        }

        /// <summary>
        /// Get options chain by parent symbol ID and expiration date.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <param name="expirationDate">Option expiration date.</param>
        /// <returns>Returns option chain list.</returns>
        public List<OptionChainContract> GetOptionsChain(int parentSymbolId, DateTime expirationDate)
        {
            var request = new RequestData
            {
                Url = $"options/chain/{parentSymbolId}/{expirationDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<OptionChainContract>>(request);
        }

        /// <summary>
        /// Get options chain by parent symbol ID and expiration date.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <param name="expirationDate">Option expiration date.</param>
        /// <returns>Returns option chain list.</returns>
        public async Task<List<OptionChainContract>> GetOptionsChainAsync(int parentSymbolId, DateTime expirationDate)
        {
            var request = new RequestData
            {
                Url = $"options/chain/{parentSymbolId}/{expirationDate:yyyy-MM-dd}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<OptionChainContract>>(request);
        }

        /// <summary>
        /// Search options by a symbol IDs.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns the option array of the selected symbol for the current user.</returns>
        public List<SymbolContract> SearchOptions(SearchOptionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"options/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<SymbolContract>>(request);
        }

        /// <summary>
        /// Search options by a symbol IDs.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns the option array of the selected symbol for the current user.</returns>
        public async Task<List<SymbolContract>> SearchOptionsAsync(SearchOptionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"options/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<SymbolContract>>(request);
        }

        /// <summary>
        /// Search options.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns the option array.</returns>
        public List<SymbolContract> SearchAllOptions(SearchAllOptionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"options/search-all",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<SymbolContract>>(request);
        }

        /// <summary>
        /// Search options.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns the option array.</returns>
        public async Task<List<SymbolContract>> SearchAllOptionsAsync(SearchAllOptionsContract contract)
        {
            var request = new RequestData
            {
                Url = $"options/search-all",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<SymbolContract>>(request);
        }

        public List<SymbolContract> SearchOptionsByTickers(List<string> tickers)
        {
            var request = new RequestData
            {
                Url = $"options/search-by-tickers",
                Method = HttpMethod.Post,
            };

            request.SetBody(tickers);

            return PerformRequest<List<SymbolContract>>(request);
        }

        public async Task<List<SymbolContract>> SearchOptionsByTickersAsync(List<string> tickers)
        {
            var request = new RequestData
            {
                Url = $"options/search-by-tickers",
                Method = HttpMethod.Post,
            };

            request.SetBody(tickers);

            return await PerformRequestAsync<List<SymbolContract>>(request);
        }

        /// <summary>
        /// Get expiration dates of all available active options based on the underlying stock ID.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <returns>The method returns an array of expiration dates of all available active options.</returns>
        public IList<DateTime> GetExpirationDates(int parentSymbolId)
        {
            var request = new RequestData
            {
                Url = $"options/expirationdates/{parentSymbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<IList<DateTime>>(request);
        }

        /// <summary>
        /// Get expiration dates of all available active options based on the underlying stock ID.
        /// </summary>
        /// <param name="parentSymbolId">Symbol ID.</param>
        /// <returns>The method returns an array of expiration dates of all available active options.</returns>
        public async Task<IList<DateTime>> GetExpirationDatesAsync(int parentSymbolId)
        {
            var request = new RequestData
            {
                Url = $"options/expirationdates/{parentSymbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<IList<DateTime>>(request);
        }

        /// <summary>
        /// Get expiration dates of all available options of the specified type based on the underlying stock ID.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns an array of expiration dates of all available active options.</returns>
        public IList<DateTime> GetAllExpirationDates(SearchExpirationDatesContract contract)
        {
            var request = new RequestData
            {
                Url = $"options/expirationdates/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<IList<DateTime>>(request);
        }

        /// <summary>
        /// Get expiration dates of all available options of the specified type based on the underlying stock ID.
        /// </summary>
        /// <param name="contract">Contract to search options.</param>
        /// <returns>The method returns an array of expiration dates of all available active options.</returns>
        public async Task<IList<DateTime>> GetAllExpirationDatesAsync(SearchExpirationDatesContract contract)
        {
            var request = new RequestData
            {
                Url = $"options/expirationdates/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<IList<DateTime>>(request);
        }

        /// <summary>
        /// Get option data by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Returns option data.</returns>
        public OptionDataContract GetOptionData(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"options/data/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<OptionDataContract>(request);
        }

        /// <summary>
        /// Get option data by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Returns option data.</returns>
        public async Task<OptionDataContract> GetOptionDataAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"options/data/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<OptionDataContract>(request);
        }

        /// <summary>
        /// Get options data by underline stock ID.
        /// </summary>
        /// <param name="parentSymbolId">Underline stock ID.</param>
        /// <returns>List of options data.</returns>
        public List<OptionDataContract> GetOptionsDataByUnderlineStock(int parentSymbolId)
        {
            var request = new RequestData
            {
                Url = $"options/data/get-by-underline-stock/{parentSymbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<OptionDataContract>>(request);
        }

        /// <summary>
        /// Get options data by underline stock ID.
        /// </summary>
        /// <param name="parentSymbolId">Underline stock ID.</param>
        /// <returns>List of options data.</returns>
        public async Task<List<OptionDataContract>> GetOptionsDataByUnderlineStockAsync(int parentSymbolId)
        {
            var request = new RequestData
            {
                Url = $"options/data/get-by-underline-stock/{parentSymbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<OptionDataContract>>(request);
        }

        /// <summary>
        /// Get the symbol fundamental data.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the symbol fundamental data.</returns>
        public FundamentalDataContract GetFundamentalData(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"symbols/fundamentaldata/{symbolId}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<FundamentalDataContract>(request);
        }

        /// <summary>
        /// Get the symbol fundamental data.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the symbol fundamental data.</returns>
        public async Task<FundamentalDataContract> GetFundamentalDataAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"symbols/fundamentaldata/{symbolId}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<FundamentalDataContract>(request);
        }

        public List<FundamentalDataContract> GetFundamentalDataBySymbolIds(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/fundamentaldata/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<FundamentalDataContract>>(request);
        }

        public async Task<List<FundamentalDataContract>> GetFundamentalDataBySymbolIdsAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/fundamentaldata/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<FundamentalDataContract>>(request);
        }

        /// <summary>
        /// Get all exchange markets names.
        /// </summary>
        /// <returns>The method returns an array of exchange market contract.</returns>
        public List<ExchangeMarketContract> GetAllExchangeMarkets()
        {
            var request = new RequestData
            {
                Url = $"symbols/exchages",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ExchangeMarketContract>>(request);
        }

        /// <summary>
        /// Get all exchange markets names.
        /// </summary>
        /// <returns>The method returns an array of exchange market contract.</returns>
        public async Task<List<ExchangeMarketContract>> GetAllExchangeMarketsAsync()
        {
            var request = new RequestData
            {
                Url = $"symbols/exchages",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ExchangeMarketContract>>(request);
        }

        /// <summary>
        /// Get open hours for exchanges.
        /// </summary>
        /// <param name="exchangeId">Exchange Id</param>
        /// <returns>The method returns the working hours of the exchange.</returns>
        public ExchangeDataContract GetExchangeWorkingHours(int exchangeId)
        {
            var request = new RequestData
            {
                Url = $"symbols/exchange-working-hours/{exchangeId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<ExchangeDataContract>(request);
        }

        /// <summary>
        /// Get open hours for exchanges.
        /// </summary>
        /// <param name="exchangeId">Exchange Id</param>
        /// <returns>The method returns the working hours of the exchange.</returns>
        public async Task<ExchangeDataContract> GetExchangeWorkingHoursAsync(int exchangeId)
        {
            var request = new RequestData
            {
                Url = $"symbols/exchange-working-hours/{exchangeId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<ExchangeDataContract>(request);
        }

        /// <summary>
        /// Get Benzinga earnings.
        /// </summary>
        /// <param name="contract">Contract to get Benzinga earnings.</param>
        /// <returns>The method returns a list of Benzinga earnings.</returns>
        public List<BenzingaEarningsContract> GetBenzingaEarnings(GetBenzingaEarningsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/earnings-per-share/benzinga",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<BenzingaEarningsContract>>(request);
        }

        /// <summary>
        /// Get Benzinga earnings.
        /// </summary>
        /// <param name="contract">Contract to get Benzinga earnings.</param>
        /// <returns>The method returns a list of Benzinga earnings.</returns>
        public async Task<List<BenzingaEarningsContract>> GetBenzingaEarningsAsync(GetBenzingaEarningsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/earnings-per-share/benzinga",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<BenzingaEarningsContract>>(request);
        }

        public List<SymbolStatisticsContract> GetSymbolStatistics(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/statistics/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<SymbolStatisticsContract>>(request);
        }

        public async Task<List<SymbolStatisticsContract>> GetSymbolStatisticsAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/statistics/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<SymbolStatisticsContract>>(request);
        }

        /// <summary>
        /// Get the statistic info by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the statistics for stocks and options.</returns>
        public SymbolStatisticsContract GetSymbolStatistics(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"symbols/statistics/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<SymbolStatisticsContract>(request);
        }

        /// <summary>
        /// Get the statistic info by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>The method returns the statistics for stocks and options.</returns>
        public async Task<SymbolStatisticsContract> GetSymbolStatisticsAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"symbols/statistics/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<SymbolStatisticsContract>(request);
        }

        public List<StockContract> FindBySymbols(List<string> symbols)
        {
            var request = new RequestData
            {
                Url = $"symbols/find-by-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbols);

            return PerformRequest<List<StockContract>>(request);
        }

        public async Task<List<StockContract>> FindBySymbolsAsync(List<string> symbols)
        {
            var request = new RequestData
            {
                Url = $"symbols/find-by-symbols",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbols);

            return await PerformRequestAsync<List<StockContract>>(request);
        }

        public DateTime GetMaxTradeDate(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/max-trade-date/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<DateTime>(request);
        }

        public async Task<DateTime> GetMaxTradeDateAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"symbols/max-trade-date/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<DateTime>(request);
        }

        /// <summary>
        /// Get symbol configurations.
        /// </summary>
        /// <param name="contract">The contract for getting the symbol configuration.</param>
        /// <returns>Return symbol configurations.</returns>
        public List<SymbolConfigurationContract> GetSymbolConfigurations(GetSymbolConfigurationContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/symbol-configurations",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<SymbolConfigurationContract>>(request);
        }

        /// <summary>
        /// Get symbol configurations.
        /// </summary>
        /// <param name="contract">The contract for getting the symbol configuration.</param>
        /// <returns>Return symbol configurations.</returns>
        public async Task<List<SymbolConfigurationContract>> GetSymbolConfigurationsAsync(GetSymbolConfigurationContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/symbol-configurations",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<SymbolConfigurationContract>>(request);
        }

        /// <summary>
        /// Get crypto symbol taxonomy by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return crypto symbol taxonomy.</returns>
        public TaxonomyContract GetSymbolTaxonomy(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"symbols/taxonomies/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<TaxonomyContract>(request);
        }

        /// <summary>
        /// Get crypto symbol taxonomy by symbol ID.
        /// </summary>
        /// <param name="symbolId">Symbol ID.</param>
        /// <returns>Return crypto symbol taxonomy.</returns>
        public async Task<TaxonomyContract> GetSymbolTaxonomyAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"symbols/taxonomies/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<TaxonomyContract>(request);
        }

        /// <summary>
        /// Get a company profile.
        /// </summary>
        /// <param name="symbolId">Symbol Id</param>
        /// <returns>Return information about the company.</returns>
        public CompanyProfileContract GetCompanyProfile(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"symbols/company-profile/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<CompanyProfileContract>(request);
        }

        /// <summary>
        /// Get a company profile.
        /// </summary>
        /// <param name="symbolId">Symbol Id</param>
        /// <returns>Return information about the company.</returns>
        public async Task<CompanyProfileContract> GetCompanyProfileAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"symbols/company-profile/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<CompanyProfileContract>(request);
        }

        public List<BalanceSheetReportContract> SearchBalanceSheetReports(SearchCompanyProfileReportsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/company-profile/search-balance-sheet-reports",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<BalanceSheetReportContract>>(request);
        }

        public async Task<List<BalanceSheetReportContract>> SearchBalanceSheetReportsAsync(SearchCompanyProfileReportsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/company-profile/search-balance-sheet-reports",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<BalanceSheetReportContract>>(request);
        }

        public List<IncomeStatementReportContract> SearchIncomeStatementReports(SearchCompanyProfileReportsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/company-profile/search-income-statement-reports",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<IncomeStatementReportContract>>(request);
        }

        public async Task<List<IncomeStatementReportContract>> SearchIncomeStatementReportsAsync(SearchCompanyProfileReportsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/company-profile/search-income-statement-reports",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<IncomeStatementReportContract>>(request);
        }

        public List<CashFlowStatementReportContract> SearchCashFlowStatementReports(SearchCompanyProfileReportsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/company-profile/search-cash-flow-statement-reports",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<CashFlowStatementReportContract>>(request);
        }

        public async Task<List<CashFlowStatementReportContract>> SearchCashFlowStatementReportsAsync(SearchCompanyProfileReportsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/company-profile/search-cash-flow-statement-reports",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<CashFlowStatementReportContract>>(request);
        }

        public List<FinancialsRatioReportContract> SearchFinancialsRatioReports(SearchCompanyProfileReportsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/company-profile/search-financials-ratio-reports",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<FinancialsRatioReportContract>>(request);
        }

        public async Task<List<FinancialsRatioReportContract>> SearchFinancialsRatioReportsAsync(SearchCompanyProfileReportsContract contract)
        {
            var request = new RequestData
            {
                Url = $"symbols/company-profile/search-financials-ratio-reports",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<FinancialsRatioReportContract>>(request);
        }

        /// <summary>
        /// Get all symbol configuration data types.
        /// </summary>
        /// <returns>The method returns an array of symbol configuration data types.</returns>
        public List<SymbolConfigurationDataTypeContract> GetAllSymbolConfigurationDataTypes()
        {
            var request = new RequestData
            {
                Url = $"symbols/symbol-configuration-data-types",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<SymbolConfigurationDataTypeContract>>(request);
        }

        /// <summary>
        /// Get all symbol configuration data types.
        /// </summary>
        /// <returns>The method returns an array of symbol configuration data types.</returns>
        public async Task<List<SymbolConfigurationDataTypeContract>> GetAllSymbolConfigurationDataTypesAsync()
        {
            var request = new RequestData
            {
                Url = $"symbols/symbol-configuration-data-types",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<SymbolConfigurationDataTypeContract>>(request);
        }

        /// <summary>
        /// Get all symbol categories.
        /// </summary>
        /// <returns>The method returns an array of symbol categories.</returns>
        public List<SymbolCategoryContract> GetAllSymbolCategories()
        {
            var request = new RequestData
            {
                Url = $"symbols/symbol-categories",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<SymbolCategoryContract>>(request);
        }

        /// <summary>
        /// Get all symbol categories.
        /// </summary>
        /// <returns>The method returns an array of symbol categories.</returns>
        public async Task<List<SymbolCategoryContract>> GetAllSymbolCategoriesAsync()
        {
            var request = new RequestData
            {
                Url = $"symbols/symbol-categories",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<SymbolCategoryContract>>(request);
        }
    }

    public interface ISyncFlowAuthenticationClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Token validation for Sync Flow module.
        /// </summary>
        /// <param name="contract">Contract to validate token</param>
        /// <returns>The method returns successful validation result.</returns>
        ValidateSyncFlowTokenContract ValidateSyncFlowToken(SyncFlowAuthenticationTokenContract contract);

        /// <summary>
        /// Token validation for Sync Flow module.
        /// </summary>
        /// <param name="contract">Contract to validate token</param>
        /// <returns>The method returns successful validation result.</returns>
        Task<ValidateSyncFlowTokenContract> ValidateSyncFlowTokenAsync(SyncFlowAuthenticationTokenContract contract);
    }

    public interface ISyncFlowAuthenticationClientByContextKeyApiMethods : ISyncFlowAuthenticationClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create an authentication token for the Sync Flow module.
        /// </summary>
        /// <returns>The method returns the authentication token for the Sync Flow module.</returns>
        SyncFlowAuthenticationTokenContract CreateSyncFlowToken();

        /// <summary>
        /// Create an authentication token for the Sync Flow module.
        /// </summary>
        /// <returns>The method returns the authentication token for the Sync Flow module.</returns>
        Task<SyncFlowAuthenticationTokenContract> CreateSyncFlowTokenAsync();
    }

    public interface ISyncFlowAuthenticationClientByOrganizationApiMethods
    {
    }

    public partial interface ISyncFlowAuthenticationClient : ISyncFlowAuthenticationClientByLicenseKeyApiMethods, IClientByLicenseKey<ISyncFlowAuthenticationClient, ISyncFlowAuthenticationClientForUser, ISyncFlowAuthenticationClientForOrganization>
    {
    }

    public interface ISyncFlowAuthenticationClientForUser : ISyncFlowAuthenticationClientByContextKeyApiMethods, IClientByContext<ISyncFlowAuthenticationClientForUser, ISyncFlowAuthenticationClientForOrganization>
    {
    }

    public interface ISyncFlowAuthenticationClientForOrganization : ISyncFlowAuthenticationClientByOrganizationApiMethods
    {
    }

    public partial class SyncFlowAuthenticationClient : BaseClient<ISyncFlowAuthenticationClient, ISyncFlowAuthenticationClientForUser, ISyncFlowAuthenticationClientForOrganization, SyncFlowAuthenticationClient>, ISyncFlowAuthenticationClient, ISyncFlowAuthenticationClientForUser, ISyncFlowAuthenticationClientForOrganization
    {
        /// <summary>
        /// Create an authentication token for the Sync Flow module.
        /// </summary>
        /// <returns>The method returns the authentication token for the Sync Flow module.</returns>
        public SyncFlowAuthenticationTokenContract CreateSyncFlowToken()
        {
            var request = new RequestData
            {
                Url = $"sync-flow-authentication/token/create",
                Method = HttpMethod.Post,
            };

            return PerformRequest<SyncFlowAuthenticationTokenContract>(request);
        }

        /// <summary>
        /// Create an authentication token for the Sync Flow module.
        /// </summary>
        /// <returns>The method returns the authentication token for the Sync Flow module.</returns>
        public async Task<SyncFlowAuthenticationTokenContract> CreateSyncFlowTokenAsync()
        {
            var request = new RequestData
            {
                Url = $"sync-flow-authentication/token/create",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<SyncFlowAuthenticationTokenContract>(request);
        }

        /// <summary>
        /// Token validation for Sync Flow module.
        /// </summary>
        /// <param name="contract">Contract to validate token</param>
        /// <returns>The method returns successful validation result.</returns>
        public ValidateSyncFlowTokenContract ValidateSyncFlowToken(SyncFlowAuthenticationTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"sync-flow-authentication/token/validate",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<ValidateSyncFlowTokenContract>(request);
        }

        /// <summary>
        /// Token validation for Sync Flow module.
        /// </summary>
        /// <param name="contract">Contract to validate token</param>
        /// <returns>The method returns successful validation result.</returns>
        public async Task<ValidateSyncFlowTokenContract> ValidateSyncFlowTokenAsync(SyncFlowAuthenticationTokenContract contract)
        {
            var request = new RequestData
            {
                Url = $"sync-flow-authentication/token/validate",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<ValidateSyncFlowTokenContract>(request);
        }
    }

    public interface ISyncPortfoliosClientByLicenseKeyApiMethods
    {
    }

    public interface ISyncPortfoliosClientByContextKeyApiMethods : ISyncPortfoliosClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get user's portfolios by the Vendor Account ID. All portfolios can be obtained only by owner.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID for synced portfolios.</param>
        /// <param name="vendorType">Vendor type for synced portfolios.</param>
        /// <returns>
        /// The method returns portfolios including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        List<PortfolioContract> GetPortfolioByVendorAccountIdAndVendorType(string vendorAccountId, VendorTypes vendorType);

        /// <summary>
        /// Get user's portfolios by the Vendor Account ID. All portfolios can be obtained only by owner.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID for synced portfolios.</param>
        /// <param name="vendorType">Vendor type for synced portfolios.</param>
        /// <returns>
        /// The method returns portfolios including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        Task<List<PortfolioContract>> GetPortfolioByVendorAccountIdAndVendorTypeAsync(string vendorAccountId, VendorTypes vendorType);

        /// <summary>
        /// Get user's portfolio by the item ID and vendor type. Only the owner of the portfolio can obtain the portfolio.
        /// </summary>
        /// <param name="vendorPortfolioId">Unique ID of synchronized portfolio.</param>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>
        /// The method returns the portfolio including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        PortfolioContract GetPortfolioByVendorPortfolioIdAndVendorType(string vendorPortfolioId, VendorTypes vendorType);

        /// <summary>
        /// Get user's portfolio by the item ID and vendor type. Only the owner of the portfolio can obtain the portfolio.
        /// </summary>
        /// <param name="vendorPortfolioId">Unique ID of synchronized portfolio.</param>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>
        /// The method returns the portfolio including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        Task<PortfolioContract> GetPortfolioByVendorPortfolioIdAndVendorTypeAsync(string vendorPortfolioId, VendorTypes vendorType);

        /// <summary>
        /// Create a new synchronized portfolio.
        /// </summary>
        /// <param name="createContract">Create synchronized portfolio contract.</param>
        /// <returns>The method returns information about the newly created synchronized portfolio.</returns>
        PortfolioContract CreateSyncPortfolio(CreateSyncPortfolioContract createContract);

        /// <summary>
        /// Create a new synchronized portfolio.
        /// </summary>
        /// <param name="createContract">Create synchronized portfolio contract.</param>
        /// <returns>The method returns information about the newly created synchronized portfolio.</returns>
        Task<PortfolioContract> CreateSyncPortfolioAsync(CreateSyncPortfolioContract createContract);

        /// <summary>
        /// Edit synchronized portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">User email for logging in.</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns contract for the refreshed synchronized portfolio.</returns>
        PortfolioContract EditSyncPortfolio(int portfolioId, EditSyncPortfolioContract portfolio);

        /// <summary>
        /// Edit synchronized portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">User email for logging in.</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns contract for the refreshed synchronized portfolio.</returns>
        Task<PortfolioContract> EditSyncPortfolioAsync(int portfolioId, EditSyncPortfolioContract portfolio);
    }

    public interface ISyncPortfoliosClientByOrganizationApiMethods
    {
    }

    public partial interface ISyncPortfoliosClient : ISyncPortfoliosClientByLicenseKeyApiMethods, IClientByLicenseKey<ISyncPortfoliosClient, ISyncPortfoliosClientForUser, ISyncPortfoliosClientForOrganization>
    {
    }

    public interface ISyncPortfoliosClientForUser : ISyncPortfoliosClientByContextKeyApiMethods, IClientByContext<ISyncPortfoliosClientForUser, ISyncPortfoliosClientForOrganization>
    {
    }

    public interface ISyncPortfoliosClientForOrganization : ISyncPortfoliosClientByOrganizationApiMethods
    {
    }

    public partial class SyncPortfoliosClient : BaseClient<ISyncPortfoliosClient, ISyncPortfoliosClientForUser, ISyncPortfoliosClientForOrganization, SyncPortfoliosClient>, ISyncPortfoliosClient, ISyncPortfoliosClientForUser, ISyncPortfoliosClientForOrganization
    {
        /// <summary>
        /// Get user's portfolios by the Vendor Account ID. All portfolios can be obtained only by owner.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID for synced portfolios.</param>
        /// <param name="vendorType">Vendor type for synced portfolios.</param>
        /// <returns>
        /// The method returns portfolios including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        public List<PortfolioContract> GetPortfolioByVendorAccountIdAndVendorType(string vendorAccountId, VendorTypes vendorType)
        {
            var request = new RequestData
            {
                Url = $"portfolios/sync/by-vendor-account-id-and-vendor-type/{vendorAccountId}/{vendorType}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PortfolioContract>>(request);
        }

        /// <summary>
        /// Get user's portfolios by the Vendor Account ID. All portfolios can be obtained only by owner.
        /// </summary>
        /// <param name="vendorAccountId">Unique Vendor Account ID for synced portfolios.</param>
        /// <param name="vendorType">Vendor type for synced portfolios.</param>
        /// <returns>
        /// The method returns portfolios including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        public async Task<List<PortfolioContract>> GetPortfolioByVendorAccountIdAndVendorTypeAsync(string vendorAccountId, VendorTypes vendorType)
        {
            var request = new RequestData
            {
                Url = $"portfolios/sync/by-vendor-account-id-and-vendor-type/{vendorAccountId}/{vendorType}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PortfolioContract>>(request);
        }

        /// <summary>
        /// Get user's portfolio by the item ID and vendor type. Only the owner of the portfolio can obtain the portfolio.
        /// </summary>
        /// <param name="vendorPortfolioId">Unique ID of synchronized portfolio.</param>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>
        /// The method returns the portfolio including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        public PortfolioContract GetPortfolioByVendorPortfolioIdAndVendorType(string vendorPortfolioId, VendorTypes vendorType)
        {
            var request = new RequestData
            {
                Url = $"portfolios/sync/by-vendor-portfolio-id-and-vendor-type/{vendorPortfolioId}/{vendorType}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<PortfolioContract>(request);
        }

        /// <summary>
        /// Get user's portfolio by the item ID and vendor type. Only the owner of the portfolio can obtain the portfolio.
        /// </summary>
        /// <param name="vendorPortfolioId">Unique ID of synchronized portfolio.</param>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>
        /// The method returns the portfolio including all the data available for use and display.
        /// Fields marked with(sync) are applicable only for synchronized portfolios.
        /// </returns>
        public async Task<PortfolioContract> GetPortfolioByVendorPortfolioIdAndVendorTypeAsync(string vendorPortfolioId, VendorTypes vendorType)
        {
            var request = new RequestData
            {
                Url = $"portfolios/sync/by-vendor-portfolio-id-and-vendor-type/{vendorPortfolioId}/{vendorType}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        /// <summary>
        /// Create a new synchronized portfolio.
        /// </summary>
        /// <param name="createContract">Create synchronized portfolio contract.</param>
        /// <returns>The method returns information about the newly created synchronized portfolio.</returns>
        public PortfolioContract CreateSyncPortfolio(CreateSyncPortfolioContract createContract)
        {
            var request = new RequestData
            {
                Url = $"portfolios/sync",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return PerformRequest<PortfolioContract>(request);
        }

        /// <summary>
        /// Create a new synchronized portfolio.
        /// </summary>
        /// <param name="createContract">Create synchronized portfolio contract.</param>
        /// <returns>The method returns information about the newly created synchronized portfolio.</returns>
        public async Task<PortfolioContract> CreateSyncPortfolioAsync(CreateSyncPortfolioContract createContract)
        {
            var request = new RequestData
            {
                Url = $"portfolios/sync",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return await PerformRequestAsync<PortfolioContract>(request);
        }

        /// <summary>
        /// Edit synchronized portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">User email for logging in.</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns contract for the refreshed synchronized portfolio.</returns>
        public PortfolioContract EditSyncPortfolio(int portfolioId, EditSyncPortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolios/sync/{portfolioId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(portfolio);

            return PerformRequest<PortfolioContract>(request);
        }

        /// <summary>
        /// Edit synchronized portfolio. You can choose the fields to include in the request. Each field from a request payload can be omitted. Only the fields
        /// present in the request payload will be updated.
        /// </summary>
        /// <param name="portfolioId">User email for logging in.</param>
        /// <param name="portfolio">Values to edit.</param>
        /// <returns>The method returns contract for the refreshed synchronized portfolio.</returns>
        public async Task<PortfolioContract> EditSyncPortfolioAsync(int portfolioId, EditSyncPortfolioContract portfolio)
        {
            var request = new RequestData
            {
                Url = $"portfolios/sync/{portfolioId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(portfolio);

            return await PerformRequestAsync<PortfolioContract>(request);
        }
    }

    public interface ISyncPositionsClientByLicenseKeyApiMethods
    {
    }

    public interface ISyncPositionsClientByContextKeyApiMethods : ISyncPositionsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Edit synchronized position. Position ID in every edit synchronized position contract from list should be always specified.
        /// If you edit the position purchase price or position shares, you have to provide adjustment types for each of these values.
        /// IgnoreDividend property affects the position purchase price in calculations, alerts and price displaying.
        /// </summary>
        /// <param name="position">Edit synchronized position contract.</param>
        /// <returns>The method returns contract for updated synchronized position.</returns>
        PositionContract EditSyncPosition(EditSyncPositionContract position);

        /// <summary>
        /// Edit synchronized position. Position ID in every edit synchronized position contract from list should be always specified.
        /// If you edit the position purchase price or position shares, you have to provide adjustment types for each of these values.
        /// IgnoreDividend property affects the position purchase price in calculations, alerts and price displaying.
        /// </summary>
        /// <param name="position">Edit synchronized position contract.</param>
        /// <returns>The method returns contract for updated synchronized position.</returns>
        Task<PositionContract> EditSyncPositionAsync(EditSyncPositionContract position);

        List<PositionContract> EditSyncPositions(List<EditSyncPositionContract> syncedPositions);

        Task<List<PositionContract>> EditSyncPositionsAsync(List<EditSyncPositionContract> syncedPositions);

        /// <summary>
        /// Create a synchronized position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="position">Create synchronized position contract.</param>
        /// <returns>The method returns contract for newly created position.</returns>
        PositionContract CreateSyncPosition(CreateSyncPositionContract position);

        /// <summary>
        /// Create a synchronized position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="position">Create synchronized position contract.</param>
        /// <returns>The method returns contract for newly created position.</returns>
        Task<PositionContract> CreateSyncPositionAsync(CreateSyncPositionContract position);

        List<PositionContract> CreateSyncPositions(List<CreateSyncPositionContract> positions);

        Task<List<PositionContract>> CreateSyncPositionsAsync(List<CreateSyncPositionContract> positions);
    }

    public interface ISyncPositionsClientByOrganizationApiMethods
    {
    }

    public partial interface ISyncPositionsClient : ISyncPositionsClientByLicenseKeyApiMethods, IClientByLicenseKey<ISyncPositionsClient, ISyncPositionsClientForUser, ISyncPositionsClientForOrganization>
    {
    }

    public interface ISyncPositionsClientForUser : ISyncPositionsClientByContextKeyApiMethods, IClientByContext<ISyncPositionsClientForUser, ISyncPositionsClientForOrganization>
    {
    }

    public interface ISyncPositionsClientForOrganization : ISyncPositionsClientByOrganizationApiMethods
    {
    }

    public partial class SyncPositionsClient : BaseClient<ISyncPositionsClient, ISyncPositionsClientForUser, ISyncPositionsClientForOrganization, SyncPositionsClient>, ISyncPositionsClient, ISyncPositionsClientForUser, ISyncPositionsClientForOrganization
    {
        /// <summary>
        /// Edit synchronized position. Position ID in every edit synchronized position contract from list should be always specified.
        /// If you edit the position purchase price or position shares, you have to provide adjustment types for each of these values.
        /// IgnoreDividend property affects the position purchase price in calculations, alerts and price displaying.
        /// </summary>
        /// <param name="position">Edit synchronized position contract.</param>
        /// <returns>The method returns contract for updated synchronized position.</returns>
        public PositionContract EditSyncPosition(EditSyncPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"positions/sync/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(position);

            return PerformRequest<PositionContract>(request);
        }

        /// <summary>
        /// Edit synchronized position. Position ID in every edit synchronized position contract from list should be always specified.
        /// If you edit the position purchase price or position shares, you have to provide adjustment types for each of these values.
        /// IgnoreDividend property affects the position purchase price in calculations, alerts and price displaying.
        /// </summary>
        /// <param name="position">Edit synchronized position contract.</param>
        /// <returns>The method returns contract for updated synchronized position.</returns>
        public async Task<PositionContract> EditSyncPositionAsync(EditSyncPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"positions/sync/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(position);

            return await PerformRequestAsync<PositionContract>(request);
        }

        public List<PositionContract> EditSyncPositions(List<EditSyncPositionContract> syncedPositions)
        {
            var request = new RequestData
            {
                Url = $"positions/sync/bulk-edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(syncedPositions);

            return PerformRequest<List<PositionContract>>(request);
        }

        public async Task<List<PositionContract>> EditSyncPositionsAsync(List<EditSyncPositionContract> syncedPositions)
        {
            var request = new RequestData
            {
                Url = $"positions/sync/bulk-edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(syncedPositions);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }

        /// <summary>
        /// Create a synchronized position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="position">Create synchronized position contract.</param>
        /// <returns>The method returns contract for newly created position.</returns>
        public PositionContract CreateSyncPosition(CreateSyncPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"positions/sync",
                Method = HttpMethod.Post,
            };

            request.SetBody(position);

            return PerformRequest<PositionContract>(request);
        }

        /// <summary>
        /// Create a synchronized position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="position">Create synchronized position contract.</param>
        /// <returns>The method returns contract for newly created position.</returns>
        public async Task<PositionContract> CreateSyncPositionAsync(CreateSyncPositionContract position)
        {
            var request = new RequestData
            {
                Url = $"positions/sync",
                Method = HttpMethod.Post,
            };

            request.SetBody(position);

            return await PerformRequestAsync<PositionContract>(request);
        }

        public List<PositionContract> CreateSyncPositions(List<CreateSyncPositionContract> positions)
        {
            var request = new RequestData
            {
                Url = $"positions/sync/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(positions);

            return PerformRequest<List<PositionContract>>(request);
        }

        public async Task<List<PositionContract>> CreateSyncPositionsAsync(List<CreateSyncPositionContract> positions)
        {
            var request = new RequestData
            {
                Url = $"positions/sync/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(positions);

            return await PerformRequestAsync<List<PositionContract>>(request);
        }
    }

    public interface ISyncVendorAccountTasksClientByLicenseKeyApiMethods
    {
    }

    public interface ISyncVendorAccountTasksClientByContextKeyApiMethods : ISyncVendorAccountTasksClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get sync vendor account task by the sync vendor account task ID. Only the user for which this task was created can obtain it.
        /// </summary>
        /// <param name="syncVendorAccountTaskId">Unique sync vendor account task ID.</param>
        /// <returns>The method returns contract for the specific sync vendor account task found by sync vendor account task ID.</returns>
        SyncVendorAccountTaskContract GetSyncVendorAccountTaskById(int syncVendorAccountTaskId);

        /// <summary>
        /// Get sync vendor account task by the sync vendor account task ID. Only the user for which this task was created can obtain it.
        /// </summary>
        /// <param name="syncVendorAccountTaskId">Unique sync vendor account task ID.</param>
        /// <returns>The method returns contract for the specific sync vendor account task found by sync vendor account task ID.</returns>
        Task<SyncVendorAccountTaskContract> GetSyncVendorAccountTaskByIdAsync(int syncVendorAccountTaskId);

        /// <summary>
        /// Initiates sync vendor account task.
        /// </summary>
        /// <param name="contract">Initiate sync vendor account task contract.</param>
        /// <returns>The method returns ID of initiated sync vendor account task.</returns>
        int GetInitiatedSyncVendorAccountTaskId(InitiateSyncVendorAccountTaskContract contract);

        /// <summary>
        /// Initiates sync vendor account task.
        /// </summary>
        /// <param name="contract">Initiate sync vendor account task contract.</param>
        /// <returns>The method returns ID of initiated sync vendor account task.</returns>
        Task<int> GetInitiatedSyncVendorAccountTaskIdAsync(InitiateSyncVendorAccountTaskContract contract);
    }

    public interface ISyncVendorAccountTasksClientByOrganizationApiMethods
    {
    }

    public partial interface ISyncVendorAccountTasksClient : ISyncVendorAccountTasksClientByLicenseKeyApiMethods, IClientByLicenseKey<ISyncVendorAccountTasksClient, ISyncVendorAccountTasksClientForUser, ISyncVendorAccountTasksClientForOrganization>
    {
    }

    public interface ISyncVendorAccountTasksClientForUser : ISyncVendorAccountTasksClientByContextKeyApiMethods, IClientByContext<ISyncVendorAccountTasksClientForUser, ISyncVendorAccountTasksClientForOrganization>
    {
    }

    public interface ISyncVendorAccountTasksClientForOrganization : ISyncVendorAccountTasksClientByOrganizationApiMethods
    {
    }

    public partial class SyncVendorAccountTasksClient : BaseClient<ISyncVendorAccountTasksClient, ISyncVendorAccountTasksClientForUser, ISyncVendorAccountTasksClientForOrganization, SyncVendorAccountTasksClient>, ISyncVendorAccountTasksClient, ISyncVendorAccountTasksClientForUser, ISyncVendorAccountTasksClientForOrganization
    {
        /// <summary>
        /// Get sync vendor account task by the sync vendor account task ID. Only the user for which this task was created can obtain it.
        /// </summary>
        /// <param name="syncVendorAccountTaskId">Unique sync vendor account task ID.</param>
        /// <returns>The method returns contract for the specific sync vendor account task found by sync vendor account task ID.</returns>
        public SyncVendorAccountTaskContract GetSyncVendorAccountTaskById(int syncVendorAccountTaskId)
        {
            var request = new RequestData
            {
                Url = $"sync-vendor-account-tasks/{syncVendorAccountTaskId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<SyncVendorAccountTaskContract>(request);
        }

        /// <summary>
        /// Get sync vendor account task by the sync vendor account task ID. Only the user for which this task was created can obtain it.
        /// </summary>
        /// <param name="syncVendorAccountTaskId">Unique sync vendor account task ID.</param>
        /// <returns>The method returns contract for the specific sync vendor account task found by sync vendor account task ID.</returns>
        public async Task<SyncVendorAccountTaskContract> GetSyncVendorAccountTaskByIdAsync(int syncVendorAccountTaskId)
        {
            var request = new RequestData
            {
                Url = $"sync-vendor-account-tasks/{syncVendorAccountTaskId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<SyncVendorAccountTaskContract>(request);
        }

        /// <summary>
        /// Initiates sync vendor account task.
        /// </summary>
        /// <param name="contract">Initiate sync vendor account task contract.</param>
        /// <returns>The method returns ID of initiated sync vendor account task.</returns>
        public int GetInitiatedSyncVendorAccountTaskId(InitiateSyncVendorAccountTaskContract contract)
        {
            var request = new RequestData
            {
                Url = $"sync-vendor-account-tasks/get-initiated-sync-vendor-account-task-id",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<int>(request);
        }

        /// <summary>
        /// Initiates sync vendor account task.
        /// </summary>
        /// <param name="contract">Initiate sync vendor account task contract.</param>
        /// <returns>The method returns ID of initiated sync vendor account task.</returns>
        public async Task<int> GetInitiatedSyncVendorAccountTaskIdAsync(InitiateSyncVendorAccountTaskContract contract)
        {
            var request = new RequestData
            {
                Url = $"sync-vendor-account-tasks/get-initiated-sync-vendor-account-task-id",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<int>(request);
        }
    }

    public interface ISystemEventsClientByLicenseKeyApiMethods
    {
    }

    public interface ISystemEventsClientByContextKeyApiMethods : ISystemEventsClientByLicenseKeyApiMethods
    {
        RecentEventsContract GetRecentEvents(GetRecentEventsContract contract);

        Task<RecentEventsContract> GetRecentEventsAsync(GetRecentEventsContract contract);

        void DeleteEvents(List<int> eventIds);

        Task DeleteEventsAsync(List<int> eventIds);

        /// <summary>
        /// Get statistics about number of system events by event categories
        /// </summary>
        /// <param name="contract">PortfolioIds and categories to load statistics</param>
        /// <returns>List of objects with statistics for each category</returns>
        List<SystemEventCategoryStatisticsContract> GetSystemEventCategoriesStatistics(GetSystemEventCategoriesStatisticsContract contract);

        /// <summary>
        /// Get statistics about number of system events by event categories
        /// </summary>
        /// <param name="contract">PortfolioIds and categories to load statistics</param>
        /// <returns>List of objects with statistics for each category</returns>
        Task<List<SystemEventCategoryStatisticsContract>> GetSystemEventCategoriesStatisticsAsync(GetSystemEventCategoriesStatisticsContract contract);
    }

    public interface ISystemEventsClientByOrganizationApiMethods
    {
    }

    public partial interface ISystemEventsClient : ISystemEventsClientByLicenseKeyApiMethods, IClientByLicenseKey<ISystemEventsClient, ISystemEventsClientForUser, ISystemEventsClientForOrganization>
    {
    }

    public interface ISystemEventsClientForUser : ISystemEventsClientByContextKeyApiMethods, IClientByContext<ISystemEventsClientForUser, ISystemEventsClientForOrganization>
    {
    }

    public interface ISystemEventsClientForOrganization : ISystemEventsClientByOrganizationApiMethods
    {
    }

    public partial class SystemEventsClient : BaseClient<ISystemEventsClient, ISystemEventsClientForUser, ISystemEventsClientForOrganization, SystemEventsClient>, ISystemEventsClient, ISystemEventsClientForUser, ISystemEventsClientForOrganization
    {
        public RecentEventsContract GetRecentEvents(GetRecentEventsContract contract)
        {
            var request = new RequestData
            {
                Url = $"system-events/recent",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<RecentEventsContract>(request);
        }

        public async Task<RecentEventsContract> GetRecentEventsAsync(GetRecentEventsContract contract)
        {
            var request = new RequestData
            {
                Url = $"system-events/recent",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<RecentEventsContract>(request);
        }

        public void DeleteEvents(List<int> eventIds)
        {
            var request = new RequestData
            {
                Url = $"system-events",
                Method = HttpMethod.Delete,
            };

            request.SetBody(eventIds);

            PerformRequest(request);
        }

        public async Task DeleteEventsAsync(List<int> eventIds)
        {
            var request = new RequestData
            {
                Url = $"system-events",
                Method = HttpMethod.Delete,
            };

            request.SetBody(eventIds);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get statistics about number of system events by event categories
        /// </summary>
        /// <param name="contract">PortfolioIds and categories to load statistics</param>
        /// <returns>List of objects with statistics for each category</returns>
        public List<SystemEventCategoryStatisticsContract> GetSystemEventCategoriesStatistics(GetSystemEventCategoriesStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"system-events/statistics-by-categories",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<SystemEventCategoryStatisticsContract>>(request);
        }

        /// <summary>
        /// Get statistics about number of system events by event categories
        /// </summary>
        /// <param name="contract">PortfolioIds and categories to load statistics</param>
        /// <returns>List of objects with statistics for each category</returns>
        public async Task<List<SystemEventCategoryStatisticsContract>> GetSystemEventCategoriesStatisticsAsync(GetSystemEventCategoriesStatisticsContract contract)
        {
            var request = new RequestData
            {
                Url = $"system-events/statistics-by-categories",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<SystemEventCategoryStatisticsContract>>(request);
        }
    }

    public interface ISystemSettingsClientByLicenseKeyApiMethods
    {
        LastTradeDatesContract GetLastTradeDates();

        Task<LastTradeDatesContract> GetLastTradeDatesAsync();
    }

    public interface ISystemSettingsClientByContextKeyApiMethods : ISystemSettingsClientByLicenseKeyApiMethods
    {
    }

    public interface ISystemSettingsClientByOrganizationApiMethods
    {
    }

    public partial interface ISystemSettingsClient : ISystemSettingsClientByLicenseKeyApiMethods, IClientByLicenseKey<ISystemSettingsClient, ISystemSettingsClientForUser, ISystemSettingsClientForOrganization>
    {
    }

    public interface ISystemSettingsClientForUser : ISystemSettingsClientByContextKeyApiMethods, IClientByContext<ISystemSettingsClientForUser, ISystemSettingsClientForOrganization>
    {
    }

    public interface ISystemSettingsClientForOrganization : ISystemSettingsClientByOrganizationApiMethods
    {
    }

    public partial class SystemSettingsClient : BaseClient<ISystemSettingsClient, ISystemSettingsClientForUser, ISystemSettingsClientForOrganization, SystemSettingsClient>, ISystemSettingsClient, ISystemSettingsClientForUser, ISystemSettingsClientForOrganization
    {
        public LastTradeDatesContract GetLastTradeDates()
        {
            var request = new RequestData
            {
                Url = $"system-settings/last-trade-dates",
                Method = HttpMethod.Get,
            };

            return PerformRequest<LastTradeDatesContract>(request);
        }

        public async Task<LastTradeDatesContract> GetLastTradeDatesAsync()
        {
            var request = new RequestData
            {
                Url = $"system-settings/last-trade-dates",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<LastTradeDatesContract>(request);
        }
    }

    public interface ITagsClientByLicenseKeyApiMethods
    {
    }

    public interface ITagsClientByContextKeyApiMethods : ITagsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the info of all existing tags of the current user.
        /// </summary>
        /// <returns>The method returns the array with the tag data.</returns>
        List<TagContract> GetUserTags();

        /// <summary>
        /// Get the info of all existing tags of the current user.
        /// </summary>
        /// <returns>The method returns the array with the tag data.</returns>
        Task<List<TagContract>> GetUserTagsAsync();

        /// <summary>
        /// Create a tag that could be assigned on the positions. Tag name has to be unique.
        /// </summary>
        /// <param name="tag">Parameters to create tag.</param>
        /// <returns>The  method returns the contract of the created tag.</returns>
        TagContract CreateTag(CreateTagContract tag);

        /// <summary>
        /// Create a tag that could be assigned on the positions. Tag name has to be unique.
        /// </summary>
        /// <param name="tag">Parameters to create tag.</param>
        /// <returns>The  method returns the contract of the created tag.</returns>
        Task<TagContract> CreateTagAsync(CreateTagContract tag);

        void DeleteTags(List<int> tagIds);

        Task DeleteTagsAsync(List<int> tagIds);

        void UpdateUserTags(List<string> tags);

        Task UpdateUserTagsAsync(List<string> tags);

        /// <summary>
        /// Get tags by the position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns all tags assigned to the requested position.</returns>
        List<PositionTagContract> GetPositionTags(int positionId);

        /// <summary>
        /// Get tags by the position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns all tags assigned to the requested position.</returns>
        Task<List<PositionTagContract>> GetPositionTagsAsync(int positionId);

        List<PositionTagContract> UpdatePositionTags(int positionId, List<string> tags);

        Task<List<PositionTagContract>> UpdatePositionTagsAsync(int positionId, List<string> tags);
    }

    public interface ITagsClientByOrganizationApiMethods
    {
    }

    public partial interface ITagsClient : ITagsClientByLicenseKeyApiMethods, IClientByLicenseKey<ITagsClient, ITagsClientForUser, ITagsClientForOrganization>
    {
    }

    public interface ITagsClientForUser : ITagsClientByContextKeyApiMethods, IClientByContext<ITagsClientForUser, ITagsClientForOrganization>
    {
    }

    public interface ITagsClientForOrganization : ITagsClientByOrganizationApiMethods
    {
    }

    public partial class TagsClient : BaseClient<ITagsClient, ITagsClientForUser, ITagsClientForOrganization, TagsClient>, ITagsClient, ITagsClientForUser, ITagsClientForOrganization
    {
        /// <summary>
        /// Get the info of all existing tags of the current user.
        /// </summary>
        /// <returns>The method returns the array with the tag data.</returns>
        public List<TagContract> GetUserTags()
        {
            var request = new RequestData
            {
                Url = $"tags",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<TagContract>>(request);
        }

        /// <summary>
        /// Get the info of all existing tags of the current user.
        /// </summary>
        /// <returns>The method returns the array with the tag data.</returns>
        public async Task<List<TagContract>> GetUserTagsAsync()
        {
            var request = new RequestData
            {
                Url = $"tags",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<TagContract>>(request);
        }

        /// <summary>
        /// Create a tag that could be assigned on the positions. Tag name has to be unique.
        /// </summary>
        /// <param name="tag">Parameters to create tag.</param>
        /// <returns>The  method returns the contract of the created tag.</returns>
        public TagContract CreateTag(CreateTagContract tag)
        {
            var request = new RequestData
            {
                Url = $"tags",
                Method = HttpMethod.Post,
            };

            request.SetBody(tag);

            return PerformRequest<TagContract>(request);
        }

        /// <summary>
        /// Create a tag that could be assigned on the positions. Tag name has to be unique.
        /// </summary>
        /// <param name="tag">Parameters to create tag.</param>
        /// <returns>The  method returns the contract of the created tag.</returns>
        public async Task<TagContract> CreateTagAsync(CreateTagContract tag)
        {
            var request = new RequestData
            {
                Url = $"tags",
                Method = HttpMethod.Post,
            };

            request.SetBody(tag);

            return await PerformRequestAsync<TagContract>(request);
        }

        public void DeleteTags(List<int> tagIds)
        {
            var request = new RequestData
            {
                Url = $"tags/by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(tagIds);

            PerformRequest(request);
        }

        public async Task DeleteTagsAsync(List<int> tagIds)
        {
            var request = new RequestData
            {
                Url = $"tags/by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(tagIds);

            await PerformRequestAsync(request);
        }

        public void UpdateUserTags(List<string> tags)
        {
            var request = new RequestData
            {
                Url = $"tags/update",
                Method = HttpMethod.Post,
            };

            request.SetBody(tags);

            PerformRequest(request);
        }

        public async Task UpdateUserTagsAsync(List<string> tags)
        {
            var request = new RequestData
            {
                Url = $"tags/update",
                Method = HttpMethod.Post,
            };

            request.SetBody(tags);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get tags by the position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns all tags assigned to the requested position.</returns>
        public List<PositionTagContract> GetPositionTags(int positionId)
        {
            var request = new RequestData
            {
                Url = $"tags/position/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<PositionTagContract>>(request);
        }

        /// <summary>
        /// Get tags by the position ID.
        /// </summary>
        /// <param name="positionId">Position ID.</param>
        /// <returns>The method returns all tags assigned to the requested position.</returns>
        public async Task<List<PositionTagContract>> GetPositionTagsAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"tags/position/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<PositionTagContract>>(request);
        }

        public List<PositionTagContract> UpdatePositionTags(int positionId, List<string> tags)
        {
            var request = new RequestData
            {
                Url = $"tags/{positionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(tags);

            return PerformRequest<List<PositionTagContract>>(request);
        }

        public async Task<List<PositionTagContract>> UpdatePositionTagsAsync(int positionId, List<string> tags)
        {
            var request = new RequestData
            {
                Url = $"tags/{positionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(tags);

            return await PerformRequestAsync<List<PositionTagContract>>(request);
        }
    }

    public interface ITimingsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get timing by symbol ID
        /// </summary>
        /// <param name="symbolId">ID of the symbol</param>
        /// <returns>Timing values</returns>
        TimingContract GetTimingBySymbolId(int symbolId);

        /// <summary>
        /// Get timing by symbol ID
        /// </summary>
        /// <param name="symbolId">ID of the symbol</param>
        /// <returns>Timing values</returns>
        Task<TimingContract> GetTimingBySymbolIdAsync(int symbolId);

        /// <summary>
        /// Get all timings
        /// </summary>
        /// <returns>List of timings</returns>
        List<TimingContract> GetAllTimings();

        /// <summary>
        /// Get all timings
        /// </summary>
        /// <returns>List of timings</returns>
        Task<List<TimingContract>> GetAllTimingsAsync();

        List<TimingContract> GetTimingsBySymbolIds(List<int> symbolIds);

        Task<List<TimingContract>> GetTimingsBySymbolIdsAsync(List<int> symbolIds);

        /// <summary>
        /// Search timing turn areas by timing IDs and turn area params
        /// </summary>
        /// <param name="contract">Parameters (filters) to get timing turn areas</param>
        /// <returns>List of timing turn areas</returns>
        List<TimingTurnAreaContract> SearchTimingTurnAreas(SearchTimingTurnAreasContract contract);

        /// <summary>
        /// Search timing turn areas by timing IDs and turn area params
        /// </summary>
        /// <param name="contract">Parameters (filters) to get timing turn areas</param>
        /// <returns>List of timing turn areas</returns>
        Task<List<TimingTurnAreaContract>> SearchTimingTurnAreasAsync(SearchTimingTurnAreasContract contract);

        /// <summary>
        /// Get current timing turn areas for timing IDs by turn area params
        /// </summary>
        /// <param name="contract">Parameters to get current timing turn areas</param>
        /// <returns>List of timing turn areas</returns>
        List<TimingTurnAreaContract> GetCurrentTurnAreas(GetCurrentTurnAreasContract contract);

        /// <summary>
        /// Get current timing turn areas for timing IDs by turn area params
        /// </summary>
        /// <param name="contract">Parameters to get current timing turn areas</param>
        /// <returns>List of timing turn areas</returns>
        Task<List<TimingTurnAreaContract>> GetCurrentTurnAreasAsync(GetCurrentTurnAreasContract contract);
    }

    public interface ITimingsClientByContextKeyApiMethods : ITimingsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get timings by portfolios
        /// </summary>
        /// <param name="contract">Parameters (filters) to get timings</param>
        /// <returns>List of timings</returns>
        List<TimingContract> GetTimingsByPortfolios(GetTimingsByPortfoliosContract contract);

        /// <summary>
        /// Get timings by portfolios
        /// </summary>
        /// <param name="contract">Parameters (filters) to get timings</param>
        /// <returns>List of timings</returns>
        Task<List<TimingContract>> GetTimingsByPortfoliosAsync(GetTimingsByPortfoliosContract contract);
    }

    public interface ITimingsClientByOrganizationApiMethods
    {
    }

    public partial interface ITimingsClient : ITimingsClientByLicenseKeyApiMethods, IClientByLicenseKey<ITimingsClient, ITimingsClientForUser, ITimingsClientForOrganization>
    {
    }

    public interface ITimingsClientForUser : ITimingsClientByContextKeyApiMethods, IClientByContext<ITimingsClientForUser, ITimingsClientForOrganization>
    {
    }

    public interface ITimingsClientForOrganization : ITimingsClientByOrganizationApiMethods
    {
    }

    public partial class TimingsClient : BaseClient<ITimingsClient, ITimingsClientForUser, ITimingsClientForOrganization, TimingsClient>, ITimingsClient, ITimingsClientForUser, ITimingsClientForOrganization
    {
        /// <summary>
        /// Get timing by symbol ID
        /// </summary>
        /// <param name="symbolId">ID of the symbol</param>
        /// <returns>Timing values</returns>
        public TimingContract GetTimingBySymbolId(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"timing/get-by-symbol/{symbolId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<TimingContract>(request);
        }

        /// <summary>
        /// Get timing by symbol ID
        /// </summary>
        /// <param name="symbolId">ID of the symbol</param>
        /// <returns>Timing values</returns>
        public async Task<TimingContract> GetTimingBySymbolIdAsync(int symbolId)
        {
            var request = new RequestData
            {
                Url = $"timing/get-by-symbol/{symbolId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<TimingContract>(request);
        }

        /// <summary>
        /// Get all timings
        /// </summary>
        /// <returns>List of timings</returns>
        public List<TimingContract> GetAllTimings()
        {
            var request = new RequestData
            {
                Url = $"timings/get-all",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<TimingContract>>(request);
        }

        /// <summary>
        /// Get all timings
        /// </summary>
        /// <returns>List of timings</returns>
        public async Task<List<TimingContract>> GetAllTimingsAsync()
        {
            var request = new RequestData
            {
                Url = $"timings/get-all",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<TimingContract>>(request);
        }

        public List<TimingContract> GetTimingsBySymbolIds(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"timing/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return PerformRequest<List<TimingContract>>(request);
        }

        public async Task<List<TimingContract>> GetTimingsBySymbolIdsAsync(List<int> symbolIds)
        {
            var request = new RequestData
            {
                Url = $"timing/get-by-symbol-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(symbolIds);

            return await PerformRequestAsync<List<TimingContract>>(request);
        }

        /// <summary>
        /// Get timings by portfolios
        /// </summary>
        /// <param name="contract">Parameters (filters) to get timings</param>
        /// <returns>List of timings</returns>
        public List<TimingContract> GetTimingsByPortfolios(GetTimingsByPortfoliosContract contract)
        {
            var request = new RequestData
            {
                Url = $"timing/get-by-portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<TimingContract>>(request);
        }

        /// <summary>
        /// Get timings by portfolios
        /// </summary>
        /// <param name="contract">Parameters (filters) to get timings</param>
        /// <returns>List of timings</returns>
        public async Task<List<TimingContract>> GetTimingsByPortfoliosAsync(GetTimingsByPortfoliosContract contract)
        {
            var request = new RequestData
            {
                Url = $"timing/get-by-portfolios",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<TimingContract>>(request);
        }

        /// <summary>
        /// Search timing turn areas by timing IDs and turn area params
        /// </summary>
        /// <param name="contract">Parameters (filters) to get timing turn areas</param>
        /// <returns>List of timing turn areas</returns>
        public List<TimingTurnAreaContract> SearchTimingTurnAreas(SearchTimingTurnAreasContract contract)
        {
            var request = new RequestData
            {
                Url = $"timing/areas/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<TimingTurnAreaContract>>(request);
        }

        /// <summary>
        /// Search timing turn areas by timing IDs and turn area params
        /// </summary>
        /// <param name="contract">Parameters (filters) to get timing turn areas</param>
        /// <returns>List of timing turn areas</returns>
        public async Task<List<TimingTurnAreaContract>> SearchTimingTurnAreasAsync(SearchTimingTurnAreasContract contract)
        {
            var request = new RequestData
            {
                Url = $"timing/areas/search",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<TimingTurnAreaContract>>(request);
        }

        /// <summary>
        /// Get current timing turn areas for timing IDs by turn area params
        /// </summary>
        /// <param name="contract">Parameters to get current timing turn areas</param>
        /// <returns>List of timing turn areas</returns>
        public List<TimingTurnAreaContract> GetCurrentTurnAreas(GetCurrentTurnAreasContract contract)
        {
            var request = new RequestData
            {
                Url = $"timing/areas/get-current-by-timing-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<List<TimingTurnAreaContract>>(request);
        }

        /// <summary>
        /// Get current timing turn areas for timing IDs by turn area params
        /// </summary>
        /// <param name="contract">Parameters to get current timing turn areas</param>
        /// <returns>List of timing turn areas</returns>
        public async Task<List<TimingTurnAreaContract>> GetCurrentTurnAreasAsync(GetCurrentTurnAreasContract contract)
        {
            var request = new RequestData
            {
                Url = $"timing/areas/get-current-by-timing-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<List<TimingTurnAreaContract>>(request);
        }
    }

    public interface ITradeSmithProductsClientByLicenseKeyApiMethods
    {
        List<ProductContract> GetAllProducts();

        Task<List<ProductContract>> GetAllProductsAsync();

        List<ProductSubscriptionContract> GetAllProductSubscriptions();

        Task<List<ProductSubscriptionContract>> GetAllProductSubscriptionsAsync();

        ProductContract GetProduct(Products product);

        Task<ProductContract> GetProductAsync(Products product);

        /// <summary>
        /// Get Login, LandingPage, ApplicationRoot URLs for products.
        /// URLs depend on API environment.
        /// Some products don't have any urls, so they are not returned.
        /// </summary>
        /// <returns>
        /// List of objects with different type of urls for all products.
        /// If product have no urls then corresponding object will not be presented in the list.
        /// </returns>
        List<ProductUrlsContract> GetAllProductUrls();

        /// <summary>
        /// Get Login, LandingPage, ApplicationRoot URLs for products.
        /// URLs depend on API environment.
        /// Some products don't have any urls, so they are not returned.
        /// </summary>
        /// <returns>
        /// List of objects with different type of urls for all products.
        /// If product have no urls then corresponding object will not be presented in the list.
        /// </returns>
        Task<List<ProductUrlsContract>> GetAllProductUrlsAsync();

        List<ProductSubscriptionContract> GetProductSubscriptionsByProduct(Products product);

        Task<List<ProductSubscriptionContract>> GetProductSubscriptionsByProductAsync(Products product);

        List<ProductSubscriptionPubCodeContract> GetProductSubscriptionPubCodesByProduct(Products product);

        Task<List<ProductSubscriptionPubCodeContract>> GetProductSubscriptionPubCodesByProductAsync(Products product);

        List<ProductSubscriptionPubCodeContract> GetAllProductSubscriptionPubCodes();

        Task<List<ProductSubscriptionPubCodeContract>> GetAllProductSubscriptionPubCodesAsync();
    }

    public interface ITradeSmithProductsClientByContextKeyApiMethods : ITradeSmithProductsClientByLicenseKeyApiMethods
    {
    }

    public interface ITradeSmithProductsClientByOrganizationApiMethods
    {
    }

    public partial interface ITradeSmithProductsClient : ITradeSmithProductsClientByLicenseKeyApiMethods, IClientByLicenseKey<ITradeSmithProductsClient, ITradeSmithProductsClientForUser, ITradeSmithProductsClientForOrganization>
    {
    }

    public interface ITradeSmithProductsClientForUser : ITradeSmithProductsClientByContextKeyApiMethods, IClientByContext<ITradeSmithProductsClientForUser, ITradeSmithProductsClientForOrganization>
    {
    }

    public interface ITradeSmithProductsClientForOrganization : ITradeSmithProductsClientByOrganizationApiMethods
    {
    }

    public partial class TradeSmithProductsClient : BaseClient<ITradeSmithProductsClient, ITradeSmithProductsClientForUser, ITradeSmithProductsClientForOrganization, TradeSmithProductsClient>, ITradeSmithProductsClient, ITradeSmithProductsClientForUser, ITradeSmithProductsClientForOrganization
    {
        public List<ProductContract> GetAllProducts()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/all",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ProductContract>>(request);
        }

        public async Task<List<ProductContract>> GetAllProductsAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/all",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ProductContract>>(request);
        }

        public List<ProductSubscriptionContract> GetAllProductSubscriptions()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/subscriptions/all",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ProductSubscriptionContract>>(request);
        }

        public async Task<List<ProductSubscriptionContract>> GetAllProductSubscriptionsAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/subscriptions/all",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ProductSubscriptionContract>>(request);
        }

        public ProductContract GetProduct(Products product)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/{product}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<ProductContract>(request);
        }

        public async Task<ProductContract> GetProductAsync(Products product)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/{product}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<ProductContract>(request);
        }

        /// <summary>
        /// Get Login, LandingPage, ApplicationRoot URLs for products.
        /// URLs depend on API environment.
        /// Some products don't have any urls, so they are not returned.
        /// </summary>
        /// <returns>
        /// List of objects with different type of urls for all products.
        /// If product have no urls then corresponding object will not be presented in the list.
        /// </returns>
        public List<ProductUrlsContract> GetAllProductUrls()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/get-urls",
                Method = HttpMethod.Post,
            };

            return PerformRequest<List<ProductUrlsContract>>(request);
        }

        /// <summary>
        /// Get Login, LandingPage, ApplicationRoot URLs for products.
        /// URLs depend on API environment.
        /// Some products don't have any urls, so they are not returned.
        /// </summary>
        /// <returns>
        /// List of objects with different type of urls for all products.
        /// If product have no urls then corresponding object will not be presented in the list.
        /// </returns>
        public async Task<List<ProductUrlsContract>> GetAllProductUrlsAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/get-urls",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<List<ProductUrlsContract>>(request);
        }

        public List<ProductSubscriptionContract> GetProductSubscriptionsByProduct(Products product)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-product-subscriptions/by-product/{product}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ProductSubscriptionContract>>(request);
        }

        public async Task<List<ProductSubscriptionContract>> GetProductSubscriptionsByProductAsync(Products product)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-product-subscriptions/by-product/{product}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ProductSubscriptionContract>>(request);
        }

        public List<ProductSubscriptionPubCodeContract> GetProductSubscriptionPubCodesByProduct(Products product)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-product-subscription-pub-codes/by-product/{product}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ProductSubscriptionPubCodeContract>>(request);
        }

        public async Task<List<ProductSubscriptionPubCodeContract>> GetProductSubscriptionPubCodesByProductAsync(Products product)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-product-subscription-pub-codes/by-product/{product}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ProductSubscriptionPubCodeContract>>(request);
        }

        public List<ProductSubscriptionPubCodeContract> GetAllProductSubscriptionPubCodes()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-product-subscription-pub-codes/all",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ProductSubscriptionPubCodeContract>>(request);
        }

        public async Task<List<ProductSubscriptionPubCodeContract>> GetAllProductSubscriptionPubCodesAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-product-subscription-pub-codes/all",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ProductSubscriptionPubCodeContract>>(request);
        }
    }

    public interface ITradeSmithUsersClientByLicenseKeyApiMethods
    {
    }

    public interface ITradeSmithUsersClientByContextKeyApiMethods : ITradeSmithUsersClientByLicenseKeyApiMethods
    {
        TradeSmithUserContract GetTradeSmithUser();

        Task<TradeSmithUserContract> GetTradeSmithUserAsync();

        /// <summary>
        /// Update (change) user password
        /// </summary>
        /// <param name="contract">Contract with new password</param>
        /// <returns>HTTP status code 200 in case of success</returns>
        void UpdateUserPassword(UpdatePasswordContract contract);

        /// <summary>
        /// Update (change) user password
        /// </summary>
        /// <param name="contract">Contract with new password</param>
        /// <returns>HTTP status code 200 in case of success</returns>
        Task UpdateUserPasswordAsync(UpdatePasswordContract contract);

        UserPersonalInfoContract UpdateTradeSmithUserPersonalInfo(UserPersonalInfoContract contract);

        Task<UserPersonalInfoContract> UpdateTradeSmithUserPersonalInfoAsync(UserPersonalInfoContract contract);
    }

    public interface ITradeSmithUsersClientByOrganizationApiMethods
    {
    }

    public partial interface ITradeSmithUsersClient : ITradeSmithUsersClientByLicenseKeyApiMethods, IClientByLicenseKey<ITradeSmithUsersClient, ITradeSmithUsersClientForUser, ITradeSmithUsersClientForOrganization>
    {
    }

    public interface ITradeSmithUsersClientForUser : ITradeSmithUsersClientByContextKeyApiMethods, IClientByContext<ITradeSmithUsersClientForUser, ITradeSmithUsersClientForOrganization>
    {
    }

    public interface ITradeSmithUsersClientForOrganization : ITradeSmithUsersClientByOrganizationApiMethods
    {
    }

    public partial class TradeSmithUsersClient : BaseClient<ITradeSmithUsersClient, ITradeSmithUsersClientForUser, ITradeSmithUsersClientForOrganization, TradeSmithUsersClient>, ITradeSmithUsersClient, ITradeSmithUsersClientForUser, ITradeSmithUsersClientForOrganization
    {
        public TradeSmithUserContract GetTradeSmithUser()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/current",
                Method = HttpMethod.Get,
            };

            return PerformRequest<TradeSmithUserContract>(request);
        }

        public async Task<TradeSmithUserContract> GetTradeSmithUserAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/current",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<TradeSmithUserContract>(request);
        }

        /// <summary>
        /// Update (change) user password
        /// </summary>
        /// <param name="contract">Contract with new password</param>
        /// <returns>HTTP status code 200 in case of success</returns>
        public void UpdateUserPassword(UpdatePasswordContract contract)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/password",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            PerformRequest(request);
        }

        /// <summary>
        /// Update (change) user password
        /// </summary>
        /// <param name="contract">Contract with new password</param>
        /// <returns>HTTP status code 200 in case of success</returns>
        public async Task UpdateUserPasswordAsync(UpdatePasswordContract contract)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/password",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            await PerformRequestAsync(request);
        }

        public UserPersonalInfoContract UpdateTradeSmithUserPersonalInfo(UserPersonalInfoContract contract)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/update-personal-info",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<UserPersonalInfoContract>(request);
        }

        public async Task<UserPersonalInfoContract> UpdateTradeSmithUserPersonalInfoAsync(UserPersonalInfoContract contract)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-users/update-personal-info",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserPersonalInfoContract>(request);
        }
    }

    public interface IUnconfirmedPositionsClientByLicenseKeyApiMethods
    {
    }

    public interface IUnconfirmedPositionsClientByContextKeyApiMethods : IUnconfirmedPositionsClientByLicenseKeyApiMethods
    {
        List<UnconfirmedPositionContract> GetUnconfirmedPositionsByPortfolioIds(List<int> portfolioIds);

        Task<List<UnconfirmedPositionContract>> GetUnconfirmedPositionsByPortfolioIdsAsync(List<int> portfolioIds);

        /// <summary>
        /// Get the information about the unconfirmed position by the unconfirmed position ID.
        /// </summary>
        /// <param name="positionId">Unconfirmed position ID.</param>
        /// <returns>The method returns contract containing the unconfirmed position info.</returns>
        UnconfirmedPositionContract GetUnconfirmedPosition(int positionId);

        /// <summary>
        /// Get the information about the unconfirmed position by the unconfirmed position ID.
        /// </summary>
        /// <param name="positionId">Unconfirmed position ID.</param>
        /// <returns>The method returns contract containing the unconfirmed position info.</returns>
        Task<UnconfirmedPositionContract> GetUnconfirmedPositionAsync(int positionId);

        /// <summary>
        /// Create an unconfirmed position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="contract">Create Unconfirmed Position contract.</param>
        /// <returns>The method returns contract for newly created unconfirmed position.</returns>
        UnconfirmedPositionContract CreateUnconfirmedPosition(CreateUnconfirmedPositionContract contract);

        /// <summary>
        /// Create an unconfirmed position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="contract">Create Unconfirmed Position contract.</param>
        /// <returns>The method returns contract for newly created unconfirmed position.</returns>
        Task<UnconfirmedPositionContract> CreateUnconfirmedPositionAsync(CreateUnconfirmedPositionContract contract);

        List<UnconfirmedPositionContract> CreateUnconfirmedPositions(List<CreateUnconfirmedPositionContract> contracts);

        Task<List<UnconfirmedPositionContract>> CreateUnconfirmedPositionsAsync(List<CreateUnconfirmedPositionContract> contracts);

        List<UnconfirmedPositionContract> GetUnconfirmedPositionsByIds(List<int> unconfirmedPositionIds);

        Task<List<UnconfirmedPositionContract>> GetUnconfirmedPositionsByIdsAsync(List<int> unconfirmedPositionIds);

        /// <summary>
        /// Edit the information about the unconfirmed position. Each field can be edited separately.
        /// Unconfirmed position ID in edit unconfirmed position contract should be always specified.
        /// </summary>
        /// <param name="unconfirmedPosition">Contract to edit unconfirmed position.</param>
        /// <returns>The method returns contract for updated unconfirmed position.</returns>
        UnconfirmedPositionContract EditUnconfirmedPosition(EditUnconfirmedPositionContract unconfirmedPosition);

        /// <summary>
        /// Edit the information about the unconfirmed position. Each field can be edited separately.
        /// Unconfirmed position ID in edit unconfirmed position contract should be always specified.
        /// </summary>
        /// <param name="unconfirmedPosition">Contract to edit unconfirmed position.</param>
        /// <returns>The method returns contract for updated unconfirmed position.</returns>
        Task<UnconfirmedPositionContract> EditUnconfirmedPositionAsync(EditUnconfirmedPositionContract unconfirmedPosition);

        List<UnconfirmedPositionContract> EditUnconfirmedPositions(List<EditUnconfirmedPositionContract> unconfirmedPositions);

        Task<List<UnconfirmedPositionContract>> EditUnconfirmedPositionsAsync(List<EditUnconfirmedPositionContract> unconfirmedPositions);

        /// <summary>
        /// Confirm the unconfirmed position. The position will be converted to regular position in the system.
        /// </summary>
        /// <param name="unconfirmedPositionId">Unconfirmed position ID.</param>
        /// <param name="symbolId">Symbol ID from the system for converting position to regular one.</param>
        /// <returns>The method returns the regular position contract for the converted position.</returns>
        PositionContract ConfirmUnconfirmedPosition(int unconfirmedPositionId, int symbolId);

        /// <summary>
        /// Confirm the unconfirmed position. The position will be converted to regular position in the system.
        /// </summary>
        /// <param name="unconfirmedPositionId">Unconfirmed position ID.</param>
        /// <param name="symbolId">Symbol ID from the system for converting position to regular one.</param>
        /// <returns>The method returns the regular position contract for the converted position.</returns>
        Task<PositionContract> ConfirmUnconfirmedPositionAsync(int unconfirmedPositionId, int symbolId);

        List<ConfirmPositionResultContract> ConfirmUnconfirmedPositions(List<ConfirmUnconfirmedPositionContract> contracts);

        Task<List<ConfirmPositionResultContract>> ConfirmUnconfirmedPositionsAsync(List<ConfirmUnconfirmedPositionContract> contracts);

        void DeleteUnconfirmedPositions(List<int> unconfirmedPositionIds);

        Task DeleteUnconfirmedPositionsAsync(List<int> unconfirmedPositionIds);
    }

    public interface IUnconfirmedPositionsClientByOrganizationApiMethods
    {
    }

    public partial interface IUnconfirmedPositionsClient : IUnconfirmedPositionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IUnconfirmedPositionsClient, IUnconfirmedPositionsClientForUser, IUnconfirmedPositionsClientForOrganization>
    {
    }

    public interface IUnconfirmedPositionsClientForUser : IUnconfirmedPositionsClientByContextKeyApiMethods, IClientByContext<IUnconfirmedPositionsClientForUser, IUnconfirmedPositionsClientForOrganization>
    {
    }

    public interface IUnconfirmedPositionsClientForOrganization : IUnconfirmedPositionsClientByOrganizationApiMethods
    {
    }

    public partial class UnconfirmedPositionsClient : BaseClient<IUnconfirmedPositionsClient, IUnconfirmedPositionsClientForUser, IUnconfirmedPositionsClientForOrganization, UnconfirmedPositionsClient>, IUnconfirmedPositionsClient, IUnconfirmedPositionsClientForUser, IUnconfirmedPositionsClientForOrganization
    {
        public List<UnconfirmedPositionContract> GetUnconfirmedPositionsByPortfolioIds(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return PerformRequest<List<UnconfirmedPositionContract>>(request);
        }

        public async Task<List<UnconfirmedPositionContract>> GetUnconfirmedPositionsByPortfolioIdsAsync(List<int> portfolioIds)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/get-by-portfolio-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(portfolioIds);

            return await PerformRequestAsync<List<UnconfirmedPositionContract>>(request);
        }

        /// <summary>
        /// Get the information about the unconfirmed position by the unconfirmed position ID.
        /// </summary>
        /// <param name="positionId">Unconfirmed position ID.</param>
        /// <returns>The method returns contract containing the unconfirmed position info.</returns>
        public UnconfirmedPositionContract GetUnconfirmedPosition(int positionId)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/{positionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<UnconfirmedPositionContract>(request);
        }

        /// <summary>
        /// Get the information about the unconfirmed position by the unconfirmed position ID.
        /// </summary>
        /// <param name="positionId">Unconfirmed position ID.</param>
        /// <returns>The method returns contract containing the unconfirmed position info.</returns>
        public async Task<UnconfirmedPositionContract> GetUnconfirmedPositionAsync(int positionId)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/{positionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<UnconfirmedPositionContract>(request);
        }

        /// <summary>
        /// Create an unconfirmed position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="contract">Create Unconfirmed Position contract.</param>
        /// <returns>The method returns contract for newly created unconfirmed position.</returns>
        public UnconfirmedPositionContract CreateUnconfirmedPosition(CreateUnconfirmedPositionContract contract)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<UnconfirmedPositionContract>(request);
        }

        /// <summary>
        /// Create an unconfirmed position. Such positions can be created only in a synchronized portfolio.
        /// </summary>
        /// <param name="contract">Create Unconfirmed Position contract.</param>
        /// <returns>The method returns contract for newly created unconfirmed position.</returns>
        public async Task<UnconfirmedPositionContract> CreateUnconfirmedPositionAsync(CreateUnconfirmedPositionContract contract)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UnconfirmedPositionContract>(request);
        }

        public List<UnconfirmedPositionContract> CreateUnconfirmedPositions(List<CreateUnconfirmedPositionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return PerformRequest<List<UnconfirmedPositionContract>>(request);
        }

        public async Task<List<UnconfirmedPositionContract>> CreateUnconfirmedPositionsAsync(List<CreateUnconfirmedPositionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/bulk-create",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return await PerformRequestAsync<List<UnconfirmedPositionContract>>(request);
        }

        public List<UnconfirmedPositionContract> GetUnconfirmedPositionsByIds(List<int> unconfirmedPositionIds)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(unconfirmedPositionIds);

            return PerformRequest<List<UnconfirmedPositionContract>>(request);
        }

        public async Task<List<UnconfirmedPositionContract>> GetUnconfirmedPositionsByIdsAsync(List<int> unconfirmedPositionIds)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/get-by-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(unconfirmedPositionIds);

            return await PerformRequestAsync<List<UnconfirmedPositionContract>>(request);
        }

        /// <summary>
        /// Edit the information about the unconfirmed position. Each field can be edited separately.
        /// Unconfirmed position ID in edit unconfirmed position contract should be always specified.
        /// </summary>
        /// <param name="unconfirmedPosition">Contract to edit unconfirmed position.</param>
        /// <returns>The method returns contract for updated unconfirmed position.</returns>
        public UnconfirmedPositionContract EditUnconfirmedPosition(EditUnconfirmedPositionContract unconfirmedPosition)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(unconfirmedPosition);

            return PerformRequest<UnconfirmedPositionContract>(request);
        }

        /// <summary>
        /// Edit the information about the unconfirmed position. Each field can be edited separately.
        /// Unconfirmed position ID in edit unconfirmed position contract should be always specified.
        /// </summary>
        /// <param name="unconfirmedPosition">Contract to edit unconfirmed position.</param>
        /// <returns>The method returns contract for updated unconfirmed position.</returns>
        public async Task<UnconfirmedPositionContract> EditUnconfirmedPositionAsync(EditUnconfirmedPositionContract unconfirmedPosition)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(unconfirmedPosition);

            return await PerformRequestAsync<UnconfirmedPositionContract>(request);
        }

        public List<UnconfirmedPositionContract> EditUnconfirmedPositions(List<EditUnconfirmedPositionContract> unconfirmedPositions)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/bulk-edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(unconfirmedPositions);

            return PerformRequest<List<UnconfirmedPositionContract>>(request);
        }

        public async Task<List<UnconfirmedPositionContract>> EditUnconfirmedPositionsAsync(List<EditUnconfirmedPositionContract> unconfirmedPositions)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/bulk-edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(unconfirmedPositions);

            return await PerformRequestAsync<List<UnconfirmedPositionContract>>(request);
        }

        /// <summary>
        /// Confirm the unconfirmed position. The position will be converted to regular position in the system.
        /// </summary>
        /// <param name="unconfirmedPositionId">Unconfirmed position ID.</param>
        /// <param name="symbolId">Symbol ID from the system for converting position to regular one.</param>
        /// <returns>The method returns the regular position contract for the converted position.</returns>
        public PositionContract ConfirmUnconfirmedPosition(int unconfirmedPositionId, int symbolId)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/confirm/{unconfirmedPositionId}/{symbolId}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<PositionContract>(request);
        }

        /// <summary>
        /// Confirm the unconfirmed position. The position will be converted to regular position in the system.
        /// </summary>
        /// <param name="unconfirmedPositionId">Unconfirmed position ID.</param>
        /// <param name="symbolId">Symbol ID from the system for converting position to regular one.</param>
        /// <returns>The method returns the regular position contract for the converted position.</returns>
        public async Task<PositionContract> ConfirmUnconfirmedPositionAsync(int unconfirmedPositionId, int symbolId)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/confirm/{unconfirmedPositionId}/{symbolId}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<PositionContract>(request);
        }

        public List<ConfirmPositionResultContract> ConfirmUnconfirmedPositions(List<ConfirmUnconfirmedPositionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/confirm",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return PerformRequest<List<ConfirmPositionResultContract>>(request);
        }

        public async Task<List<ConfirmPositionResultContract>> ConfirmUnconfirmedPositionsAsync(List<ConfirmUnconfirmedPositionContract> contracts)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/confirm",
                Method = HttpMethod.Post,
            };

            request.SetBody(contracts);

            return await PerformRequestAsync<List<ConfirmPositionResultContract>>(request);
        }

        public void DeleteUnconfirmedPositions(List<int> unconfirmedPositionIds)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(unconfirmedPositionIds);

            PerformRequest(request);
        }

        public async Task DeleteUnconfirmedPositionsAsync(List<int> unconfirmedPositionIds)
        {
            var request = new RequestData
            {
                Url = $"unconfirmed-positions/by-ids",
                Method = HttpMethod.Delete,
            };

            request.SetBody(unconfirmedPositionIds);

            await PerformRequestAsync(request);
        }
    }

    public interface IUserContextsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Create UserContext that is required for authorization in case of user-specific requests like /positions, /portfolios, etc
        /// </summary>
        /// <param name="credentials">User credentials</param>
        /// <returns>Contract with ContextKey that can be used for authentication and authorization</returns>
        UserContextContract CreateUserContext(UserCredentialsContract credentials);

        /// <summary>
        /// Create UserContext that is required for authorization in case of user-specific requests like /positions, /portfolios, etc
        /// </summary>
        /// <param name="credentials">User credentials</param>
        /// <returns>Contract with ContextKey that can be used for authentication and authorization</returns>
        Task<UserContextContract> CreateUserContextAsync(UserCredentialsContract credentials);

        UserContextContract CreateTradeSmithUserContext(JsonWebTokenContract jsonWebToken);

        Task<UserContextContract> CreateTradeSmithUserContextAsync(JsonWebTokenContract jsonWebToken);

        UserContextContract CreateUserContextAndSyncBySnaid(SnaidContract snaidContract);

        Task<UserContextContract> CreateUserContextAndSyncBySnaidAsync(SnaidContract snaidContract);

        UserContextContract CreateUserContextUntrusted(EmailContract contract);

        Task<UserContextContract> CreateUserContextUntrustedAsync(EmailContract contract);

        UserContextContract RefreshUntrusted(UserContextContract contract);

        Task<UserContextContract> RefreshUntrustedAsync(UserContextContract contract);

        UserContextContract CreateUserContextUntrustedByDeviceId(CreateUserContextByDeviceIdContract contract);

        Task<UserContextContract> CreateUserContextUntrustedByDeviceIdAsync(CreateUserContextByDeviceIdContract contract);

        UserContextContract Refresh(UserContextContract contract);

        Task<UserContextContract> RefreshAsync(UserContextContract contract);
    }

    public interface IUserContextsClientByContextKeyApiMethods : IUserContextsClientByLicenseKeyApiMethods
    {
    }

    public interface IUserContextsClientByOrganizationApiMethods
    {
    }

    public partial interface IUserContextsClient : IUserContextsClientByLicenseKeyApiMethods, IClientByLicenseKey<IUserContextsClient, IUserContextsClientForUser, IUserContextsClientForOrganization>
    {
    }

    public interface IUserContextsClientForUser : IUserContextsClientByContextKeyApiMethods, IClientByContext<IUserContextsClientForUser, IUserContextsClientForOrganization>
    {
    }

    public interface IUserContextsClientForOrganization : IUserContextsClientByOrganizationApiMethods
    {
    }

    public partial class UserContextsClient : BaseClient<IUserContextsClient, IUserContextsClientForUser, IUserContextsClientForOrganization, UserContextsClient>, IUserContextsClient, IUserContextsClientForUser, IUserContextsClientForOrganization
    {
        /// <summary>
        /// Create UserContext that is required for authorization in case of user-specific requests like /positions, /portfolios, etc
        /// </summary>
        /// <param name="credentials">User credentials</param>
        /// <returns>Contract with ContextKey that can be used for authentication and authorization</returns>
        public UserContextContract CreateUserContext(UserCredentialsContract credentials)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(credentials);

            return PerformRequest<UserContextContract>(request);
        }

        /// <summary>
        /// Create UserContext that is required for authorization in case of user-specific requests like /positions, /portfolios, etc
        /// </summary>
        /// <param name="credentials">User credentials</param>
        /// <returns>Contract with ContextKey that can be used for authentication and authorization</returns>
        public async Task<UserContextContract> CreateUserContextAsync(UserCredentialsContract credentials)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(credentials);

            return await PerformRequestAsync<UserContextContract>(request);
        }

        public UserContextContract CreateTradeSmithUserContext(JsonWebTokenContract jsonWebToken)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/create-tradesmith",
                Method = HttpMethod.Post,
            };

            request.SetBody(jsonWebToken);

            return PerformRequest<UserContextContract>(request);
        }

        public async Task<UserContextContract> CreateTradeSmithUserContextAsync(JsonWebTokenContract jsonWebToken)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/create-tradesmith",
                Method = HttpMethod.Post,
            };

            request.SetBody(jsonWebToken);

            return await PerformRequestAsync<UserContextContract>(request);
        }

        public UserContextContract CreateUserContextAndSyncBySnaid(SnaidContract snaidContract)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/create-by-snaid",
                Method = HttpMethod.Post,
            };

            request.SetBody(snaidContract);

            return PerformRequest<UserContextContract>(request);
        }

        public async Task<UserContextContract> CreateUserContextAndSyncBySnaidAsync(SnaidContract snaidContract)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/create-by-snaid",
                Method = HttpMethod.Post,
            };

            request.SetBody(snaidContract);

            return await PerformRequestAsync<UserContextContract>(request);
        }

        public UserContextContract CreateUserContextUntrusted(EmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/untrusted/create-by-email",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<UserContextContract>(request);
        }

        public async Task<UserContextContract> CreateUserContextUntrustedAsync(EmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/untrusted/create-by-email",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserContextContract>(request);
        }

        public UserContextContract RefreshUntrusted(UserContextContract contract)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/untrusted/refresh",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<UserContextContract>(request);
        }

        public async Task<UserContextContract> RefreshUntrustedAsync(UserContextContract contract)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/untrusted/refresh",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserContextContract>(request);
        }

        public UserContextContract CreateUserContextUntrustedByDeviceId(CreateUserContextByDeviceIdContract contract)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/untrusted/create-by-device-id",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<UserContextContract>(request);
        }

        public async Task<UserContextContract> CreateUserContextUntrustedByDeviceIdAsync(CreateUserContextByDeviceIdContract contract)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/untrusted/create-by-device-id",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserContextContract>(request);
        }

        public UserContextContract Refresh(UserContextContract contract)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/refresh",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<UserContextContract>(request);
        }

        public async Task<UserContextContract> RefreshAsync(UserContextContract contract)
        {
            var request = new RequestData
            {
                Url = $"usercontexts/refresh",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserContextContract>(request);
        }
    }

    public interface IUserProductSubscriptionsClientByLicenseKeyApiMethods
    {
    }

    public interface IUserProductSubscriptionsClientByContextKeyApiMethods : IUserProductSubscriptionsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get user's subscription by Product Subscription ID.
        /// Currently user can have only one (or zero) subscription record per each Product Subscription ID.
        /// </summary>
        /// <param name="productSubscriptionId">Product Subscription ID</param>
        /// <returns>User's subscription (either active or inactive); null, if user was never subscribed.</returns>
        UserProductSubscriptionContract GetUserProductSubscription(ProductSubscriptions productSubscriptionId);

        /// <summary>
        /// Get user's subscription by Product Subscription ID.
        /// Currently user can have only one (or zero) subscription record per each Product Subscription ID.
        /// </summary>
        /// <param name="productSubscriptionId">Product Subscription ID</param>
        /// <returns>User's subscription (either active or inactive); null, if user was never subscribed.</returns>
        Task<UserProductSubscriptionContract> GetUserProductSubscriptionAsync(ProductSubscriptions productSubscriptionId);

        /// <summary>
        /// Get list of all products with user's subscriptions for each product
        /// </summary>
        /// <returns>List of all products with lists of user product subscriptions inside</returns>
        List<ProductWithUserSubscriptionsContract> GetProductsWithUserProductSubscriptions();

        /// <summary>
        /// Get list of all products with user's subscriptions for each product
        /// </summary>
        /// <returns>List of all products with lists of user product subscriptions inside</returns>
        Task<List<ProductWithUserSubscriptionsContract>> GetProductsWithUserProductSubscriptionsAsync();

        /// <summary>
        /// Get user's subscriptions by product
        /// </summary>
        /// <param name="product">Identifier of the product</param>
        /// <returns>Contract with information about TradeSmith Product with user subscriptions for product</returns>
        ProductWithUserSubscriptionsContract GetProductWithUserSubscriptions(Products product);

        /// <summary>
        /// Get user's subscriptions by product
        /// </summary>
        /// <param name="product">Identifier of the product</param>
        /// <returns>Contract with information about TradeSmith Product with user subscriptions for product</returns>
        Task<ProductWithUserSubscriptionsContract> GetProductWithUserSubscriptionsAsync(Products product);

        UserProductSubscriptionContract CreateUserSubscription(CreateUserSubscriptionContract contract);

        Task<UserProductSubscriptionContract> CreateUserSubscriptionAsync(CreateUserSubscriptionContract contract);

        UserProductSubscriptionContract PatchUserSubscription(int userProductSubscriptionId, PatchUserSubscriptionContract contract);

        Task<UserProductSubscriptionContract> PatchUserSubscriptionAsync(int userProductSubscriptionId, PatchUserSubscriptionContract contract);

        void DeleteUserSubscription(int userProductSubscriptionId);

        Task DeleteUserSubscriptionAsync(int userProductSubscriptionId);
    }

    public interface IUserProductSubscriptionsClientByOrganizationApiMethods
    {
    }

    public partial interface IUserProductSubscriptionsClient : IUserProductSubscriptionsClientByLicenseKeyApiMethods, IClientByLicenseKey<IUserProductSubscriptionsClient, IUserProductSubscriptionsClientForUser, IUserProductSubscriptionsClientForOrganization>
    {
    }

    public interface IUserProductSubscriptionsClientForUser : IUserProductSubscriptionsClientByContextKeyApiMethods, IClientByContext<IUserProductSubscriptionsClientForUser, IUserProductSubscriptionsClientForOrganization>
    {
    }

    public interface IUserProductSubscriptionsClientForOrganization : IUserProductSubscriptionsClientByOrganizationApiMethods
    {
    }

    public partial class UserProductSubscriptionsClient : BaseClient<IUserProductSubscriptionsClient, IUserProductSubscriptionsClientForUser, IUserProductSubscriptionsClientForOrganization, UserProductSubscriptionsClient>, IUserProductSubscriptionsClient, IUserProductSubscriptionsClientForUser, IUserProductSubscriptionsClientForOrganization
    {
        /// <summary>
        /// Get user's subscription by Product Subscription ID.
        /// Currently user can have only one (or zero) subscription record per each Product Subscription ID.
        /// </summary>
        /// <param name="productSubscriptionId">Product Subscription ID</param>
        /// <returns>User's subscription (either active or inactive); null, if user was never subscribed.</returns>
        public UserProductSubscriptionContract GetUserProductSubscription(ProductSubscriptions productSubscriptionId)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/user-subscriptions/by-product-subscription/{productSubscriptionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<UserProductSubscriptionContract>(request);
        }

        /// <summary>
        /// Get user's subscription by Product Subscription ID.
        /// Currently user can have only one (or zero) subscription record per each Product Subscription ID.
        /// </summary>
        /// <param name="productSubscriptionId">Product Subscription ID</param>
        /// <returns>User's subscription (either active or inactive); null, if user was never subscribed.</returns>
        public async Task<UserProductSubscriptionContract> GetUserProductSubscriptionAsync(ProductSubscriptions productSubscriptionId)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/user-subscriptions/by-product-subscription/{productSubscriptionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<UserProductSubscriptionContract>(request);
        }

        /// <summary>
        /// Get list of all products with user's subscriptions for each product
        /// </summary>
        /// <returns>List of all products with lists of user product subscriptions inside</returns>
        public List<ProductWithUserSubscriptionsContract> GetProductsWithUserProductSubscriptions()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/with-user-subscriptions",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ProductWithUserSubscriptionsContract>>(request);
        }

        /// <summary>
        /// Get list of all products with user's subscriptions for each product
        /// </summary>
        /// <returns>List of all products with lists of user product subscriptions inside</returns>
        public async Task<List<ProductWithUserSubscriptionsContract>> GetProductsWithUserProductSubscriptionsAsync()
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/with-user-subscriptions",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ProductWithUserSubscriptionsContract>>(request);
        }

        /// <summary>
        /// Get user's subscriptions by product
        /// </summary>
        /// <param name="product">Identifier of the product</param>
        /// <returns>Contract with information about TradeSmith Product with user subscriptions for product</returns>
        public ProductWithUserSubscriptionsContract GetProductWithUserSubscriptions(Products product)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/{product}/with-user-subscriptions",
                Method = HttpMethod.Get,
            };

            return PerformRequest<ProductWithUserSubscriptionsContract>(request);
        }

        /// <summary>
        /// Get user's subscriptions by product
        /// </summary>
        /// <param name="product">Identifier of the product</param>
        /// <returns>Contract with information about TradeSmith Product with user subscriptions for product</returns>
        public async Task<ProductWithUserSubscriptionsContract> GetProductWithUserSubscriptionsAsync(Products product)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/{product}/with-user-subscriptions",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<ProductWithUserSubscriptionsContract>(request);
        }

        public UserProductSubscriptionContract CreateUserSubscription(CreateUserSubscriptionContract contract)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/create-user-subscription",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<UserProductSubscriptionContract>(request);
        }

        public async Task<UserProductSubscriptionContract> CreateUserSubscriptionAsync(CreateUserSubscriptionContract contract)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/create-user-subscription",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserProductSubscriptionContract>(request);
        }

        public UserProductSubscriptionContract PatchUserSubscription(int userProductSubscriptionId, PatchUserSubscriptionContract contract)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/patch-user-subscription/{userProductSubscriptionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<UserProductSubscriptionContract>(request);
        }

        public async Task<UserProductSubscriptionContract> PatchUserSubscriptionAsync(int userProductSubscriptionId, PatchUserSubscriptionContract contract)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/patch-user-subscription/{userProductSubscriptionId}",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserProductSubscriptionContract>(request);
        }

        public void DeleteUserSubscription(int userProductSubscriptionId)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/delete-user-subscription/{userProductSubscriptionId}",
                Method = HttpMethod.Post,
            };

            PerformRequest(request);
        }

        public async Task DeleteUserSubscriptionAsync(int userProductSubscriptionId)
        {
            var request = new RequestData
            {
                Url = $"tradesmith-products/delete-user-subscription/{userProductSubscriptionId}",
                Method = HttpMethod.Post,
            };

            await PerformRequestAsync(request);
        }
    }

    public interface IUsersClientByLicenseKeyApiMethods
    {
    }

    public interface IUsersClientByContextKeyApiMethods : IUsersClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get user settings
        /// </summary>
        /// <returns>User settings contract</returns>
        UserSettingsContract GetUserSettings();

        /// <summary>
        /// Get user settings
        /// </summary>
        /// <returns>User settings contract</returns>
        Task<UserSettingsContract> GetUserSettingsAsync();

        /// <summary>
        /// Update user settings (used by mobile app (ios and android))
        /// </summary>
        /// <param name="contract">User settings contract to update</param>
        /// <returns>Updated user settings contract</returns>
        UserSettingsContract UpdateUserSettings(UserSettingsContract contract);

        /// <summary>
        /// Update user settings (used by mobile app (ios and android))
        /// </summary>
        /// <param name="contract">User settings contract to update</param>
        /// <returns>Updated user settings contract</returns>
        Task<UserSettingsContract> UpdateUserSettingsAsync(UserSettingsContract contract);

        /// <summary>
        /// Edit user settings
        /// </summary>
        /// <param name="contract">User settings contract to update</param>
        /// <returns>Updated user settings contract</returns>
        UserSettingsContract EditUserSettings(EditUserSettingsContract contract);

        /// <summary>
        /// Edit user settings
        /// </summary>
        /// <param name="contract">User settings contract to update</param>
        /// <returns>Updated user settings contract</returns>
        Task<UserSettingsContract> EditUserSettingsAsync(EditUserSettingsContract contract);
    }

    public interface IUsersClientByOrganizationApiMethods
    {
    }

    public partial interface IUsersClient : IUsersClientByLicenseKeyApiMethods, IClientByLicenseKey<IUsersClient, IUsersClientForUser, IUsersClientForOrganization>
    {
    }

    public interface IUsersClientForUser : IUsersClientByContextKeyApiMethods, IClientByContext<IUsersClientForUser, IUsersClientForOrganization>
    {
    }

    public interface IUsersClientForOrganization : IUsersClientByOrganizationApiMethods
    {
    }

    public partial class UsersClient : BaseClient<IUsersClient, IUsersClientForUser, IUsersClientForOrganization, UsersClient>, IUsersClient, IUsersClientForUser, IUsersClientForOrganization
    {
        /// <summary>
        /// Get user settings
        /// </summary>
        /// <returns>User settings contract</returns>
        public UserSettingsContract GetUserSettings()
        {
            var request = new RequestData
            {
                Url = $"users/settings",
                Method = HttpMethod.Get,
            };

            return PerformRequest<UserSettingsContract>(request);
        }

        /// <summary>
        /// Get user settings
        /// </summary>
        /// <returns>User settings contract</returns>
        public async Task<UserSettingsContract> GetUserSettingsAsync()
        {
            var request = new RequestData
            {
                Url = $"users/settings",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<UserSettingsContract>(request);
        }

        /// <summary>
        /// Update user settings (used by mobile app (ios and android))
        /// </summary>
        /// <param name="contract">User settings contract to update</param>
        /// <returns>Updated user settings contract</returns>
        [Obsolete("Use EditUserSettings instead")]
        public UserSettingsContract UpdateUserSettings(UserSettingsContract contract)
        {
            var request = new RequestData
            {
                Url = $"users/settings",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<UserSettingsContract>(request);
        }

        /// <summary>
        /// Update user settings (used by mobile app (ios and android))
        /// </summary>
        /// <param name="contract">User settings contract to update</param>
        /// <returns>Updated user settings contract</returns>
        [Obsolete("Use EditUserSettings instead")]
        public async Task<UserSettingsContract> UpdateUserSettingsAsync(UserSettingsContract contract)
        {
            var request = new RequestData
            {
                Url = $"users/settings",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserSettingsContract>(request);
        }

        /// <summary>
        /// Edit user settings
        /// </summary>
        /// <param name="contract">User settings contract to update</param>
        /// <returns>Updated user settings contract</returns>
        public UserSettingsContract EditUserSettings(EditUserSettingsContract contract)
        {
            var request = new RequestData
            {
                Url = $"users/settings/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<UserSettingsContract>(request);
        }

        /// <summary>
        /// Edit user settings
        /// </summary>
        /// <param name="contract">User settings contract to update</param>
        /// <returns>Updated user settings contract</returns>
        public async Task<UserSettingsContract> EditUserSettingsAsync(EditUserSettingsContract contract)
        {
            var request = new RequestData
            {
                Url = $"users/settings/edit",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserSettingsContract>(request);
        }
    }

    public interface IUserVisitsClientByLicenseKeyApiMethods
    {
    }

    public interface IUserVisitsClientByContextKeyApiMethods : IUserVisitsClientByLicenseKeyApiMethods
    {
    }

    public interface IUserVisitsClientByOrganizationApiMethods
    {
    }

    public partial interface IUserVisitsClient : IUserVisitsClientByLicenseKeyApiMethods, IClientByLicenseKey<IUserVisitsClient, IUserVisitsClientForUser, IUserVisitsClientForOrganization>
    {
    }

    public interface IUserVisitsClientForUser : IUserVisitsClientByContextKeyApiMethods, IClientByContext<IUserVisitsClientForUser, IUserVisitsClientForOrganization>
    {
    }

    public interface IUserVisitsClientForOrganization : IUserVisitsClientByOrganizationApiMethods
    {
    }

    public partial class UserVisitsClient : BaseClient<IUserVisitsClient, IUserVisitsClientForUser, IUserVisitsClientForOrganization, UserVisitsClient>, IUserVisitsClient, IUserVisitsClientForUser, IUserVisitsClientForOrganization
    {
    }

    public interface IVendorSyncErrorsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Add new vendor system error log.
        /// </summary>
        /// <param name="vendorSystemErrorContract">Create vendor system error contract</param>
        /// <returns>The method returns contract for newly added vendor system error.</returns>
        VendorSystemErrorContract AddVendorSystemError(CreateVendorSystemErrorContract vendorSystemErrorContract);

        /// <summary>
        /// Add new vendor system error log.
        /// </summary>
        /// <param name="vendorSystemErrorContract">Create vendor system error contract</param>
        /// <returns>The method returns contract for newly added vendor system error.</returns>
        Task<VendorSystemErrorContract> AddVendorSystemErrorAsync(CreateVendorSystemErrorContract vendorSystemErrorContract);

        /// <summary>
        /// Add new vendor sync log.
        /// </summary>
        /// <param name="vendorSyncLogContract">Create vendor sync log contract</param>
        /// <returns>The method returns contract for newly added vendor sync log.</returns>
        VendorSyncLogContract AddLog(CreateVendorSyncLogContract vendorSyncLogContract);

        /// <summary>
        /// Add new vendor sync log.
        /// </summary>
        /// <param name="vendorSyncLogContract">Create vendor sync log contract</param>
        /// <returns>The method returns contract for newly added vendor sync log.</returns>
        Task<VendorSyncLogContract> AddLogAsync(CreateVendorSyncLogContract vendorSyncLogContract);

        /// <summary>
        /// Edit vendor sync log.
        /// </summary>
        /// <param name="vendorSyncLogId">Vendor sync log ID</param>
        /// <param name="editVendorSyncLogContract">Edit vendor sync log contract</param>
        /// <returns>The method returns contract for edited vendor sync log.</returns>
        VendorSyncLogContract EditLog(int vendorSyncLogId, EditVendorSyncLogContract editVendorSyncLogContract);

        /// <summary>
        /// Edit vendor sync log.
        /// </summary>
        /// <param name="vendorSyncLogId">Vendor sync log ID</param>
        /// <param name="editVendorSyncLogContract">Edit vendor sync log contract</param>
        /// <returns>The method returns contract for edited vendor sync log.</returns>
        Task<VendorSyncLogContract> EditLogAsync(int vendorSyncLogId, EditVendorSyncLogContract editVendorSyncLogContract);

        /// <summary>
        /// Get vendor sync logs by vendor sync log ID
        /// </summary>
        /// <param name="vendorSyncLogId">Vendor sync log ID</param>
        /// <returns>The method returns vendor sync log</returns>
        VendorSyncLogContract GetVendorSyncLogsById(int vendorSyncLogId);

        /// <summary>
        /// Get vendor sync logs by vendor sync log ID
        /// </summary>
        /// <param name="vendorSyncLogId">Vendor sync log ID</param>
        /// <returns>The method returns vendor sync log</returns>
        Task<VendorSyncLogContract> GetVendorSyncLogsByIdAsync(int vendorSyncLogId);

        /// <summary>
        /// Get vendor sync logs by link session Id
        /// </summary>
        /// <param name="linkSessionId">Plaid link session Id</param>
        /// <returns>The method returns vendor sync logs</returns>
        List<VendorSyncLogContract> GetVendorSyncLogsByLinkSessionId(string linkSessionId);

        /// <summary>
        /// Get vendor sync logs by link session Id
        /// </summary>
        /// <param name="linkSessionId">Plaid link session Id</param>
        /// <returns>The method returns vendor sync logs</returns>
        Task<List<VendorSyncLogContract>> GetVendorSyncLogsByLinkSessionIdAsync(string linkSessionId);

        /// <summary>
        /// Add new vendor portfolio log.
        /// </summary>
        /// <param name="vendorPortfolioLogContract">Create vendor portfolio log contract</param>
        /// <returns>The method returns contract for newly added vendor portfolio log.</returns>
        VendorPortfolioLogContract AddPortfolioLog(CreateVendorPortfolioLogContract vendorPortfolioLogContract);

        /// <summary>
        /// Add new vendor portfolio log.
        /// </summary>
        /// <param name="vendorPortfolioLogContract">Create vendor portfolio log contract</param>
        /// <returns>The method returns contract for newly added vendor portfolio log.</returns>
        Task<VendorPortfolioLogContract> AddPortfolioLogAsync(CreateVendorPortfolioLogContract vendorPortfolioLogContract);

        /// <summary>
        /// Get vendor portfolio log.
        /// </summary>
        /// <param name="vendorPortfolioLogId">Vendor portfolio log ID</param>
        /// <returns>The method returns vendor portfolio log by requested vendor portfolio log ID.</returns>
        VendorPortfolioLogContract GetPortfolioLog(int vendorPortfolioLogId);

        /// <summary>
        /// Get vendor portfolio log.
        /// </summary>
        /// <param name="vendorPortfolioLogId">Vendor portfolio log ID</param>
        /// <returns>The method returns vendor portfolio log by requested vendor portfolio log ID.</returns>
        Task<VendorPortfolioLogContract> GetPortfolioLogAsync(int vendorPortfolioLogId);

        /// <summary>
        /// Get all vendor sync errors.
        /// </summary>
        /// <returns>The method returns list of contracts for all vendor sync errors.</returns>
        List<VendorSyncErrorMessageContract> GetAllErrorMessages();

        /// <summary>
        /// Get all vendor sync errors.
        /// </summary>
        /// <returns>The method returns list of contracts for all vendor sync errors.</returns>
        Task<List<VendorSyncErrorMessageContract>> GetAllErrorMessagesAsync();
    }

    public interface IVendorSyncErrorsClientByContextKeyApiMethods : IVendorSyncErrorsClientByLicenseKeyApiMethods
    {
    }

    public interface IVendorSyncErrorsClientByOrganizationApiMethods
    {
    }

    public partial interface IVendorSyncErrorsClient : IVendorSyncErrorsClientByLicenseKeyApiMethods, IClientByLicenseKey<IVendorSyncErrorsClient, IVendorSyncErrorsClientForUser, IVendorSyncErrorsClientForOrganization>
    {
    }

    public interface IVendorSyncErrorsClientForUser : IVendorSyncErrorsClientByContextKeyApiMethods, IClientByContext<IVendorSyncErrorsClientForUser, IVendorSyncErrorsClientForOrganization>
    {
    }

    public interface IVendorSyncErrorsClientForOrganization : IVendorSyncErrorsClientByOrganizationApiMethods
    {
    }

    public partial class VendorSyncErrorsClient : BaseClient<IVendorSyncErrorsClient, IVendorSyncErrorsClientForUser, IVendorSyncErrorsClientForOrganization, VendorSyncErrorsClient>, IVendorSyncErrorsClient, IVendorSyncErrorsClientForUser, IVendorSyncErrorsClientForOrganization
    {
        /// <summary>
        /// Add new vendor system error log.
        /// </summary>
        /// <param name="vendorSystemErrorContract">Create vendor system error contract</param>
        /// <returns>The method returns contract for newly added vendor system error.</returns>
        public VendorSystemErrorContract AddVendorSystemError(CreateVendorSystemErrorContract vendorSystemErrorContract)
        {
            var request = new RequestData
            {
                Url = $"vendor-system-errors/add-error",
                Method = HttpMethod.Post,
            };

            request.SetBody(vendorSystemErrorContract);

            return PerformRequest<VendorSystemErrorContract>(request);
        }

        /// <summary>
        /// Add new vendor system error log.
        /// </summary>
        /// <param name="vendorSystemErrorContract">Create vendor system error contract</param>
        /// <returns>The method returns contract for newly added vendor system error.</returns>
        public async Task<VendorSystemErrorContract> AddVendorSystemErrorAsync(CreateVendorSystemErrorContract vendorSystemErrorContract)
        {
            var request = new RequestData
            {
                Url = $"vendor-system-errors/add-error",
                Method = HttpMethod.Post,
            };

            request.SetBody(vendorSystemErrorContract);

            return await PerformRequestAsync<VendorSystemErrorContract>(request);
        }

        /// <summary>
        /// Add new vendor sync log.
        /// </summary>
        /// <param name="vendorSyncLogContract">Create vendor sync log contract</param>
        /// <returns>The method returns contract for newly added vendor sync log.</returns>
        public VendorSyncLogContract AddLog(CreateVendorSyncLogContract vendorSyncLogContract)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/add-log",
                Method = HttpMethod.Post,
            };

            request.SetBody(vendorSyncLogContract);

            return PerformRequest<VendorSyncLogContract>(request);
        }

        /// <summary>
        /// Add new vendor sync log.
        /// </summary>
        /// <param name="vendorSyncLogContract">Create vendor sync log contract</param>
        /// <returns>The method returns contract for newly added vendor sync log.</returns>
        public async Task<VendorSyncLogContract> AddLogAsync(CreateVendorSyncLogContract vendorSyncLogContract)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/add-log",
                Method = HttpMethod.Post,
            };

            request.SetBody(vendorSyncLogContract);

            return await PerformRequestAsync<VendorSyncLogContract>(request);
        }

        /// <summary>
        /// Edit vendor sync log.
        /// </summary>
        /// <param name="vendorSyncLogId">Vendor sync log ID</param>
        /// <param name="editVendorSyncLogContract">Edit vendor sync log contract</param>
        /// <returns>The method returns contract for edited vendor sync log.</returns>
        public VendorSyncLogContract EditLog(int vendorSyncLogId, EditVendorSyncLogContract editVendorSyncLogContract)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/edit-log/{vendorSyncLogId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(editVendorSyncLogContract);

            return PerformRequest<VendorSyncLogContract>(request);
        }

        /// <summary>
        /// Edit vendor sync log.
        /// </summary>
        /// <param name="vendorSyncLogId">Vendor sync log ID</param>
        /// <param name="editVendorSyncLogContract">Edit vendor sync log contract</param>
        /// <returns>The method returns contract for edited vendor sync log.</returns>
        public async Task<VendorSyncLogContract> EditLogAsync(int vendorSyncLogId, EditVendorSyncLogContract editVendorSyncLogContract)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/edit-log/{vendorSyncLogId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(editVendorSyncLogContract);

            return await PerformRequestAsync<VendorSyncLogContract>(request);
        }

        /// <summary>
        /// Get vendor sync logs by vendor sync log ID
        /// </summary>
        /// <param name="vendorSyncLogId">Vendor sync log ID</param>
        /// <returns>The method returns vendor sync log</returns>
        public VendorSyncLogContract GetVendorSyncLogsById(int vendorSyncLogId)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/get-logs-by-id/{vendorSyncLogId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<VendorSyncLogContract>(request);
        }

        /// <summary>
        /// Get vendor sync logs by vendor sync log ID
        /// </summary>
        /// <param name="vendorSyncLogId">Vendor sync log ID</param>
        /// <returns>The method returns vendor sync log</returns>
        public async Task<VendorSyncLogContract> GetVendorSyncLogsByIdAsync(int vendorSyncLogId)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/get-logs-by-id/{vendorSyncLogId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<VendorSyncLogContract>(request);
        }

        /// <summary>
        /// Get vendor sync logs by link session Id
        /// </summary>
        /// <param name="linkSessionId">Plaid link session Id</param>
        /// <returns>The method returns vendor sync logs</returns>
        public List<VendorSyncLogContract> GetVendorSyncLogsByLinkSessionId(string linkSessionId)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/get-logs/{linkSessionId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<VendorSyncLogContract>>(request);
        }

        /// <summary>
        /// Get vendor sync logs by link session Id
        /// </summary>
        /// <param name="linkSessionId">Plaid link session Id</param>
        /// <returns>The method returns vendor sync logs</returns>
        public async Task<List<VendorSyncLogContract>> GetVendorSyncLogsByLinkSessionIdAsync(string linkSessionId)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/get-logs/{linkSessionId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<VendorSyncLogContract>>(request);
        }

        /// <summary>
        /// Add new vendor portfolio log.
        /// </summary>
        /// <param name="vendorPortfolioLogContract">Create vendor portfolio log contract</param>
        /// <returns>The method returns contract for newly added vendor portfolio log.</returns>
        public VendorPortfolioLogContract AddPortfolioLog(CreateVendorPortfolioLogContract vendorPortfolioLogContract)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/add-portfolio-log",
                Method = HttpMethod.Post,
            };

            request.SetBody(vendorPortfolioLogContract);

            return PerformRequest<VendorPortfolioLogContract>(request);
        }

        /// <summary>
        /// Add new vendor portfolio log.
        /// </summary>
        /// <param name="vendorPortfolioLogContract">Create vendor portfolio log contract</param>
        /// <returns>The method returns contract for newly added vendor portfolio log.</returns>
        public async Task<VendorPortfolioLogContract> AddPortfolioLogAsync(CreateVendorPortfolioLogContract vendorPortfolioLogContract)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/add-portfolio-log",
                Method = HttpMethod.Post,
            };

            request.SetBody(vendorPortfolioLogContract);

            return await PerformRequestAsync<VendorPortfolioLogContract>(request);
        }

        /// <summary>
        /// Get vendor portfolio log.
        /// </summary>
        /// <param name="vendorPortfolioLogId">Vendor portfolio log ID</param>
        /// <returns>The method returns vendor portfolio log by requested vendor portfolio log ID.</returns>
        public VendorPortfolioLogContract GetPortfolioLog(int vendorPortfolioLogId)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/get-portfolio-log/{vendorPortfolioLogId}",
                Method = HttpMethod.Post,
            };

            return PerformRequest<VendorPortfolioLogContract>(request);
        }

        /// <summary>
        /// Get vendor portfolio log.
        /// </summary>
        /// <param name="vendorPortfolioLogId">Vendor portfolio log ID</param>
        /// <returns>The method returns vendor portfolio log by requested vendor portfolio log ID.</returns>
        public async Task<VendorPortfolioLogContract> GetPortfolioLogAsync(int vendorPortfolioLogId)
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-logs/get-portfolio-log/{vendorPortfolioLogId}",
                Method = HttpMethod.Post,
            };

            return await PerformRequestAsync<VendorPortfolioLogContract>(request);
        }

        /// <summary>
        /// Get all vendor sync errors.
        /// </summary>
        /// <returns>The method returns list of contracts for all vendor sync errors.</returns>
        public List<VendorSyncErrorMessageContract> GetAllErrorMessages()
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-error-messages/all",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<VendorSyncErrorMessageContract>>(request);
        }

        /// <summary>
        /// Get all vendor sync errors.
        /// </summary>
        /// <returns>The method returns list of contracts for all vendor sync errors.</returns>
        public async Task<List<VendorSyncErrorMessageContract>> GetAllErrorMessagesAsync()
        {
            var request = new RequestData
            {
                Url = $"vendor-sync-error-messages/all",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<VendorSyncErrorMessageContract>>(request);
        }
    }

    public interface IVendorUsernamesClientByLicenseKeyApiMethods
    {
    }

    public interface IVendorUsernamesClientByContextKeyApiMethods : IVendorUsernamesClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get vendor username by vendor type.
        /// </summary>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>The method returns vendor username contract.</returns>
        VendorUsernameContract GetVendorUsername(VendorTypes vendorType);

        /// <summary>
        /// Get vendor username by vendor type.
        /// </summary>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>The method returns vendor username contract.</returns>
        Task<VendorUsernameContract> GetVendorUsernameAsync(VendorTypes vendorType);

        /// <summary>
        /// Create vendor username for current user.
        /// </summary>
        /// <param name="createContract">Parameters to create vendor username.</param>
        /// <returns>The method returns created vendor username.</returns>
        VendorUsernameContract CreateVendorUsername(CreateVendorUsernameContract createContract);

        /// <summary>
        /// Create vendor username for current user.
        /// </summary>
        /// <param name="createContract">Parameters to create vendor username.</param>
        /// <returns>The method returns created vendor username.</returns>
        Task<VendorUsernameContract> CreateVendorUsernameAsync(CreateVendorUsernameContract createContract);
    }

    public interface IVendorUsernamesClientByOrganizationApiMethods
    {
    }

    public partial interface IVendorUsernamesClient : IVendorUsernamesClientByLicenseKeyApiMethods, IClientByLicenseKey<IVendorUsernamesClient, IVendorUsernamesClientForUser, IVendorUsernamesClientForOrganization>
    {
    }

    public interface IVendorUsernamesClientForUser : IVendorUsernamesClientByContextKeyApiMethods, IClientByContext<IVendorUsernamesClientForUser, IVendorUsernamesClientForOrganization>
    {
    }

    public interface IVendorUsernamesClientForOrganization : IVendorUsernamesClientByOrganizationApiMethods
    {
    }

    public partial class VendorUsernamesClient : BaseClient<IVendorUsernamesClient, IVendorUsernamesClientForUser, IVendorUsernamesClientForOrganization, VendorUsernamesClient>, IVendorUsernamesClient, IVendorUsernamesClientForUser, IVendorUsernamesClientForOrganization
    {
        /// <summary>
        /// Get vendor username by vendor type.
        /// </summary>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>The method returns vendor username contract.</returns>
        public VendorUsernameContract GetVendorUsername(VendorTypes vendorType)
        {
            var request = new RequestData
            {
                Url = $"vendor-usernames/{vendorType}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<VendorUsernameContract>(request);
        }

        /// <summary>
        /// Get vendor username by vendor type.
        /// </summary>
        /// <param name="vendorType">Vendor type.</param>
        /// <returns>The method returns vendor username contract.</returns>
        public async Task<VendorUsernameContract> GetVendorUsernameAsync(VendorTypes vendorType)
        {
            var request = new RequestData
            {
                Url = $"vendor-usernames/{vendorType}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<VendorUsernameContract>(request);
        }

        /// <summary>
        /// Create vendor username for current user.
        /// </summary>
        /// <param name="createContract">Parameters to create vendor username.</param>
        /// <returns>The method returns created vendor username.</returns>
        public VendorUsernameContract CreateVendorUsername(CreateVendorUsernameContract createContract)
        {
            var request = new RequestData
            {
                Url = $"vendor-usernames/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return PerformRequest<VendorUsernameContract>(request);
        }

        /// <summary>
        /// Create vendor username for current user.
        /// </summary>
        /// <param name="createContract">Parameters to create vendor username.</param>
        /// <returns>The method returns created vendor username.</returns>
        public async Task<VendorUsernameContract> CreateVendorUsernameAsync(CreateVendorUsernameContract createContract)
        {
            var request = new RequestData
            {
                Url = $"vendor-usernames/create",
                Method = HttpMethod.Post,
            };

            request.SetBody(createContract);

            return await PerformRequestAsync<VendorUsernameContract>(request);
        }
    }

    public interface IViewsClientByLicenseKeyApiMethods
    {
    }

    public interface IViewsClientByContextKeyApiMethods : IViewsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get the list of view columns by view type.
        /// </summary>
        /// <param name="viewType">View type.</param>
        /// <returns>The method returns an array containing  the view columns according to the selected view type.</returns>
        List<ViewColumnContract> GetViewColumns(ViewTypes viewType);

        /// <summary>
        /// Get the list of view columns by view type.
        /// </summary>
        /// <param name="viewType">View type.</param>
        /// <returns>The method returns an array containing  the view columns according to the selected view type.</returns>
        Task<List<ViewColumnContract>> GetViewColumnsAsync(ViewTypes viewType);

        /// <summary>
        /// Get all created views for the current user containing  selected position or alerts details.
        /// </summary>
        /// <returns>The method returns an array of all created views for the current user containing  selected position and alerts details.</returns>
        List<UserViewContract> GetUserViews();

        /// <summary>
        /// Get all created views for the current user containing  selected position or alerts details.
        /// </summary>
        /// <returns>The method returns an array of all created views for the current user containing  selected position and alerts details.</returns>
        Task<List<UserViewContract>> GetUserViewsAsync();

        /// <summary>
        /// The method creates a new user view.
        /// </summary>
        /// <param name="contract">Contract to create new view.</param>
        /// <returns>The method returns the created user view.</returns>
        UserViewContract CreateUserView(CreateUserViewContract contract);

        /// <summary>
        /// The method creates a new user view.
        /// </summary>
        /// <param name="contract">Contract to create new view.</param>
        /// <returns>The method returns the created user view.</returns>
        Task<UserViewContract> CreateUserViewAsync(CreateUserViewContract contract);

        /// <summary>
        /// The method edits columns of the selected user view.
        /// </summary>
        /// <param name="userViewId">User view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited user view.</returns>
        UserViewContract EditUserView(int userViewId, EditUserViewContract contract);

        /// <summary>
        /// The method edits columns of the selected user view.
        /// </summary>
        /// <param name="userViewId">User view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited user view.</returns>
        Task<UserViewContract> EditUserViewAsync(int userViewId, EditUserViewContract contract);

        /// <summary>
        /// The method deletes the selected view of the current user.
        /// </summary>
        /// <param name="viewId">User view ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        void DeleteUserView(int viewId);

        /// <summary>
        /// The method deletes the selected view of the current user.
        /// </summary>
        /// <param name="viewId">User view ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        Task DeleteUserViewAsync(int viewId);

        /// <summary>
        /// Get the list of view columns by view ID.
        /// </summary>
        /// <param name="viewId">View ID.</param>
        /// <returns>The method returns an array containing  the available columns for the selected user view.</returns>
        List<UserViewColumnContract> GetUserViewColumns(int viewId);

        /// <summary>
        /// Get the list of view columns by view ID.
        /// </summary>
        /// <param name="viewId">View ID.</param>
        /// <returns>The method returns an array containing  the available columns for the selected user view.</returns>
        Task<List<UserViewColumnContract>> GetUserViewColumnsAsync(int viewId);

        List<UserViewColumnContract> GetUserViewsColumns(List<int> userViewIds);

        Task<List<UserViewColumnContract>> GetUserViewsColumnsAsync(List<int> userViewIds);

        void ReplaceUserViewColumns(int userViewId, List<CreateUserViewColumnContract> columns);

        Task ReplaceUserViewColumnsAsync(int userViewId, List<CreateUserViewColumnContract> columns);

        /// <summary>
        /// Edit user view column.
        /// Main usage is to set column width.
        /// </summary>
        /// <param name="userViewId">View ID.</param>
        /// <param name="columnType">Column type that identifies specific column in corresponding view.</param>
        /// <param name="contract">Parameters to edit user view column.</param>
        /// <returns>Updated view column information.</returns>
        UserViewColumnContract EditUserViewColumn(int userViewId, ViewColumnTypes columnType, EditUserViewColumnContract contract);

        /// <summary>
        /// Edit user view column.
        /// Main usage is to set column width.
        /// </summary>
        /// <param name="userViewId">View ID.</param>
        /// <param name="columnType">Column type that identifies specific column in corresponding view.</param>
        /// <param name="contract">Parameters to edit user view column.</param>
        /// <returns>Updated view column information.</returns>
        Task<UserViewColumnContract> EditUserViewColumnAsync(int userViewId, ViewColumnTypes columnType, EditUserViewColumnContract contract);
    }

    public interface IViewsClientByOrganizationApiMethods
    {
    }

    public partial interface IViewsClient : IViewsClientByLicenseKeyApiMethods, IClientByLicenseKey<IViewsClient, IViewsClientForUser, IViewsClientForOrganization>
    {
    }

    public interface IViewsClientForUser : IViewsClientByContextKeyApiMethods, IClientByContext<IViewsClientForUser, IViewsClientForOrganization>
    {
    }

    public interface IViewsClientForOrganization : IViewsClientByOrganizationApiMethods
    {
    }

    public partial class ViewsClient : BaseClient<IViewsClient, IViewsClientForUser, IViewsClientForOrganization, ViewsClient>, IViewsClient, IViewsClientForUser, IViewsClientForOrganization
    {
        /// <summary>
        /// Get the list of view columns by view type.
        /// </summary>
        /// <param name="viewType">View type.</param>
        /// <returns>The method returns an array containing  the view columns according to the selected view type.</returns>
        public List<ViewColumnContract> GetViewColumns(ViewTypes viewType)
        {
            var request = new RequestData
            {
                Url = $"views/columns/{viewType}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<ViewColumnContract>>(request);
        }

        /// <summary>
        /// Get the list of view columns by view type.
        /// </summary>
        /// <param name="viewType">View type.</param>
        /// <returns>The method returns an array containing  the view columns according to the selected view type.</returns>
        public async Task<List<ViewColumnContract>> GetViewColumnsAsync(ViewTypes viewType)
        {
            var request = new RequestData
            {
                Url = $"views/columns/{viewType}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<ViewColumnContract>>(request);
        }

        /// <summary>
        /// Get all created views for the current user containing  selected position or alerts details.
        /// </summary>
        /// <returns>The method returns an array of all created views for the current user containing  selected position and alerts details.</returns>
        public List<UserViewContract> GetUserViews()
        {
            var request = new RequestData
            {
                Url = $"views",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<UserViewContract>>(request);
        }

        /// <summary>
        /// Get all created views for the current user containing  selected position or alerts details.
        /// </summary>
        /// <returns>The method returns an array of all created views for the current user containing  selected position and alerts details.</returns>
        public async Task<List<UserViewContract>> GetUserViewsAsync()
        {
            var request = new RequestData
            {
                Url = $"views",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<UserViewContract>>(request);
        }

        /// <summary>
        /// The method creates a new user view.
        /// </summary>
        /// <param name="contract">Contract to create new view.</param>
        /// <returns>The method returns the created user view.</returns>
        public UserViewContract CreateUserView(CreateUserViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"views",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<UserViewContract>(request);
        }

        /// <summary>
        /// The method creates a new user view.
        /// </summary>
        /// <param name="contract">Contract to create new view.</param>
        /// <returns>The method returns the created user view.</returns>
        public async Task<UserViewContract> CreateUserViewAsync(CreateUserViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"views",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserViewContract>(request);
        }

        /// <summary>
        /// The method edits columns of the selected user view.
        /// </summary>
        /// <param name="userViewId">User view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited user view.</returns>
        public UserViewContract EditUserView(int userViewId, EditUserViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"views/{userViewId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<UserViewContract>(request);
        }

        /// <summary>
        /// The method edits columns of the selected user view.
        /// </summary>
        /// <param name="userViewId">User view Id.</param>
        /// <param name="contract">Values to edit.</param>
        /// <returns>The method returns the edited user view.</returns>
        public async Task<UserViewContract> EditUserViewAsync(int userViewId, EditUserViewContract contract)
        {
            var request = new RequestData
            {
                Url = $"views/{userViewId}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserViewContract>(request);
        }

        /// <summary>
        /// The method deletes the selected view of the current user.
        /// </summary>
        /// <param name="viewId">User view ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        public void DeleteUserView(int viewId)
        {
            var request = new RequestData
            {
                Url = $"views/{viewId}",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// The method deletes the selected view of the current user.
        /// </summary>
        /// <param name="viewId">User view ID.</param>
        /// <returns>The method returns HTTP status code 200 after the deletion of the view.</returns>
        public async Task DeleteUserViewAsync(int viewId)
        {
            var request = new RequestData
            {
                Url = $"views/{viewId}",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Get the list of view columns by view ID.
        /// </summary>
        /// <param name="viewId">View ID.</param>
        /// <returns>The method returns an array containing  the available columns for the selected user view.</returns>
        public List<UserViewColumnContract> GetUserViewColumns(int viewId)
        {
            var request = new RequestData
            {
                Url = $"views/user-columns/{viewId}",
                Method = HttpMethod.Get,
            };

            return PerformRequest<List<UserViewColumnContract>>(request);
        }

        /// <summary>
        /// Get the list of view columns by view ID.
        /// </summary>
        /// <param name="viewId">View ID.</param>
        /// <returns>The method returns an array containing  the available columns for the selected user view.</returns>
        public async Task<List<UserViewColumnContract>> GetUserViewColumnsAsync(int viewId)
        {
            var request = new RequestData
            {
                Url = $"views/user-columns/{viewId}",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<List<UserViewColumnContract>>(request);
        }

        public List<UserViewColumnContract> GetUserViewsColumns(List<int> userViewIds)
        {
            var request = new RequestData
            {
                Url = $"views/user-columns/get-by-view-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(userViewIds);

            return PerformRequest<List<UserViewColumnContract>>(request);
        }

        public async Task<List<UserViewColumnContract>> GetUserViewsColumnsAsync(List<int> userViewIds)
        {
            var request = new RequestData
            {
                Url = $"views/user-columns/get-by-view-ids",
                Method = HttpMethod.Post,
            };

            request.SetBody(userViewIds);

            return await PerformRequestAsync<List<UserViewColumnContract>>(request);
        }

        public void ReplaceUserViewColumns(int userViewId, List<CreateUserViewColumnContract> columns)
        {
            var request = new RequestData
            {
                Url = $"views/{userViewId}/columns",
                Method = HttpMethod.Put,
            };

            request.SetBody(columns);

            PerformRequest(request);
        }

        public async Task ReplaceUserViewColumnsAsync(int userViewId, List<CreateUserViewColumnContract> columns)
        {
            var request = new RequestData
            {
                Url = $"views/{userViewId}/columns",
                Method = HttpMethod.Put,
            };

            request.SetBody(columns);

            await PerformRequestAsync(request);
        }

        /// <summary>
        /// Edit user view column.
        /// Main usage is to set column width.
        /// </summary>
        /// <param name="userViewId">View ID.</param>
        /// <param name="columnType">Column type that identifies specific column in corresponding view.</param>
        /// <param name="contract">Parameters to edit user view column.</param>
        /// <returns>Updated view column information.</returns>
        public UserViewColumnContract EditUserViewColumn(int userViewId, ViewColumnTypes columnType, EditUserViewColumnContract contract)
        {
            var request = new RequestData
            {
                Url = $"user-views/{userViewId}/columns/{columnType}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return PerformRequest<UserViewColumnContract>(request);
        }

        /// <summary>
        /// Edit user view column.
        /// Main usage is to set column width.
        /// </summary>
        /// <param name="userViewId">View ID.</param>
        /// <param name="columnType">Column type that identifies specific column in corresponding view.</param>
        /// <param name="contract">Parameters to edit user view column.</param>
        /// <returns>Updated view column information.</returns>
        public async Task<UserViewColumnContract> EditUserViewColumnAsync(int userViewId, ViewColumnTypes columnType, EditUserViewColumnContract contract)
        {
            var request = new RequestData
            {
                Url = $"user-views/{userViewId}/columns/{columnType}",
                Method = HttpMethod.Put,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<UserViewColumnContract>(request);
        }
    }

    public interface IYodleeUserContextsClientByLicenseKeyApiMethods
    {
    }

    public interface IYodleeUserContextsClientByContextKeyApiMethods : IYodleeUserContextsClientByLicenseKeyApiMethods
    {
        /// <summary>
        /// Get yodlee user context data for the current user.
        /// </summary>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        YodleeUserContextContract GetYodleeUserContext();

        /// <summary>
        /// Get yodlee user context data for the current user.
        /// </summary>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        Task<YodleeUserContextContract> GetYodleeUserContextAsync();

        /// <summary>
        /// Create or update yodlee user context for the current user.
        /// </summary>
        /// <param name="contract">Parameters to create or update Yodlee User context.</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        YodleeUserContextContract CreateOrUpdateYodleeUserContext(CreateOrUpdateYodleeUserContextContract contract);

        /// <summary>
        /// Create or update yodlee user context for the current user.
        /// </summary>
        /// <param name="contract">Parameters to create or update Yodlee User context.</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        Task<YodleeUserContextContract> CreateOrUpdateYodleeUserContextAsync(CreateOrUpdateYodleeUserContextContract contract);

        /// <summary>
        /// Delete yodlee user context for the current user.
        /// </summary>
        /// <returns>The method returns HTTP status code 200 after the deleting of Yodlee user context.</returns>
        void DeleteYodleeUserContext();

        /// <summary>
        /// Delete yodlee user context for the current user.
        /// </summary>
        /// <returns>The method returns HTTP status code 200 after the deleting of Yodlee user context.</returns>
        Task DeleteYodleeUserContextAsync();
    }

    public interface IYodleeUserContextsClientByOrganizationApiMethods
    {
    }

    public partial interface IYodleeUserContextsClient : IYodleeUserContextsClientByLicenseKeyApiMethods, IClientByLicenseKey<IYodleeUserContextsClient, IYodleeUserContextsClientForUser, IYodleeUserContextsClientForOrganization>
    {
    }

    public interface IYodleeUserContextsClientForUser : IYodleeUserContextsClientByContextKeyApiMethods, IClientByContext<IYodleeUserContextsClientForUser, IYodleeUserContextsClientForOrganization>
    {
    }

    public interface IYodleeUserContextsClientForOrganization : IYodleeUserContextsClientByOrganizationApiMethods
    {
    }

    public partial class YodleeUserContextsClient : BaseClient<IYodleeUserContextsClient, IYodleeUserContextsClientForUser, IYodleeUserContextsClientForOrganization, YodleeUserContextsClient>, IYodleeUserContextsClient, IYodleeUserContextsClientForUser, IYodleeUserContextsClientForOrganization
    {
        /// <summary>
        /// Get yodlee user context data for the current user.
        /// </summary>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        public YodleeUserContextContract GetYodleeUserContext()
        {
            var request = new RequestData
            {
                Url = $"yodlee-user-contexts/get",
                Method = HttpMethod.Get,
            };

            return PerformRequest<YodleeUserContextContract>(request);
        }

        /// <summary>
        /// Get yodlee user context data for the current user.
        /// </summary>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        public async Task<YodleeUserContextContract> GetYodleeUserContextAsync()
        {
            var request = new RequestData
            {
                Url = $"yodlee-user-contexts/get",
                Method = HttpMethod.Get,
            };

            return await PerformRequestAsync<YodleeUserContextContract>(request);
        }

        /// <summary>
        /// Create or update yodlee user context for the current user.
        /// </summary>
        /// <param name="contract">Parameters to create or update Yodlee User context.</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        public YodleeUserContextContract CreateOrUpdateYodleeUserContext(CreateOrUpdateYodleeUserContextContract contract)
        {
            var request = new RequestData
            {
                Url = $"yodlee-user-contexts/create-or-update",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<YodleeUserContextContract>(request);
        }

        /// <summary>
        /// Create or update yodlee user context for the current user.
        /// </summary>
        /// <param name="contract">Parameters to create or update Yodlee User context.</param>
        /// <returns>The method returns contract for Yodlee user context for the current user.</returns>
        public async Task<YodleeUserContextContract> CreateOrUpdateYodleeUserContextAsync(CreateOrUpdateYodleeUserContextContract contract)
        {
            var request = new RequestData
            {
                Url = $"yodlee-user-contexts/create-or-update",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<YodleeUserContextContract>(request);
        }

        /// <summary>
        /// Delete yodlee user context for the current user.
        /// </summary>
        /// <returns>The method returns HTTP status code 200 after the deleting of Yodlee user context.</returns>
        public void DeleteYodleeUserContext()
        {
            var request = new RequestData
            {
                Url = $"yodlee-user-contexts/delete",
                Method = HttpMethod.Delete,
            };

            PerformRequest(request);
        }

        /// <summary>
        /// Delete yodlee user context for the current user.
        /// </summary>
        /// <returns>The method returns HTTP status code 200 after the deleting of Yodlee user context.</returns>
        public async Task DeleteYodleeUserContextAsync()
        {
            var request = new RequestData
            {
                Url = $"yodlee-user-contexts/delete",
                Method = HttpMethod.Delete,
            };

            await PerformRequestAsync(request);
        }
    }

    public interface IZendeskAppsClientByLicenseKeyApiMethods
    {
        ZendeskAppsCustomerInformationContract GetCustomerInfo(EmailContract contract);

        Task<ZendeskAppsCustomerInformationContract> GetCustomerInfoAsync(EmailContract contract);
    }

    public interface IZendeskAppsClientByContextKeyApiMethods : IZendeskAppsClientByLicenseKeyApiMethods
    {
    }

    public interface IZendeskAppsClientByOrganizationApiMethods
    {
    }

    public partial interface IZendeskAppsClient : IZendeskAppsClientByLicenseKeyApiMethods, IClientByLicenseKey<IZendeskAppsClient, IZendeskAppsClientForUser, IZendeskAppsClientForOrganization>
    {
    }

    public interface IZendeskAppsClientForUser : IZendeskAppsClientByContextKeyApiMethods, IClientByContext<IZendeskAppsClientForUser, IZendeskAppsClientForOrganization>
    {
    }

    public interface IZendeskAppsClientForOrganization : IZendeskAppsClientByOrganizationApiMethods
    {
    }

    public partial class ZendeskAppsClient : BaseClient<IZendeskAppsClient, IZendeskAppsClientForUser, IZendeskAppsClientForOrganization, ZendeskAppsClient>, IZendeskAppsClient, IZendeskAppsClientForUser, IZendeskAppsClientForOrganization
    {
        public ZendeskAppsCustomerInformationContract GetCustomerInfo(EmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"zendesk-apps/customer-information",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return PerformRequest<ZendeskAppsCustomerInformationContract>(request);
        }

        public async Task<ZendeskAppsCustomerInformationContract> GetCustomerInfoAsync(EmailContract contract)
        {
            var request = new RequestData
            {
                Url = $"zendesk-apps/customer-information",
                Method = HttpMethod.Post,
            };

            request.SetBody(contract);

            return await PerformRequestAsync<ZendeskAppsCustomerInformationContract>(request);
        }
    }
}
